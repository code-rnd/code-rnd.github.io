{"version":3,"sources":["store/actions/appConfig/index.js","store/reducers/appConfig/index.js","store/actions/currentCity/index.js","store/reducers/currentCity/index.js","store/actions/weather/index.js","store/reducers/weather/index.js","store/actions/geo/index.js","store/reducers/geo/index.js","store/reducers/index.js","store/index.js","components/Geo/GeoAutoComponent/index.jsx","components/Geo/GeoManualComponent/index.jsx","components/Geo/DisplayComponent/index.jsx","components/utils/LoadingComponent/index.jsx","components/utils/AnimateMenuComponent/ButtonComponent/index.jsx","components/utils/AnimateMenuComponent/index.jsx","api/opencagedata/index.js","api/weatherbit/index.js","store/actions/weather/async/index.js","containers/WidjetContainer/index.jsx","store/actions/geo/thunk/index.js","store/actions/opencagedata/async/index.js","components/WidjetComponent/index.jsx","index.js"],"names":["setIsToggleLoading","isToggle","type","data","initialState","isToggleLoading","setDataCurrnetCity","coordinates","latitude","longitude","name","weather","setGeo","geoData","reducers","combineReducers","appConfig","state","action","currentCity","newData","messageError","geo","store","createStore","composeWithDevTools","applyMiddleware","thunk","GeoAutoComponent","props","getGeo","className","onClick","disabled","GeoManualComponent","getWeather","useState","isSearch","setIsSearch","placeholder","value","onChange","e","currentTarget","DisplayComponent","city","temperature","LoadingComponent","ButtonComponent","isSelected","dataId","title","routeClick","handleClick","data-id","AnimateMenuComponent","setIsSelected","key","instance","axios","create","baseURL","opencagedata","getAddress","lat","lng","get","this","then","response","results","weatherbitApi","access_key","dispatch","setWeather","temp","catch","error","mapDispatchToProps","navigator","geolocation","getCurrentPosition","position","coords","components","WidjetContainer","connect","isRouteToogle","setIsRouteToggle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b14fd53.chunk.js","sourcesContent":["export const SET_IS_TOGGLE_LOADING = \"SET_IS_TOGGLE_LOADING\";\r\n\r\nexport const setIsToggleLoading = isToggle => ({\r\n  type: SET_IS_TOGGLE_LOADING,\r\n  data: isToggle\r\n});\r\n","import { SET_IS_TOGGLE_LOADING } from \"../../actions/appConfig\";\r\n\r\nexport const initialState = {\r\n  isToggleLoading: false\r\n};\r\n\r\nexport function appConfigReducers(state = initialState, action) {\r\n  let isToggleLoading = null;\r\n\r\n  switch (action.type) {\r\n    case SET_IS_TOGGLE_LOADING:\r\n      isToggleLoading = action.data;\r\n\r\n      return {\r\n        ...state,\r\n        ...{\r\n          isToggleLoading: isToggleLoading\r\n        }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const SET_DATA_CURRENT_CITY = \"SET_DATA_CURRENT_CITY\";\r\n\r\nexport const setDataCurrnetCity = data => ({\r\n  type: SET_DATA_CURRENT_CITY,\r\n  data: data\r\n});\r\n","import { SET_DATA_CURRENT_CITY } from \"../../actions/currentCity\";\r\n\r\nexport const initialState = {\r\n  data: {\r\n    coordinates: {\r\n      latitude: null,\r\n      longitude: null\r\n    },\r\n    name: null,\r\n    weather: null\r\n  }\r\n};\r\n\r\nexport function currentCityReducers(state = initialState, action) {\r\n  const data = state.data;\r\n  let newData = null;\r\n\r\n  switch (action.type) {\r\n    case SET_DATA_CURRENT_CITY:\r\n      newData = action.data;\r\n\r\n      return {\r\n        ...state,\r\n        ...{\r\n          data: { ...data, ...newData }\r\n        }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const SET_WEATHER = \"SET_WEATHER\";\r\nexport const REQUEST_FAILED = \"REQUEST_FAILED\";\r\n\r\nexport const setWeather = city => ({\r\n  type: SET_WEATHER,\r\n  data: city\r\n});\r\n\r\nexport const requestFailed = errorMessage => ({\r\n  type: REQUEST_FAILED,\r\n  data: errorMessage\r\n});\r\n","import { SET_WEATHER, REQUEST_FAILED } from \"../../actions/weather\";\r\n\r\nexport const initialState = {\r\n  data: null\r\n};\r\n\r\nexport function weatherReducers(state = initialState, action) {\r\n  let newData = null;\r\n  let messageError = null;\r\n\r\n  switch (action.type) {\r\n    case SET_WEATHER:\r\n      newData = action.data;\r\n\r\n      return {\r\n        ...state,\r\n        ...{\r\n          data: newData\r\n        }\r\n      };\r\n\r\n    case REQUEST_FAILED:\r\n      messageError = action.data;\r\n\r\n      return {\r\n        ...state,\r\n        ...{\r\n          data: {\r\n            ...messageError\r\n          }\r\n        }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const SET_GEO = \"SET_GEO\";\r\n\r\nexport const setGeo = geoData => ({\r\n  type: SET_GEO,\r\n  data: geoData\r\n});\r\n","import { SET_GEO } from \"../../actions/geo\";\r\n\r\nexport const initialState = {\r\n  data: null\r\n};\r\n\r\nexport function geoReducers(state = initialState, action) {\r\n  let newData = null;\r\n\r\n  switch (action.type) {\r\n    case SET_GEO:\r\n      newData = action.data;\r\n\r\n      return {\r\n        ...state,\r\n        ...{\r\n          data: newData\r\n        }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\nimport { appConfigReducers } from \"./appConfig\";\nimport { currentCityReducers } from \"./currentCity\";\nimport { weatherReducers } from \"./weather\";\nimport { geoReducers } from \"./geo\";\n\nexport const reducers = combineReducers({\n  appConfig: appConfigReducers,\n  currentCity: currentCityReducers,\n  weather: weatherReducers,\n  geo: geoReducers\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport { reducers } from \"./reducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nexport const store = createStore(\n  reducers /* preloadedState, */,\n  composeWithDevTools(applyMiddleware(thunk))\n  //   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import React from \"react\";\r\n\r\nimport \"./style.scss\";\r\n\r\nexport default function GeoAutoComponent(props) {\r\n  const { getGeo } = props;\r\n  const { isToggleLoading } = props;\r\n\r\n  return (\r\n    <div className=\"geoAuto\">\r\n      <div\r\n        className={\"geoAuto__button\"}\r\n        onClick={() => {\r\n          getGeo();\r\n        }}\r\n        disabled={isToggleLoading}\r\n      >\r\n        <i className=\"fas fa-street-view\"></i>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./style.scss\";\r\n\r\nexport default function GeoManualComponent(props) {\r\n  const { getWeather } = props;\r\n  const [isSearch, setIsSearch] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"geoManual\">\r\n      <div\r\n        className={\"geoManual__button margin-bottom20px\"}\r\n        onClick={() => {\r\n          getWeather(isSearch);\r\n        }}\r\n        disabled={!isSearch}\r\n      >\r\n        <i className=\"fas fa-wind\"></i>\r\n      </div>\r\n      <input\r\n        className={\"margin-bottom20px\"}\r\n        type={\"text\"}\r\n        placeholder={\"название города...\"}\r\n        value={isSearch}\r\n        onChange={e => {\r\n          setIsSearch(e.currentTarget.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./style.scss\";\r\n\r\nexport default function DisplayComponent(props) {\r\n  const { city, temperature } = props;\r\n\r\n  const errorMessaage = \"...\";\r\n\r\n  return (\r\n    <div className={\"display\"}>\r\n      <div className=\"informMenu\">\r\n        <div className=\"informMenu-city\">{city ? city : errorMessaage}</div>\r\n        <div className=\"informMenu-temperature\">\r\n          {temperature !== null ? `${temperature}°` : errorMessaage}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./style.scss\";\r\n\r\nexport default function LoadingComponent(props) {\r\n  return (\r\n    <div className=\"loading\">\r\n      <div className=\"spinner\">\r\n        <div className={`rectangle-big rectangle`}>\r\n          <div className={`rectangle-toggle rectangle`}>Загрузочка...</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function ButtonComponent(props) {\r\n  const { isSelected } = props;\r\n  const { dataId, title } = props;\r\n  const { onClick, routeClick } = props;\r\n\r\n  const handleClick = () => {\r\n    routeClick(dataId);\r\n    onClick(dataId);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`button ${isSelected === dataId ? \"active\" : \"\"}`}\r\n      data-id={dataId}\r\n      onClick={() => {\r\n        handleClick();\r\n      }}\r\n      disabled={isSelected === dataId}\r\n    >\r\n      {title}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport ButtonComponent from \"./ButtonComponent\";\r\n\r\nimport \"./style.scss\";\r\n\r\nexport default function AnimateMenuComponent(props) {\r\n  const { routeClick } = props;\r\n\r\n  const [isSelected, setIsSelected] = useState(0);\r\n\r\n  return (\r\n    <div className={\"animateMenu\"}>\r\n      <ButtonComponent\r\n        isSelected={isSelected}\r\n        dataId={0}\r\n        title={<i className=\"fas fa-map-marked-alt\"></i>}\r\n        onClick={setIsSelected}\r\n        routeClick={routeClick}\r\n        key={0}\r\n      />\r\n      <ButtonComponent\r\n        isSelected={isSelected}\r\n        dataId={1}\r\n        title={<i className=\"fas fa-pencil-alt\"></i>}\r\n        onClick={setIsSelected}\r\n        routeClick={routeClick}\r\n        key={1}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n  baseURL: \"https://api.opencagedata.com/geocode/v1/\"\r\n});\r\n\r\nexport const opencagedata = {\r\n  key: \"46c3cf317a3e408a88ccefa30701b1e5\",\r\n\r\n  getAddress(lat, lng) {\r\n    return instance\r\n      .get(`json?q=${lat}+${lng}&key=${this.key}`)\r\n      .then(response => {\r\n        return response.data.results[0];\r\n      });\r\n  }\r\n};\r\n","import axios from \"axios\";\r\n\r\n// export const instance = axios.create({\r\n//   baseURL: \"http://api.weatherstack.com/\"\r\n// });\r\n\r\n// export const weatherStackApi = {\r\n//   access_key: \"a1f5cfaba2e1ca627e17d4c65be60a87\",\r\n\r\n//   getWeather(city) {\r\n//     return instance\r\n//       .get(`current?access_key=${this.access_key}&query=${city}`)\r\n//       .then(response => {\r\n//         return response.data;\r\n//       });\r\n//   }\r\n// };\r\n\r\nexport const instance = axios.create({\r\n  baseURL: \"https://api.weatherbit.io/v2.0/\"\r\n});\r\n\r\nexport const weatherbitApi = {\r\n  access_key: \"338296f9e5f54de485e3967ebfeb7da2\",\r\n\r\n  getWeather(city) {\r\n    return instance\r\n      .get(`current?city=${city}&key=${this.access_key}`)\r\n      .then(response => {\r\n        return response.data.data[0];\r\n      });\r\n  }\r\n};\r\n","import { setWeather, requestFailed } from \"..\";\r\nimport { weatherbitApi } from \"../../../../api/weatherbit\";\r\nimport { setIsToggleLoading } from \"../../appConfig\";\r\nimport { setDataCurrnetCity } from \"../../currentCity\";\r\n\r\nexport const getWeather = city => {\r\n  return dispatch => {\r\n    dispatch(setIsToggleLoading(true));\r\n\r\n    weatherbitApi\r\n      .getWeather(city)\r\n      .then(data => {\r\n        dispatch(setIsToggleLoading(false));\r\n        dispatch(setWeather(data));\r\n\r\n        dispatch(\r\n          setDataCurrnetCity({\r\n            weather: data.temp,\r\n            name: city\r\n          })\r\n        );\r\n      })\r\n      .catch(error => {\r\n        dispatch(requestFailed({ temperature: null }));\r\n        dispatch(\r\n          setDataCurrnetCity({\r\n            weather: null,\r\n            name: city\r\n          })\r\n        );\r\n        dispatch(setIsToggleLoading(false));\r\n      });\r\n  };\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport WidjetComponent from \"../../components/WidjetComponent\";\r\nimport { getGeo } from \"../../store/actions/geo/thunk\";\r\nimport { getWeather } from \"../../store/actions/weather/async\";\r\n\r\nconst mapStateToProps = state => ({\r\n  temperature: state.currentCity.data.weather && state.currentCity.data.weather,\r\n  city: state.currentCity.data.name && state.currentCity.data.name,\r\n  isToggleLoading: state.appConfig.isToggleLoading\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getGeo,\r\n  getWeather\r\n};\r\n\r\nexport const WidjetContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(WidjetComponent);\r\n","import { setGeo } from \"..\";\r\nimport { getAddress } from \"../../opencagedata/async\";\r\nimport { setDataCurrnetCity } from \"../../currentCity\";\r\n\r\nexport function getGeo() {\r\n  return dispatch => {\r\n    const success = position => {\r\n      const latitude = position.coords.latitude;\r\n      const longitude = position.coords.longitude;\r\n\r\n      dispatch(setGeo({ latitude, longitude }));\r\n      dispatch(getAddress(latitude, longitude));\r\n\r\n      dispatch(setDataCurrnetCity({ coordinates: { latitude, longitude } }));\r\n    };\r\n\r\n    const error = () => {\r\n      dispatch(setGeo({ error: \"Unable to retrieve your location\" }));\r\n    };\r\n\r\n    if (!navigator.geolocation) {\r\n      dispatch(setGeo({ error: \"geo not found\" }));\r\n    } else {\r\n      navigator.geolocation.getCurrentPosition(success, error);\r\n    }\r\n  };\r\n}\r\n","import { opencagedata } from \"../../../../api/opencagedata\";\r\nimport { getWeather } from \"../../weather/async\";\r\nimport { setIsToggleLoading } from \"../../appConfig\";\r\n\r\nexport const getAddress = (lat, lng) => {\r\n  return dispatch => {\r\n    dispatch(setIsToggleLoading(true));\r\n\r\n    opencagedata\r\n      .getAddress(lat, lng)\r\n      .then(data => {\r\n        dispatch(getWeather(data.components.city));\r\n\r\n        dispatch(setIsToggleLoading(false));\r\n      })\r\n      .catch(error => {\r\n        dispatch(setIsToggleLoading(false));\r\n      });\r\n  };\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport GeoAutoComponent from \"../Geo/GeoAutoComponent\";\r\nimport GeoManualComponent from \"../Geo/GeoManualComponent\";\r\n\r\nimport DisplayComponent from \"../Geo/DisplayComponent\";\r\nimport LoadingComponent from \"../utils/LoadingComponent\";\r\nimport AnimateMenuComponent from \"../utils/AnimateMenuComponent\";\r\n\r\nimport \"./style.scss\";\r\n\r\nexport default function WidjetComponent(props) {\r\n  const { getGeo, getWeather } = props;\r\n  const { temperature, city } = props;\r\n\r\n  const { isToggleLoading } = props;\r\n  const [isRouteToogle, setIsRouteToggle] = useState(0);\r\n\r\n  return (\r\n    <div className=\"widjet\">\r\n      <DisplayComponent temperature={temperature} city={city} />\r\n      {isRouteToogle ? (\r\n        <GeoManualComponent getWeather={getWeather} />\r\n      ) : (\r\n        <GeoAutoComponent getGeo={getGeo} />\r\n      )}\r\n      <AnimateMenuComponent routeClick={setIsRouteToggle} />\r\n\r\n      {isToggleLoading && <LoadingComponent />}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nimport { WidjetContainer } from \"./containers/WidjetContainer\";\n\nimport \"./styles/style.scss\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <WidjetContainer />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
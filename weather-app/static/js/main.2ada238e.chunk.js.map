{"version":3,"sources":["store/actions/appConfig/index.ts","store/actions/currentCity/index.ts","store/reducers/appConfig/index.ts","store/actions/weather/index.ts","store/reducers/currentCity/index.ts","store/actions/geo/index.ts","store/reducers/weather/index.ts","store/reducers/geo/index.ts","store/reducers/index.ts","types/constants/index.ts","store/index.ts","components/Geo/GeoAutoComponent/index.tsx","components/Geo/GeoManualComponent/index.tsx","components/Geo/DisplayComponent/index.tsx","components/utils/LoadingComponent/index.tsx","components/utils/AnimateMenuComponent/ButtonComponent/index.tsx","components/utils/AnimateMenuComponent/index.tsx","components/WidjetComponent/index.tsx","api/opencagedata/index.ts","api/weatherbit/index.ts","store/actions/weather/async/index.ts","containers/WidjetContainer/index.tsx","store/actions/geo/thunk/index.ts","store/actions/opencagedata/async/index.ts","index.tsx"],"names":["Constants","setIsToggleLoading","isToggle","type","SET_IS_TOGGLE_LOADING","data","initialState","isToggleLoading","setDataCurrnetCity","SET_DATA_CURRENT_CITY","coordinates","latitude","longitude","name","weather","Constansts","setGeo","geoData","SET_GEO","TitlesLoading","reducers","combineReducers","appConfig","state","action","currentCity","newData","messageError","SET_WEATHER","REQUEST_FAILED","geo","store","createStore","composeWithDevTools","applyMiddleware","thunk","GeoAutoComponent","props","getGeo","className","onClick","GeoManualComponent","getWeather","useState","isSearch","setIsSearch","handlerClick","placeholder","value","onChange","e","currentTarget","onKeyPress","key","handlerOnKeyPress","DisplayComponent","city","temperature","LoadingComponent","load","ButtonComponent","isSelected","dataId","title","routeClick","handleClick","data-id","AnimateMenuComponent","setIsSelected","WidjetComponent","isRouteToogle","setIsRouteToggle","instance","axios","create","baseURL","opencagedata","getAddress","lat","lng","get","this","then","response","results","weatherbitApi","access_key","dispatch","setWeather","temp","catch","error","errorMessage","mapDispatchToProps","navigator","geolocation","getCurrentPosition","position","coords","components","WidjetContainer","connect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ada238e.chunk.js","sourcesContent":["export enum Constants {\n  SET_IS_TOGGLE_LOADING = \"SET_IS_TOGGLE_LOADING\"\n}\nexport const setIsToggleLoading = (isToggle: boolean) => ({\n  type: Constants.SET_IS_TOGGLE_LOADING,\n  data: isToggle\n});\n","export enum Constants {\n  SET_DATA_CURRENT_CITY = \"SET_DATA_CURRENT_CITY\"\n}\nexport const setDataCurrnetCity = (data: object) => ({\n  type: Constants.SET_DATA_CURRENT_CITY,\n  data: data\n});\n","import { Constants } from \"../../actions/appConfig\";\nimport { IAppConfigReducer } from \"../../../types/interfaces/reducers/appConfig\";\n\nexport const initialState: IAppConfigReducer = {\n  isToggleLoading: false\n};\n\nexport function appConfigReducers(state = initialState, action: any) {\n  let isToggleLoading = null;\n\n  switch (action.type) {\n    case Constants.SET_IS_TOGGLE_LOADING:\n      isToggleLoading = action.data;\n\n      return {\n        ...state,\n        ...{\n          isToggleLoading: isToggleLoading\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n","export enum Constants {\n  SET_WEATHER = \"SET_WEATHER\",\n  REQUEST_FAILED = \"REQUEST_FAILED\"\n}\n\nexport const setWeather = (city: string) => ({\n  type: Constants.SET_WEATHER,\n  data: city\n});\n\nexport const requestFailed = (errorMessage: any) => ({\n  type: Constants.REQUEST_FAILED,\n  data: errorMessage\n});\n","import { Constants } from \"../../actions/currentCity\";\nimport { ICurrentCityReducer } from \"../../../types/interfaces/reducers/currentCity\";\n\nexport const initialState: ICurrentCityReducer = {\n  data: {\n    coordinates: {\n      latitude: null,\n      longitude: null\n    },\n    name: \"\",\n    weather: \"\"\n  }\n};\n\nexport function currentCityReducers(state = initialState, action: any) {\n  const data = state.data;\n  let newData = null;\n\n  switch (action.type) {\n    case Constants.SET_DATA_CURRENT_CITY:\n      newData = action.data;\n\n      return {\n        ...state,\n        ...{\n          data: { ...data, ...newData }\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n","export enum Constansts {\n  SET_GEO = \"SET_GEO\"\n}\n\nexport const setGeo = (geoData: any) => ({\n  type: Constansts.SET_GEO,\n  data: geoData\n});\n","import { Constants } from \"../../actions/weather\";\nimport { IWeatherReducer } from \"../../../types/interfaces/reducers/weather\";\n\nexport const initialState: IWeatherReducer = {\n  data: null\n};\n\nexport function weatherReducers(state = initialState, action: any) {\n  let newData = null;\n  let messageError = null;\n\n  switch (action.type) {\n    case Constants.SET_WEATHER:\n      newData = action.data;\n\n      return {\n        ...state,\n        ...{\n          data: newData\n        }\n      };\n\n    case Constants.REQUEST_FAILED:\n      messageError = action.data;\n\n      return {\n        ...state,\n        ...{\n          data: {\n            ...messageError\n          }\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n","import { Constansts } from \"../../actions/geo\";\nimport { IGeoReducer } from \"../../../types/interfaces/reducers/geo\";\n\nexport const initialState: IGeoReducer = {\n  data: {\n    latitude: null,\n    longitude: null\n  }\n};\n\nexport function geoReducers(state = initialState, action: any) {\n  let newData = null;\n\n  switch (action.type) {\n    case Constansts.SET_GEO:\n      newData = action.data;\n\n      return {\n        ...state,\n        ...{\n          data: newData\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { appConfigReducers } from \"./appConfig\";\nimport { currentCityReducers } from \"./currentCity\";\nimport { weatherReducers } from \"./weather\";\nimport { geoReducers } from \"./geo\";\n\nexport const reducers = combineReducers({\n  appConfig: appConfigReducers,\n  currentCity: currentCityReducers,\n  weather: weatherReducers,\n  geo: geoReducers\n});\n","export enum TitlesLoading {\r\n  load = \"Загрузочка...\"\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\nimport { reducers } from \"./reducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nexport const store = createStore(\n  reducers /* preloadedState, */,\n  composeWithDevTools(applyMiddleware(thunk))\n  //   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import React from \"react\";\nimport { IGeoAutoProps } from \"../../../types/interfaces/components/GeoAuto\";\n\nimport \"./style.scss\";\n\nconst GeoAutoComponent: React.FC<IGeoAutoProps> = props => {\n  const { getGeo } = props;\n  const { isToggleLoading } = props;\n\n  return (\n    <div className=\"geoAuto\">\n      <div\n        className={`geoAuto__button ${isToggleLoading && \"disabled\"}`}\n        onClick={() => {\n          getGeo();\n        }}\n      >\n        <i className=\"fas fa-street-view\"></i>\n      </div>\n    </div>\n  );\n};\n\nexport default GeoAutoComponent;\n","import React, { useState } from \"react\";\nimport { IGeoManualProps } from \"../../../types/interfaces/components/GeoManual\";\n\nimport \"./style.scss\";\n\nconst GeoManualComponent: React.FC<IGeoManualProps> = ({ getWeather }) => {\n  const [isSearch, setIsSearch] = useState<string>(\"\");\n\n  const handlerClick = () => {\n    getWeather(isSearch);\n  };\n\n  const handlerOnKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\" && isSearch) {\n      handlerClick();\n    }\n  };\n\n  return (\n    <div className=\"geoManual\">\n      <div\n        className={`geoManual__button margin-bottom20px ${!isSearch &&\n          \"disabled\"}`}\n        onClick={() => {\n          handlerClick();\n        }}\n      >\n        <i className=\"fas fa-wind\"></i>\n      </div>\n      <input\n        className={\"margin-bottom20px\"}\n        type={\"text\"}\n        placeholder={\"название города...\"}\n        value={isSearch}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          setIsSearch(e.currentTarget.value);\n        }}\n        onKeyPress={e => handlerOnKeyPress(e)}\n      />\n    </div>\n  );\n};\n\nexport default GeoManualComponent;\n","import React from \"react\";\nimport { IDisplayProps } from \"../../../types/interfaces/components/Display\";\n\nimport \"./style.scss\";\n\nconst DisplayComponent: React.FC<IDisplayProps> = ({ city, temperature }) => {\n  const errorMessaage: string = \"...\";\n\n  return (\n    <div className={\"display\"}>\n      <div className=\"informMenu\">\n        <div className=\"informMenu-city\">{city ? city : errorMessaage}</div>\n        <div className=\"informMenu-temperature\">\n          {temperature !== null ? `${temperature}°` : errorMessaage}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DisplayComponent;\n","import React from \"react\";\nimport { ILoadingProps } from \"../../../types/interfaces/components/utils/Loading\";\n\nimport \"./style.scss\";\nimport { TitlesLoading } from \"../../../types/constants\";\n\nconst LoadingComponent: React.FC<ILoadingProps> = () => {\n  return (\n    <div className=\"loading\">\n      <div className=\"spinner\">\n        <div className={`rectangle-big rectangle`}>\n          <div className={`rectangle-toggle rectangle`}>\n            {TitlesLoading.load}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoadingComponent;\n","import React from \"react\";\nimport { IButtonProps } from \"../../../../types/interfaces/components/utils/AnimateMenu/Button\";\n\nconst ButtonComponent: React.FC<IButtonProps> = props => {\n  const { isSelected } = props;\n  const { dataId, title } = props;\n  const { onClick, routeClick } = props;\n\n  const handleClick = () => {\n    routeClick(dataId);\n    onClick(dataId);\n  };\n\n  return (\n    <div\n      className={`button ${isSelected === dataId ? \"active disabled\" : \"\"}`}\n      data-id={dataId}\n      onClick={() => {\n        handleClick();\n      }}\n    >\n      {title}\n    </div>\n  );\n};\n\nexport default ButtonComponent;\n","import React, { useState } from \"react\";\nimport ButtonComponent from \"./ButtonComponent\";\nimport { IAnimateProps } from \"../../../types/interfaces/components/utils/AnimateMenu\";\n\nimport \"./style.scss\";\n\nconst AnimateMenuComponent: React.FC<IAnimateProps> = props => {\n  const { routeClick } = props;\n\n  const [isSelected, setIsSelected] = useState<number>(0);\n\n  return (\n    <div className={\"animateMenu\"}>\n      <ButtonComponent\n        isSelected={isSelected}\n        dataId={0}\n        title={<i className=\"fas fa-map-marked-alt\"></i>}\n        onClick={setIsSelected}\n        routeClick={routeClick}\n        key={0}\n      />\n      <ButtonComponent\n        isSelected={isSelected}\n        dataId={1}\n        title={<i className=\"fas fa-pencil-alt\"></i>}\n        onClick={setIsSelected}\n        routeClick={routeClick}\n        key={1}\n      />\n    </div>\n  );\n};\n\nexport default AnimateMenuComponent;\n","import React, { useState } from \"react\";\n\nimport GeoAutoComponent from \"../Geo/GeoAutoComponent\";\nimport GeoManualComponent from \"../Geo/GeoManualComponent\";\n\nimport DisplayComponent from \"../Geo/DisplayComponent\";\nimport LoadingComponent from \"../utils/LoadingComponent\";\nimport AnimateMenuComponent from \"../utils/AnimateMenuComponent\";\n\nimport { IWidjetProps } from \"../../types/interfaces/components/Widjet\";\n\nimport \"./style.scss\";\n\nconst WidjetComponent: React.FC<IWidjetProps> = props => {\n  const { getGeo, getWeather } = props;\n  const { temperature, city } = props;\n\n  const { isToggleLoading } = props;\n  const [isRouteToogle, setIsRouteToggle] = useState<number>(0);\n\n  return (\n    <div className=\"widjet\">\n      <DisplayComponent temperature={temperature} city={city} />\n      {isRouteToogle ? (\n        <GeoManualComponent getWeather={getWeather} />\n      ) : (\n        <GeoAutoComponent getGeo={getGeo} />\n      )}\n      <AnimateMenuComponent routeClick={setIsRouteToggle} />\n\n      {isToggleLoading && <LoadingComponent />}\n    </div>\n  );\n};\n\nexport default WidjetComponent;\n","import axios from \"axios\";\nimport { IOpencagedata } from \"../../types/interfaces/api/opencagedata\";\n\nexport const instance = axios.create({\n  baseURL: \"https://api.opencagedata.com/geocode/v1/\"\n});\n\nexport const opencagedata: IOpencagedata = {\n  key: \"46c3cf317a3e408a88ccefa30701b1e5\",\n\n  getAddress(lat, lng) {\n    return instance\n      .get(`json?q=${lat}+${lng}&key=${this.key}`)\n      .then(response => {\n        return response.data.results[0];\n      });\n  }\n};\n","import axios from \"axios\";\nimport { IWeatherbitApi } from \"../../types/interfaces/api/weatherbit\";\n\nexport const instance = axios.create({\n  baseURL: \"https://api.weatherbit.io/v2.0/\"\n});\n\nexport const weatherbitApi: IWeatherbitApi = {\n  access_key: \"338296f9e5f54de485e3967ebfeb7da2\",\n\n  getWeather(city) {\n    return instance\n      .get(`current?city=${city}&key=${this.access_key}`)\n      .then(response => {\n        return response.data.data[0];\n      });\n  }\n};\n","import { setWeather, requestFailed } from \"..\";\nimport { weatherbitApi } from \"../../../../api/weatherbit\";\nimport { setIsToggleLoading } from \"../../appConfig\";\nimport { setDataCurrnetCity } from \"../../currentCity\";\nimport { Dispatch } from \"redux\";\n\nexport const getWeather = (city: string) => {\n  return (dispatch: Dispatch<any>) => {\n    dispatch(setIsToggleLoading(true));\n\n    weatherbitApi\n      .getWeather(city)\n      .then(data => {\n        dispatch(setIsToggleLoading(false));\n        dispatch(setWeather(data));\n\n        dispatch(\n          setDataCurrnetCity({\n            weather: data.temp,\n            name: city\n          })\n        );\n      })\n      .catch(error => {\n        dispatch(requestFailed({ temperature: null }));\n        dispatch(\n          setDataCurrnetCity({\n            weather: null,\n            name: city\n          })\n        );\n        dispatch(setIsToggleLoading(false));\n      });\n  };\n};\n","import { connect } from \"react-redux\";\nimport WidjetComponent from \"../../components/WidjetComponent\";\nimport { getGeo } from \"../../store/actions/geo/thunk\";\nimport { getWeather } from \"../../store/actions/weather/async\";\n\nimport { IRootState } from \"../../types/interfaces/rootState\";\n\nconst mapStateToProps = (state: IRootState) => ({\n  temperature: state.currentCity.data.weather && state.currentCity.data.weather,\n  city: state.currentCity.data.name && state.currentCity.data.name,\n  isToggleLoading: state.appConfig.isToggleLoading\n});\n\nconst mapDispatchToProps = {\n  getGeo,\n  getWeather\n};\n\nexport const WidjetContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WidjetComponent);\n","import { setGeo } from \"..\";\nimport { getAddress } from \"../../opencagedata/async\";\nimport { setDataCurrnetCity } from \"../../currentCity\";\nimport { Dispatch } from \"redux\";\n\nexport function getGeo() {\n  return (dispatch: Dispatch<any>) => {\n    const success = (position: any) => {\n      const latitude: number = position.coords.latitude;\n      const longitude: number = position.coords.longitude;\n\n      dispatch(setGeo({ latitude, longitude }));\n      dispatch(getAddress(latitude, longitude));\n\n      dispatch(setDataCurrnetCity({ coordinates: { latitude, longitude } }));\n    };\n\n    const error = () => {\n      dispatch(setGeo({ error: \"Unable to retrieve your location\" }));\n    };\n\n    if (!navigator.geolocation) {\n      dispatch(setGeo({ error: \"geo not found\" }));\n    } else {\n      navigator.geolocation.getCurrentPosition(success, error);\n    }\n  };\n}\n","import { opencagedata } from \"../../../../api/opencagedata\";\nimport { getWeather } from \"../../weather/async\";\nimport { setIsToggleLoading } from \"../../appConfig\";\n\nimport { Dispatch } from \"redux\";\n\nexport const getAddress = (lat: number, lng: number) => {\n  return (dispatch: Dispatch<any>) => {\n    dispatch(setIsToggleLoading(true));\n\n    opencagedata\n      .getAddress(lat, lng)\n      .then(data => {\n        dispatch(getWeather(data.components.city));\n\n        dispatch(setIsToggleLoading(false));\n      })\n      .catch(error => {\n        dispatch(setIsToggleLoading(false));\n      });\n  };\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nimport { WidjetContainer } from \"./containers/WidjetContainer\";\n\nimport \"./styles/style.scss\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <WidjetContainer />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
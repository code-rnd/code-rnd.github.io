{"version":3,"sources":["serviceWorker.ts","app/store/history/history.model.ts","app/store/authorization/authorization.selectors.ts","app/store/authorization/authorization.model.ts","app/shared/components/Notification/Notification.tsx","app/store/history/history.actions.ts","app/store/authorization/authorization.utils.ts","app/shared/components/Button/model/ButtonProps.model.ts","app/store/authorization/authorization.actions.ts","app/routing/routing.enums.ts","app/shared/components/Fields/InputText/InputText.tsx","app/shared/components/Button/Button.tsx","app/pages/Authorization/Authorization.tsx","app/shared/components/Body/Body.tsx","app/pages/NotFound/NotFound.tsx","app/store/route/route.selector.ts","app/shared/constants/index.ts","app/store/route/route.actions.ts","app/store/route/route.reducer.ts","app/shared/components/Header/Header.tsx","app/store/history/history.reducer.ts","app/store/history/history.utils.ts","app/store/history/history.selectors.ts","app/pages/Services/components/Treeview/components/Menu/model/Menu.model.ts","app/pages/History/components/TableHistory/TableHistory.tsx","app/shared/components/HeadingPage/HeadingPage.tsx","app/pages/History/History.tsx","app/store/services/services.selectors.ts","app/store/services/services.utils.ts","app/store/services/services.actions.ts","app/shared/utils/service.util.ts","app/store/services/services.reducer.ts","app/mock/mocks.ts","app/store/authorization/authorization.reducer.ts","app/shared/components/Modal/Modal.tsx","app/shared/components/Fields/CheckBox/CheckBox.tsx","app/pages/Services/components/EditForm/EditForm.tsx","app/pages/Services/components/ServicesModal/ServicesModal.tsx","app/pages/Services/components/Treeview/utils/itemStyled.util.ts","app/pages/Services/components/Treeview/components/Menu/Menu.tsx","app/pages/Services/components/Treeview/components/Children/Children.tsx","app/pages/Services/components/Treeview/components/Parent/Parent.tsx","app/pages/Services/components/Treeview/components/TreeBranch/TreeBranch.tsx","app/pages/Services/components/Treeview/Treeview.tsx","app/pages/Services/Services.tsx","app/routing/routing.const.tsx","app/pages/Home/Home.tsx","app/routing/routing.tsx","app/store/reducers/index.ts","app/store/middlewares/index.ts","app/store/index.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ACTION_HISTORY","getAuthorization","state","authorization","ACTION_LOGIN","Notification","memo","action","title","classes","useMemo","cn","notification__success","EDIT","LOGIN","LOGIN_OUT","ADD","notification__warning","ARCHIVE","className","historyActions","prefix","SET_LOADING","this","SET_UPDATE_HISTORY","setLoading","createAction","setUpdateHistory","updateHistory","user","dispatch","a","e","console","log","BUTTON_TYPE","prepareAction","prepareUser","authorizationActions","SET_LOGIN","setLogin","updateLogin","name","timer","setTimeout","date","Date","RouteUrls","Page","FieldText","placeholder","disable","register","errors","props","fieldText__disable","type","ref","required","fieldText__visible","Button","onClick","visible","loading","style","button__success","SUCCESS","button__default","DEFAULT","button__error","ERROR","button__disabled","button__visible","button__loading","Authorization","isLoading","useSelector","useForm","handleSubmit","useDispatch","onSubmit","useCallback","values","margin","width","Body","children","NotFound","DATE_FORMAT","getRoute","route","routeActions","SET_CURRENT_ROUTE","setCurrentRoute","initialState","HOME","reducerMap","payload","routeReducer","handleActions","Header","history","useHistory","handleClick","url","useEffect","push","button__active","SERVICES","HISTORY","newList","list","lastId","length","id","prepareHistory","lastItem","historyReducer","error","getHistory","urls","EDIT_MODE","TableHistory","map","key","moment","format","DB","HeadingPage","btAction","btTitle","btType","History","useState","isShowTable","setShowTable","buttonTitle","getServices","servies","prepareUpdateItem","array","newItem","result","getRandomArbitrary","childrenItems","level","oldItem","updateItemByID","i","xItem","addItemByID","oldChildren","min","max","Math","round","random","servicesActions","SET_UPDATE_SERVICE","setUpdateService","updateService","services","actionHistory","isArchive","servicesReducer","authorizationReducer","Modal","modalClosed","cbCancel","cancelTitle","cbOk","okTitle","backDrop","event","stopPropagation","FieldCheckBox","EditForm","ServicesModal","mode","initialValues","close","defaultValues","modalContent","prepareItem","prepareList","prepareAddItem","itemStyled","item","count","x","padding","opacity","paddingLeft","Menu","isModalShow","setIsModalShow","isModalMode","setModalMode","isModalTitleMode","setModalTitleMode","archiveButtonTitle","handleOpenModal","editMode","titleMode","ChildrenItem","styled","item__archive","ParentItem","isOpen","handleOpen","item__open","TreeBranch","isLast","setOpen","Treeview","items","Services","setModalShow","Routes","component","path","exact","Home","handleLogOut","Routing","contentRoute","reducers","combineReducers","middlewares","composeWithDevTools","applyMiddleware","getState","next","Function","store","createStore","App","basename","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.63ed790d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum ACTION_HISTORY {\n  EDIT = \"Редактирование услуги\",\n  ADD = \"Добавление услуги\",\n  ARCHIVE = \"Архивирование услуги\",\n  LOGIN = \"Вход в сервис\",\n  LOGIN_OUT = \"Выход из сервиса\",\n}\n\nexport interface HistoryModelState {\n  list: HistoryItemModel[];\n  lastItem: HistoryItemModel;\n  isLoading: boolean;\n  error: string;\n}\n\nexport interface HistoryItemModel {\n  user: string;\n  date: Date;\n  action: ACTION_HISTORY;\n  id: number;\n}\n\nexport interface ActionUpdateHistory {\n  user: string;\n  action: ACTION_HISTORY;\n}\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getAuthorization = (state: StoreModel) => state.authorization;\n","export interface AuthorizationModel {\n  name: string;\n  date: Date;\n  action: ACTION_LOGIN;\n}\n\nexport interface AuthorizationStateModel {\n  user: string;\n  date: Date;\n  isLoading: boolean;\n  error: \"\";\n}\n\nexport enum ACTION_LOGIN {\n  LOGIN = \"LOGIN\",\n  LOGIN_OUT = \"LOGIN_OUT\",\n}\n","import React, { FC, memo, useMemo } from \"react\";\nimport cn from \"classnames\";\n\nimport { ACTION_HISTORY } from \"../../../store/history/history.model\";\nimport { NotificationModel } from \"./model/Notification.model\";\n\nimport \"./Notification.scss\";\n\nexport const Notification: FC<NotificationModel> = memo(({ action, title }) => {\n  const classes = useMemo(() => {\n    return cn([\n      \"notification\",\n      {\n        notification__success:\n          action.action === ACTION_HISTORY.EDIT ||\n          action.action === ACTION_HISTORY.LOGIN ||\n          action.action === ACTION_HISTORY.LOGIN_OUT ||\n          action.action === ACTION_HISTORY.ADD,\n      },\n      { notification__warning: action.action === ACTION_HISTORY.ARCHIVE },\n    ]);\n  }, [action]);\n\n  return <div className={classes}>{title}: {action.action}</div>;\n});\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\nimport { Dispatch } from \"redux\";\nimport { ACTION_HISTORY, ActionUpdateHistory } from \"./history.model\";\n\nclass HistoryActions {\n  readonly prefix: string = \"HISTORY\";\n  readonly SET_LOADING: string = `${this.prefix}.SET_LOADING`;\n  readonly SET_UPDATE_HISTORY: string = `${this.prefix}.SET_UPDATE_HISTORY`;\n\n  setLoading: ActionFunction1<boolean, Action<boolean>> = createAction(\n    this.SET_LOADING\n  );\n  setUpdateHistory: ActionFunction1<\n    ActionUpdateHistory,\n    Action<ActionUpdateHistory>\n  > = createAction(this.SET_UPDATE_HISTORY);\n\n  updateHistory: any = (user: string, action: ACTION_HISTORY) => async (\n    dispatch: Dispatch\n  ) => {\n    dispatch(this.setLoading(true));\n    try {\n      dispatch(this.setUpdateHistory({ user, action }));\n      dispatch(this.setLoading(false));\n    } catch (e) {\n      console.log(\"Ошибка в методе updateHistory: \", e);\n      dispatch(this.setLoading(false));\n    }\n  };\n}\n\nexport const historyActions = new HistoryActions();\n","import { ACTION_LOGIN } from \"./authorization.model\";\nimport { ACTION_HISTORY } from \"../history/history.model\";\n\nexport const prepareAction = (action: ACTION_LOGIN) => {\n  return action === ACTION_LOGIN.LOGIN\n    ? ACTION_HISTORY.LOGIN\n    : ACTION_HISTORY.LOGIN_OUT;\n};\n\nexport const prepareUser = (user: string, action: ACTION_LOGIN) => {\n  return action === ACTION_LOGIN.LOGIN ? user : \"\";\n};\n","export interface ButtonPropsModel {\n  type: BUTTON_TYPE;\n  onClick: () => void;\n  disable?: boolean;\n  visible?: boolean;\n  title: string;\n  loading?: boolean;\n  className?: string;\n  style?: any;\n}\n\nexport enum BUTTON_TYPE {\n  DEFAULT = \"DEFAULT\",\n  SUCCESS = \"SUCCESS\",\n  ERROR = \"ERROR\",\n}\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\nimport { Dispatch } from \"redux\";\n\nimport { ACTION_LOGIN, AuthorizationModel } from \"./authorization.model\";\nimport { historyActions } from \"../history/history.actions\";\nimport { prepareAction, prepareUser } from \"./authorization.utils\";\n\nclass AuthorizationActions {\n  readonly prefix: string = \"AUTHORIZATION\";\n  readonly SET_LOADING: string = `${this.prefix}.SET_LOADING`;\n  readonly SET_LOGIN: string = `${this.prefix}.SET_LOGIN`;\n\n  setLoading: ActionFunction1<boolean, Action<boolean>> = createAction(\n    this.SET_LOADING\n  );\n  setLogin: ActionFunction1<\n    AuthorizationModel,\n    Action<AuthorizationModel>\n  > = createAction(this.SET_LOGIN);\n\n  updateLogin: any = (name: string, action: ACTION_LOGIN) => async (\n    dispatch: Dispatch\n  ) => {\n    dispatch(this.setLoading(true));\n    try {\n      const timer = setTimeout(() => {\n        dispatch(\n          this.setLogin({\n            name: prepareUser(name, action),\n            date: new Date(),\n            action,\n          })\n        );\n        dispatch(historyActions.updateHistory(name, prepareAction(action)));\n        dispatch(this.setLoading(false));\n      }, 1500);\n      return timer;\n    } catch (e) {\n      console.log(\"Ошибка в методе updateLogin: \", e);\n      dispatch(this.setLoading(false));\n    }\n  };\n}\n\nexport const authorizationActions = new AuthorizationActions();\n","export enum RouteUrls {\n  HOME = \"/\",\n  SERVICES = \"/services\",\n  HISTORY = \"/history\",\n}\n\nexport enum Page {\n  HOME = \"Главная\",\n  SERVICES = \"Услуги\",\n  HISTORY = \"История действий\",\n}\n","import React, { FC, memo } from \"react\";\nimport cn from \"classnames\";\n\nimport { FieldTextModel } from \"./model/FieldText.model\";\n\nimport \"./InputText.scss\";\n\nexport const FieldText: FC<FieldTextModel> = memo(\n  ({ title, name, placeholder, disable, register, errors, ...props }) => {\n    return (\n      <div className={cn([\"fieldText\", { fieldText__disable: disable }])}>\n        <label>{title}</label>\n        <input\n          type=\"text\"\n          name={name}\n          placeholder={placeholder}\n          ref={register({\n            required: \"Required\",\n          })}\n          {...props}\n        />\n        <label\n          className={cn([\n            \"fieldText__errors\",\n            { fieldText__visible: errors?.[name] },\n          ])}\n        >\n          {title}*\n        </label>\n      </div>\n    );\n  }\n);\n","import React, { FC, memo } from \"react\";\nimport cn from \"classnames\";\n\nimport { BUTTON_TYPE, ButtonPropsModel } from \"./model/ButtonProps.model\";\n\nimport \"./Button.scss\";\n\nexport const Button: FC<ButtonPropsModel> = memo(\n  ({ onClick, title, type, className, disable, visible, loading, style }) => {\n    return (\n      <>\n        <div\n          className={cn([\n            \"button\",\n            className,\n            { button__success: type === BUTTON_TYPE.SUCCESS },\n            { button__default: type === BUTTON_TYPE.DEFAULT },\n            { button__error: type === BUTTON_TYPE.ERROR },\n            { button__disabled: disable },\n            { button__visible: visible },\n            { button__loading: loading },\n          ])}\n          onClick={onClick}\n          style={style}\n        >\n          {title}\n          {loading && <div className=\"spinner\" />}\n        </div>\n      </>\n    );\n  }\n);\n","import React, { FC, memo, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\n\nimport { authorizationActions } from \"../../store/authorization/authorization.actions\";\nimport { getAuthorization } from \"../../store/authorization/authorization.selectors\";\nimport { BUTTON_TYPE } from \"../../shared/components/Button/model/ButtonProps.model\";\nimport { ACTION_LOGIN } from \"../../store/authorization/authorization.model\";\nimport { FieldText } from \"../../shared/components/Fields/InputText\";\nimport { Button } from \"../../shared/components/Button\";\n\nimport \"./Authorization.scss\";\n\nexport const Authorization: FC = memo(() => {\n  const { isLoading } = useSelector(getAuthorization);\n  const { register, handleSubmit, errors } = useForm();\n  const dispatch = useDispatch();\n\n  const onSubmit = useCallback(\n    (values: any) => {\n      dispatch(\n        authorizationActions.updateLogin(values.name, ACTION_LOGIN.LOGIN)\n      );\n    },\n    [dispatch]\n  );\n\n  return (\n    <div className=\"page-authorization\">\n      <div className=\"page-authorization-body\">\n        <div className=\"authorization-form\">\n          <FieldText\n            name=\"name\"\n            title=\"Имя пользователя\"\n            register={register}\n            disable={isLoading}\n            errors={errors}\n          />\n          <Button\n            type={BUTTON_TYPE.DEFAULT}\n            onClick={handleSubmit(onSubmit)}\n            title=\"Вход\"\n            style={{\n              margin: 0,\n              width: \"100%\",\n            }}\n            loading={isLoading}\n          />\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { FC, memo } from \"react\";\nimport cn from \"classnames\";\n\nimport { BodyModel } from \"./model/Body.model\";\n\nimport \"./Body.scss\";\n\nexport const Body: FC<BodyModel> = memo(({ isLoading, children }) => {\n  return (\n    <div className=\"page-body\">\n      <div className={cn({ \"page-body-loader\": isLoading })}>{children}</div>\n    </div>\n  );\n});\n","import React, { FC, memo } from \"react\";\n\nimport { Body } from \"../../shared/components/Body\";\n\nexport const NotFound: FC = memo(() => {\n  return <Body>404 Not found</Body>;\n});\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getRoute = (state: StoreModel) => state.route;\n","export const urls = {\n  baseUrl: \"/\",\n};\n\nexport enum DATE_FORMAT {\n  DB = \"DD.MM.YYYY MM:SS\",\n}\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\n\nclass Route {\n  readonly prefix: string = \"ROUTE\";\n  readonly SET_CURRENT_ROUTE: string = \"SET_CURRENT_ROUTE\";\n\n  setCurrentRoute: ActionFunction1<string, Action<string>> = createAction(\n    this.SET_CURRENT_ROUTE\n  );\n}\n\nexport const routeActions = new Route();\n","import { Action, handleActions } from \"redux-actions\";\nimport { RouteUrls } from \"../../routing/routing.enums\";\nimport { RouteStateModel } from \"./route.model\";\nimport { routeActions } from \"./route.actions\";\n\nconst initialState: RouteStateModel = {\n  route: RouteUrls.HOME,\n};\n\nconst setCurrentRoute = (\n  state: RouteStateModel,\n  action: Action<RouteUrls>\n): RouteStateModel => ({\n  ...state,\n  route: action.payload,\n});\n\nconst reducerMap: { [key: string]: any } = {\n  [routeActions.SET_CURRENT_ROUTE]: setCurrentRoute,\n};\n\nexport const routeReducer = handleActions(reducerMap, initialState);\n","import React, { FC, memo, useCallback, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport cn from \"classnames\";\n\nimport { getAuthorization } from \"../../../store/authorization/authorization.selectors\";\nimport { Page, RouteUrls } from \"../../../routing/routing.enums\";\nimport { BUTTON_TYPE } from \"../Button/model/ButtonProps.model\";\nimport { getRoute } from \"../../../store/route/route.selector\";\nimport { routeActions } from \"../../../store/route\";\nimport { Button } from \"../Button\";\n\nimport \"./Header.scss\";\n\nexport const Header: FC = memo(() => {\n  const { user } = useSelector(getAuthorization);\n  const { route } = useSelector(getRoute);\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const handleClick = useCallback(\n    (url: RouteUrls) => {\n      dispatch(routeActions.setCurrentRoute(url as RouteUrls));\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    history.push(route);\n  }, [history, route]);\n\n  return (\n    <div className=\"page-header\">\n      <div className=\"page-header-title\">\n        Пользователь: <strong>{user}</strong>\n      </div>\n      <div className=\"page-header-navbar\">\n        <Button\n          type={BUTTON_TYPE.DEFAULT}\n          onClick={() => handleClick(RouteUrls.HOME)}\n          title={Page.HOME}\n          className={cn([{ button__active: route === RouteUrls.HOME }])}\n        />\n        <Button\n          type={BUTTON_TYPE.DEFAULT}\n          onClick={() => handleClick(RouteUrls.SERVICES)}\n          title={Page.SERVICES}\n          className={cn([{ button__active: route === RouteUrls.SERVICES }])}\n        />\n        <Button\n          type={BUTTON_TYPE.DEFAULT}\n          onClick={() => handleClick(RouteUrls.HISTORY)}\n          title={Page.HISTORY}\n          className={cn([{ button__active: route === RouteUrls.HISTORY }])}\n        />\n      </div>\n    </div>\n  );\n});\n","import { Action, handleActions } from \"redux-actions\";\n\nimport { ACTION_HISTORY, HistoryModelState } from \"./history.model\";\nimport { historyActions } from \"./history.actions\";\nimport { prepareHistory } from \"./history.utils\";\n\nexport const initialState: HistoryModelState = {\n  list: [],\n  lastItem: {} as any,\n  isLoading: false,\n  error: \"\",\n};\n\nconst setLaoding = (\n  state: HistoryModelState,\n  action: Action<boolean>\n): HistoryModelState => ({\n  ...state,\n  isLoading: action.payload,\n});\n\nconst setUpdateHistory = (\n  state: HistoryModelState,\n  action: Action<{ user: string; action: ACTION_HISTORY }>\n): HistoryModelState => {\n  const newList = prepareHistory(\n    state.list,\n    action.payload.user,\n    action.payload.action\n  );\n\n  return {\n    ...state,\n    list: newList,\n    lastItem: newList[newList.length - 1],\n  };\n};\n\nconst reducerMap: { [key: string]: any } = {\n  [historyActions.SET_LOADING]: setLaoding,\n  [historyActions.SET_UPDATE_HISTORY]: setUpdateHistory,\n};\n\nexport const historyReducer = handleActions(reducerMap, initialState);\n","import { ACTION_HISTORY, HistoryItemModel } from \"./history.model\";\n\nexport const prepareHistory = (\n  list: HistoryItemModel[],\n  user: string,\n  action: ACTION_HISTORY\n): HistoryItemModel[] => {\n  const lastId = list.length;\n\n  return [\n    ...list,\n    { user, action, date: new Date(), id: !!lastId ? lastId + 1 : 1 },\n  ];\n};\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getHistory = (state: StoreModel) => state.history;\n","import { TreeviewPropsModel } from \"../../../model/Treeview.model\";\n\nexport enum EDIT_MODE {\n  EDIT = \"EDIT\",\n  ADD = \"ADD\",\n  ARCHIVE = \"ARCHIVE\",\n}\n\nexport interface MenuModel {\n  item: TreeviewPropsModel;\n}\n","import React, { FC, memo } from \"react\";\nimport moment from \"moment\";\n\nimport { HistoryItemModel } from \"../../../../store/history/history.model\";\nimport { DATE_FORMAT } from \"../../../../shared/constants\";\n\nimport \"./TableHistory.scss\";\n\nexport const TableHistory: FC<{ list: HistoryItemModel[] }> = memo(\n  ({ list }) => {\n    return (\n      <div className=\"tableHistory\">\n        <div className=\"tableHistory-row tableHistory-row__header\">\n          <div className=\"tableHistory-col\">Пользователь</div>\n          <div className=\"tableHistory-col\">Дата действия</div>\n          <div className=\"tableHistory-col\">Действие</div>\n        </div>\n        {list.map(({ user, date, action }, key) => (\n          <div className=\"tableHistory-row\" key={key}>\n            <div className=\"tableHistory-col\">{user}</div>\n            <div className=\"tableHistory-col\">\n              {moment(date).format(DATE_FORMAT.DB)}\n            </div>\n            <div className=\"tableHistory-col\">{action}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n);\n","import React, { FC } from \"react\";\n\nimport { HeadingpageModel } from \"./model/Headingpage.model\";\nimport { Button } from \"../Button\";\n\nimport \"./HeadingPage.scss\";\n\nexport const HeadingPage: FC<HeadingpageModel> = ({\n  title,\n  btAction,\n  btTitle,\n  btType,\n  isLoading,\n}) => {\n  return (\n    <div className=\"menu heading-page\">\n      <div className=\"heading-page-title\">{title}</div>\n      <Button\n        type={btType}\n        onClick={btAction}\n        loading={isLoading}\n        title={btTitle}\n      />\n    </div>\n  );\n};\n","import React, { FC, memo, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { getHistory } from \"../../store/history/history.selectors\";\nimport { TableHistory } from \"./components/TableHistory\";\nimport { Body } from \"../../shared/components/Body\";\nimport { Page } from \"../../routing/routing.enums\";\nimport { HeadingPage } from \"../../shared/components/HeadingPage\";\nimport { BUTTON_TYPE } from \"../../shared/components/Button/model/ButtonProps.model\";\n\nexport const History: FC = memo(() => {\n  const { list } = useSelector(getHistory);\n  const [isShowTable, setShowTable] = useState(false);\n  const buttonTitle = useMemo(\n    () => (isShowTable ? \"Свернуть историю\" : \"Показать историю\"),\n    [isShowTable]\n  );\n\n  const handleClick = () => {\n    setShowTable(!isShowTable);\n  };\n\n  return (\n    <Body>\n      <HeadingPage\n        title={Page.HISTORY}\n        btAction={handleClick}\n        btTitle={buttonTitle}\n        btType={BUTTON_TYPE.DEFAULT}\n      />\n      {isShowTable && <TableHistory list={list} />}\n    </Body>\n  );\n});\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getServices = (state: StoreModel) => state.servies;\n","import { TreeviewPropsModel } from \"../../pages/Services/components/Treeview/model/Treeview.model\";\n\n/**\n * Copy function\n * https://coderoad.ru/53444521/%D0%A3%D0%B4%D0%B0%D0%BB%D0%B8%D1%82%D1%8C-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82-%D0%B8%D0%BB%D0%B8-%D0%B2%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82-%D0%B8%D0%B7-%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D0%B0\n */\n\n/**\n * Update func\n */\n\nexport const prepareUpdateItem = (\n  array: TreeviewPropsModel[],\n  newItem: TreeviewPropsModel\n) => {\n  if (!newItem?.id) {\n    const result = [...array];\n\n    result.push({\n      ...newItem,\n      id: 25 + getRandomArbitrary(100, 10000),\n      childrenItems: [],\n      level: 1,\n    });\n\n    return result;\n  }\n\n  let result = [...array];\n  for (let level = 0; level < result.length; level++) {\n    let oldItem = result[level];\n\n    updateItemByID(result, oldItem, newItem, level);\n  }\n\n  return result;\n};\n\nexport const updateItemByID = (\n  array: TreeviewPropsModel[],\n  oldItem: TreeviewPropsModel,\n  newItem: TreeviewPropsModel,\n  level: number\n) => {\n  if (oldItem.id === newItem.id) {\n    array[level] = { ...newItem };\n    return;\n  } else {\n    if (oldItem.childrenItems) {\n      if (oldItem.childrenItems.length) {\n        for (let i = 0; i < oldItem.childrenItems.length; i++) {\n          let xItem = oldItem.childrenItems[i];\n          updateItemByID(oldItem.childrenItems, xItem, newItem, i);\n        }\n      }\n    }\n  }\n};\n\n/**\n *\n * Update func end\n */\n\n/**\n *\n * Add func\n */\n\nexport const prepareAddItem = (\n  array: TreeviewPropsModel[],\n  newItem: TreeviewPropsModel\n) => {\n  let result = [...array];\n  for (let level = 0; level < result.length; level++) {\n    let oldItem = result[level];\n\n    addItemByID(result, oldItem, newItem, level);\n  }\n\n  return result;\n};\n\nexport const addItemByID = (\n  array: TreeviewPropsModel[],\n  oldItem: TreeviewPropsModel,\n  newItem: TreeviewPropsModel,\n  level: number\n) => {\n  if (oldItem.id === newItem.id) {\n    const oldChildren = array[level]?.childrenItems;\n\n    if (oldChildren) {\n      array[level]?.childrenItems?.push({\n        ...newItem,\n        id: oldItem.id + getRandomArbitrary(100, 10000),\n        childrenItems: [],\n        level: oldItem.level + 1,\n      });\n    }\n\n    if (!oldChildren) {\n      array[level] = {\n        ...array[level],\n        childrenItems: [\n          {\n            ...newItem,\n            id: oldItem.id + getRandomArbitrary(100, 10000),\n            childrenItems: [],\n            level: oldItem.level + 1,\n          },\n        ],\n      };\n    }\n\n    return;\n  }\n  if (oldItem.id !== newItem.id) {\n    if (oldItem.childrenItems) {\n      if (oldItem.childrenItems.length) {\n        for (let i = 0; i < oldItem.childrenItems.length; i++) {\n          let xItem = oldItem.childrenItems[i];\n          addItemByID(oldItem.childrenItems, xItem, newItem, i);\n        }\n      }\n    }\n  }\n};\n\n/**\n *\n * Add end\n */\n\n/**\n * Random interval\n * @param min\n * @param max\n */\nexport const getRandomArbitrary = (min: number, max: number) => {\n  return Math.round(Math.random() * (max - min) + min);\n};\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\nimport { Dispatch } from \"redux\";\n\nimport { TreeviewPropsModel } from \"../../pages/Services/components/Treeview/model/Treeview.model\";\nimport { historyActions } from \"../history/history.actions\";\nimport { ACTION_HISTORY } from \"../history/history.model\";\nimport { timerCount } from \"../../shared/utils/service.util\";\n\nclass ServicesActions {\n  readonly prefix: string = \"PRODUCTS\";\n  readonly SET_LOADING: string = `${this.prefix}.SET_LOADING`;\n  readonly SET_UPDATE_SERVICE: string = `${this.prefix}.SET_UPDATE_SERVICE`;\n\n  setLoading: ActionFunction1<boolean, Action<boolean>> = createAction(\n    this.SET_LOADING\n  );\n\n  setUpdateService: ActionFunction1<\n    TreeviewPropsModel[],\n    Action<TreeviewPropsModel[]>\n  > = createAction(this.SET_UPDATE_SERVICE);\n\n  updateService = (\n    services: TreeviewPropsModel[],\n    user: string,\n    actionHistory: ACTION_HISTORY\n  ) => async (dispatch: Dispatch) => {\n    dispatch(this.setLoading(true));\n    try {\n      const timer = setTimeout(() => {\n        dispatch(this.setUpdateService(services));\n        dispatch(historyActions.updateHistory(user, actionHistory));\n        dispatch(this.setLoading(false));\n      }, timerCount);\n      return timer;\n    } catch (e) {\n      console.log(\"Ошибка в методе updateService: \", e);\n      dispatch(this.setLoading(false));\n    }\n  };\n}\n\nexport const servicesActions = new ServicesActions();\n","import { getRandomArbitrary } from \"../../store/services/services.utils\";\n\nexport const timerCount = 1000;\n\nexport const initialItem = {\n  name: \"\",\n  level: 1,\n  id: getRandomArbitrary(100, 10000),\n  isArchive: false,\n  childrenItems: [],\n};\n","import { Action, handleActions } from \"redux-actions\";\n\nimport { TreeviewMock } from \"../../mock/mocks\";\nimport { servicesActions } from \"./services.actions\";\nimport { ServicesModel } from \"./services.model\";\n\nexport const initialState: ServicesModel = {\n  services: TreeviewMock,\n  isLoading: false,\n  error: \"\",\n};\n\nconst setLaoding = (\n  state: ServicesModel,\n  action: Action<boolean>\n): ServicesModel => ({\n  ...state,\n  isLoading: action.payload,\n});\n\nconst setUpdateService = (\n  state: ServicesModel,\n  action: Action<any[]>\n): ServicesModel => ({\n  ...state,\n  services: action.payload,\n  isLoading: false,\n});\n\nconst reducerMap: { [key: string]: any } = {\n  [servicesActions.SET_LOADING]: setLaoding,\n  [servicesActions.SET_UPDATE_SERVICE]: setUpdateService,\n};\n\nexport const servicesReducer = handleActions(reducerMap, initialState);\n","import { TreeviewPropsModel } from \"../pages/Services/components/Treeview/model/Treeview.model\";\n\nexport const TreeviewMock: TreeviewPropsModel[] = [\n  {\n    id: 1,\n    name: \"Первая\",\n    level: 1,\n    isArchive: false,\n    childrenItems: [\n      {\n        id: 2,\n        name: \"Вторая\",\n        level: 2,\n        isArchive: false,\n        childrenItems: [\n          {\n            id: 3,\n            name: \"Третья\",\n            level: 3,\n            isArchive: false,\n          },\n          {\n            id: 4,\n            name: \"Четвертая\",\n            level: 3,\n            isArchive: false,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 5,\n    name: \"Пятая\",\n    level: 1,\n    isArchive: false,\n    childrenItems: [\n      {\n        id: 6,\n        name: \"Шестая\",\n        level: 2,\n        isArchive: false,\n      },\n    ],\n  },\n  {\n    id: 7,\n    name: \"Седьмая\",\n    level: 1,\n    isArchive: false,\n    childrenItems: [\n      {\n        id: 8,\n        name: \"Восьмая\",\n        level: 2,\n        isArchive: false,\n      },\n      {\n        id: 9,\n        name: \"Девятая\",\n        level: 2,\n        isArchive: false,\n        childrenItems: [\n          {\n            id: 10,\n            name: \"Десятая\",\n            level: 3,\n            isArchive: false,\n          },\n          {\n            id: 11,\n            name: \"Одиннадцатая\",\n            level: 3,\n            isArchive: false,\n            childrenItems: [\n              {\n                id: 12,\n                name: \"Двенадцатая\",\n                level: 4,\n                isArchive: false,\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  { id: 13, name: \"Тринадцатая\", level: 1, isArchive: false },\n];\n","import { Action, handleActions } from \"redux-actions\";\n\nimport {\n  AuthorizationModel,\n  AuthorizationStateModel,\n} from \"./authorization.model\";\nimport { authorizationActions } from \"./authorization.actions\";\n\nexport const initialState: AuthorizationStateModel = {\n  user: \"\",\n  isLoading: false,\n  date: {} as Date,\n  error: \"\",\n};\n\nconst setLaoding = (\n  state: AuthorizationStateModel,\n  action: Action<boolean>\n): AuthorizationStateModel => ({\n  ...state,\n  isLoading: action.payload,\n});\n\nconst setLogin = (\n  state: AuthorizationStateModel,\n  action: Action<AuthorizationModel>\n): AuthorizationStateModel => ({\n  ...state,\n  user: action.payload.name,\n  date: action.payload.date,\n});\n\nconst reducerMap: { [key: string]: any } = {\n  [authorizationActions.SET_LOADING]: setLaoding,\n  [authorizationActions.SET_LOGIN]: setLogin,\n};\n\nexport const authorizationReducer = handleActions(reducerMap, initialState);\n","import React, { FC, memo } from \"react\";\n\nimport { BUTTON_TYPE } from \"../Button/model/ButtonProps.model\";\nimport { ModalModel } from \"./model/Modal.model\";\nimport { Button } from \"../Button\";\n\nimport \"./Modal.scss\";\n\nexport const Modal: FC<ModalModel> = memo(\n  ({\n    modalClosed,\n    title,\n    cbCancel,\n    cancelTitle = \"Cancel\",\n    cbOk,\n    okTitle = \"Ok\",\n    children,\n    backDrop = false,\n  }) => {\n    const handlClick = () => {\n      backDrop && modalClosed();\n    };\n\n    const handleSubmit = () => {\n      cbOk();\n      cbCancel();\n    };\n\n    return (\n      <div className=\"modal-backdrop\" onClick={handlClick}>\n        <div\n          className=\"modal-window\"\n          onClick={(event) => event.stopPropagation()}\n        >\n          <div className=\"modal-window-title\">{title}</div>\n          <div className=\"modal-window-body\">{children}</div>\n          <div className=\"modal-window-footer\">\n            <Button\n              type={BUTTON_TYPE.SUCCESS}\n              onClick={handleSubmit}\n              title={okTitle}\n            />\n            <Button\n              type={BUTTON_TYPE.ERROR}\n              onClick={cbCancel}\n              title={cancelTitle}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n","import React, { FC, memo } from \"react\";\n\nimport { FieldCheckBoxModel } from \"./model/FieldCheckBox.model\";\n\nimport \"./CheckBox.scss\";\n\nexport const FieldCheckBox: FC<FieldCheckBoxModel> = memo(\n  ({ name, title, register, ...props }) => {\n    return (\n      <div className=\"fieldCheckBox\">\n        <label>{`${title}: `} </label>\n        <input type=\"checkbox\" name={name} ref={register({})} {...props} />\n      </div>\n    );\n  }\n);\n","import React, { FC, memo } from \"react\";\n\nimport { FieldCheckBox } from \"../../../../shared/components/Fields/CheckBox\";\nimport { FieldText } from \"../../../../shared/components/Fields/InputText\";\nimport { EditFormModel } from \"./model/EditForm.model\";\n\nimport \"./EditForm.scss\";\n\nexport const EditForm: FC<EditFormModel> = memo(({ register, errors }) => {\n  return (\n    <div className=\"edit-form\">\n      <FieldText\n        name=\"name\"\n        title=\"Название\"\n        register={register}\n        errors={errors}\n      />\n      <FieldCheckBox name=\"isArchive\" title=\"В архив\" register={register} />\n    </div>\n  );\n});\n","import React, { FC, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\n\nimport {\n  prepareAddItem,\n  prepareUpdateItem,\n} from \"../../../../store/services/services.utils\";\nimport { getServices, servicesActions } from \"../../../../store/services\";\nimport { EDIT_MODE } from \"../Treeview/components/Menu/model/Menu.model\";\nimport { TreeviewPropsModel } from \"../Treeview/model/Treeview.model\";\nimport { getAuthorization } from \"../../../../store/authorization\";\nimport { Modal } from \"../../../../shared/components/Modal\";\nimport { EditForm } from \"../EditForm\";\nimport { ServicesModalModel } from \"./modal/ServicesModal.model\";\n\nexport const ServicesModal: FC<ServicesModalModel> = ({\n  title,\n  mode,\n  initialValues,\n  close,\n}) => {\n  const { services } = useSelector(getServices);\n  const { user } = useSelector(getAuthorization);\n\n  const dispatch = useDispatch();\n\n  const { handleSubmit, register, errors } = useForm({\n    defaultValues: {\n      ...initialValues,\n    },\n  });\n\n  const onSubmit = (values: any) => {\n    const prepareItem: TreeviewPropsModel = {\n      ...initialValues,\n      ...values,\n    };\n\n    let prepareList = [];\n\n    switch (mode) {\n      case EDIT_MODE.ADD:\n        prepareList = prepareAddItem(services, prepareItem);\n        dispatch(servicesActions.updateService(prepareList, user, title));\n        return;\n\n      case EDIT_MODE.EDIT:\n        prepareList = prepareUpdateItem(services, prepareItem);\n        dispatch(servicesActions.updateService(prepareList, user, title));\n        return;\n\n      case EDIT_MODE.ARCHIVE:\n        prepareList = prepareUpdateItem(services, {\n          ...prepareItem,\n          isArchive: !prepareItem.isArchive,\n        });\n        dispatch(servicesActions.updateService(prepareList, user, title));\n        return;\n    }\n  };\n\n  const modalContent = useMemo(\n    () =>\n      mode === EDIT_MODE.ARCHIVE ? (\n        `Услуга: \"${initialValues?.name}\"`\n      ) : (\n        <EditForm register={register} errors={errors} />\n      ),\n\n    [mode, initialValues, register, errors]\n  );\n\n  return (\n    <Modal\n      title={title}\n      cbCancel={close}\n      cancelTitle={\"Отмена\"}\n      cbOk={handleSubmit(onSubmit)}\n      okTitle={\"Сохранить\"}\n      modalClosed={close}\n    >\n      {modalContent}\n    </Modal>\n  );\n};\n","import { TreeviewPropsModel } from \"../model/Treeview.model\";\n\nexport const itemStyled = (\n  item: TreeviewPropsModel,\n  count: number,\n  x: number = 0\n) => {\n  const { level } = item;\n\n  let padding = {};\n  let opacity = {};\n\n  if (level !== 1) {\n    padding = {\n      paddingLeft: `${level * count + x}px`,\n    };\n  }\n\n  return {\n    ...padding,\n    ...opacity,\n  };\n};\n","import React, { FC, memo, useMemo, useState } from \"react\";\n\nimport { ACTION_HISTORY } from \"../../../../../../store/history/history.model\";\nimport { EDIT_MODE, MenuModel } from \"./model/Menu.model\";\nimport { ServicesModal } from \"../../../ServicesModal\";\n\nimport \"./Menu.scss\";\nimport { Button } from \"../../../../../../shared/components/Button\";\nimport { BUTTON_TYPE } from \"../../../../../../shared/components/Button/model/ButtonProps.model\";\n\nexport const Menu: FC<MenuModel> = memo(({ item }) => {\n  const { isArchive } = item;\n\n  const [isModalShow, setIsModalShow] = useState<boolean>(false);\n  const [isModalMode, setModalMode] = useState<EDIT_MODE>(EDIT_MODE.EDIT);\n  const [isModalTitleMode, setModalTitleMode] = useState<ACTION_HISTORY>(\n    ACTION_HISTORY.EDIT\n  );\n\n  const archiveButtonTitle = useMemo(\n    () => (isArchive ? \"Восстановить\" : \"Архивировать\"),\n    [isArchive]\n  );\n\n  const handleOpenModal = (editMode: EDIT_MODE, titleMode: ACTION_HISTORY) => {\n    setModalMode(editMode);\n    setModalTitleMode(titleMode);\n    setIsModalShow(true);\n  };\n\n  return (\n    <>\n      <div className=\"menu\">\n        <Button\n          type={BUTTON_TYPE.DEFAULT}\n          onClick={() => handleOpenModal(EDIT_MODE.EDIT, ACTION_HISTORY.EDIT)}\n          title=\"Редактировать\"\n          visible={isArchive}\n        />\n        <Button\n          type={BUTTON_TYPE.SUCCESS}\n          onClick={() => handleOpenModal(EDIT_MODE.ADD, ACTION_HISTORY.ADD)}\n          title=\"Добавить\"\n          visible={isArchive}\n        />\n        <Button\n          type={BUTTON_TYPE.ERROR}\n          onClick={() =>\n            handleOpenModal(EDIT_MODE.ARCHIVE, ACTION_HISTORY.ARCHIVE)\n          }\n          title={archiveButtonTitle}\n        />\n      </div>\n      {isModalShow && (\n        <ServicesModal\n          title={isModalTitleMode}\n          initialValues={item}\n          close={() => setIsModalShow(false)}\n          mode={isModalMode}\n        />\n      )}\n    </>\n  );\n});\n","import React, { FC, memo, useMemo } from \"react\";\nimport cn from \"classnames\";\n\nimport { itemStyled } from \"../../utils/itemStyled.util\";\nimport { ChildrenModel } from \"./model/Children.model\";\nimport { Menu } from \"../Menu\";\n\nexport const ChildrenItem: FC<ChildrenModel> = memo(({ item }) => {\n  const styled = useMemo(() => itemStyled(item, 15, 20), [item]);\n\n  return (\n    <div\n      className={cn([\"childrenItem item\", { item__archive: item.isArchive }])}\n      style={styled}\n    >\n      <div className=\"item-title\">{item.name}</div>\n      <Menu item={item} />\n    </div>\n  );\n});\n","import React, { FC, memo, useMemo } from \"react\";\nimport cn from \"classnames\";\n\nimport { itemStyled } from \"../../utils/itemStyled.util\";\nimport { ParentModel } from \"./model/Parent.model\";\nimport { Menu } from \"../Menu\";\n\nexport const ParentItem: FC<ParentModel> = memo(\n  ({ item, isOpen, handleOpen }) => {\n    const styled = useMemo(() => itemStyled(item, 15), [item]);\n\n    return (\n      <div\n        className={cn([\n          \"parentItem item\",\n          { item__open: isOpen, item__archive: item.isArchive },\n        ])}\n        style={styled}\n      >\n        <div className=\"item-title\" onClick={handleOpen}>\n          <div className=\"item-icon\" />\n          {item.name}\n        </div>\n        <Menu item={item} />\n      </div>\n    );\n  }\n);\n","import React, { FC, memo, useCallback, useEffect, useState } from \"react\";\n\nimport { TreeBranchModel } from \"./model/TreeBranch.model\";\nimport { ChildrenItem } from \"../Children\";\nimport { ParentItem } from \"../Parent\";\n\nexport const TreeBranch: FC<TreeBranchModel> = memo(\n  ({ item, isLast, children }) => {\n    const [isOpen, setOpen] = useState(false);\n\n    const handleOpen = useCallback(() => {\n      setOpen(!isOpen);\n    }, [isOpen]);\n\n    useEffect(() => {\n      if (item.isArchive) {\n        setOpen(false);\n      }\n    }, [item]);\n\n    return (\n      <>\n        {!isLast && (\n          <ParentItem item={item} isOpen={isOpen} handleOpen={handleOpen} />\n        )}\n        {isLast && <ChildrenItem item={item} />}\n        {isOpen && children}\n      </>\n    );\n  }\n);\n","import React, { FC } from \"react\";\n\nimport { TreeviewPropsModel } from \"./model/Treeview.model\";\nimport { ChildrenItem } from \"./components/Children\";\nimport { TreeBranch } from \"./components/TreeBranch\";\n\nimport \"./Treeview.scss\";\n\nexport const Treeview: FC<{ items: TreeviewPropsModel[] }> = ({ items }) => {\n  return (\n    <div className=\"treeview\">\n      {items.map((item) => {\n        const isLast = !item?.childrenItems?.length;\n\n        return (\n          <TreeBranch item={item} isLast={isLast} key={item.id}>\n            {isLast && <ChildrenItem item={item} />}\n            {!isLast && item?.childrenItems && (\n              <Treeview items={item.childrenItems} />\n            )}\n          </TreeBranch>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { FC, memo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { EDIT_MODE } from \"./components/Treeview/components/Menu/model/Menu.model\";\nimport { getServices } from \"../../store/services/services.selectors\";\nimport { ACTION_HISTORY } from \"../../store/history/history.model\";\nimport { HeadingPage } from \"../../shared/components/HeadingPage\";\nimport { ServicesModal } from \"./components/ServicesModal\";\nimport { Body } from \"../../shared/components/Body\";\nimport { Page } from \"../../routing/routing.enums\";\nimport { Treeview } from \"./components/Treeview\";\nimport { BUTTON_TYPE } from \"../../shared/components/Button/model/ButtonProps.model\";\n\nexport const Services: FC = memo(() => {\n  const { services, isLoading } = useSelector(getServices);\n\n  const [isModalShow, setModalShow] = useState(false);\n\n  return (\n    <>\n      <Body isLoading={isLoading}>\n        <HeadingPage\n          title={Page.SERVICES}\n          btAction={() => setModalShow(true)}\n          btTitle=\"Добавить услугу\"\n          btType={BUTTON_TYPE.SUCCESS}\n        />\n        <Treeview items={services} />\n      </Body>\n\n      {isModalShow && (\n        <ServicesModal\n          close={() => setModalShow(false)}\n          mode={EDIT_MODE.ADD}\n          title={ACTION_HISTORY.ADD}\n        />\n      )}\n    </>\n  );\n});\n","import React, { ComponentType } from \"react\";\n\nimport { RouteUrls } from \"./routing.enums\";\nimport { History } from \"../pages/History\";\nimport { Services } from \"../pages/Services\";\n\nexport interface RouteModel {\n  component: ComponentType<any>;\n  path: string;\n  exact?: boolean;\n}\n\nexport const Routes: RouteModel[] = [\n  {\n    component: () => <History />,\n    path: `${RouteUrls.HISTORY}`,\n    exact: false,\n  },\n  {\n    component: () => <Services />,\n    path: `${RouteUrls.SERVICES}`,\n    exact: false,\n  },\n];\n","import React, { FC, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { ACTION_LOGIN } from \"../../store/authorization/authorization.model\";\nimport { Body } from \"../../shared/components/Body\";\nimport {\n  authorizationActions,\n  getAuthorization,\n} from \"../../store/authorization\";\nimport { HeadingPage } from \"../../shared/components/HeadingPage\";\nimport { BUTTON_TYPE } from \"../../shared/components/Button/model/ButtonProps.model\";\n\nexport const Home: FC = () => {\n  const { user, isLoading } = useSelector(getAuthorization);\n  const dispatch = useDispatch();\n\n  const handleLogOut = useCallback(() => {\n    dispatch(authorizationActions.updateLogin(user, ACTION_LOGIN.LOGIN_OUT));\n  }, [dispatch, user]);\n\n  return (\n    <Body>\n      <HeadingPage\n        title=\"Главная\"\n        btAction={handleLogOut}\n        btTitle=\"Выход\"\n        btType={BUTTON_TYPE.ERROR}\n        isLoading={isLoading}\n      />\n      <ul>\n        <li>Редактирование списка услуг</li>\n        <li>Просмотр истории действий пользователей</li>\n      </ul>\n    </Body>\n  );\n};\n","import React, { memo, useMemo } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport { getAuthorization } from \"../store/authorization/authorization.selectors\";\nimport { Notification } from \"../shared/components/Notification\";\nimport { Authorization } from \"../pages/Authorization\";\nimport { NotFound } from \"../pages/NotFound/NotFound\";\nimport { Header } from \"../shared/components/Header\";\nimport { getHistory } from \"../store/history\";\nimport { Routes } from \"./routing.const\";\nimport { Home } from \"../pages/Home\";\n\nexport const Routing = memo(() => {\n  const { user } = useSelector(getAuthorization);\n  const { lastItem } = useSelector(getHistory);\n\n  const contentRoute = useMemo(() => {\n    if (!!user) {\n      return (\n        <>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            {Routes.map((route, key) => {\n              const { path, component, exact } = route;\n              return (\n                <Route\n                  exact={exact}\n                  path={path}\n                  component={component}\n                  key={key}\n                />\n              );\n            })}\n            <NotFound />\n          </Switch>\n          <Notification action={lastItem} title=\"история\" />\n        </>\n      );\n    }\n\n    return (\n      <Switch>\n        <Route component={Authorization} />\n      </Switch>\n    );\n  }, [user, lastItem]);\n\n  return <>{contentRoute}</>;\n});\n","import { combineReducers } from \"redux\";\n\nimport { servicesReducer as servies } from \"../services\";\nimport { historyReducer as history } from \"../history\";\nimport { authorizationReducer as authorization } from \"../authorization\";\nimport { routeReducer as route } from \"../route\";\n\nexport const reducers = combineReducers({\n  servies,\n  history,\n  authorization,\n  route,\n});\n","import { Action, Dispatch, Middleware, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\n// Thunk function\nexport const actionFn: Middleware = ({ dispatch, getState }) => (\n  next: Dispatch\n) => (action: Function | Action) => {\n  return action instanceof Function ? action(dispatch, getState) : next(action);\n};\n\nexport const middlewares = composeWithDevTools(applyMiddleware(actionFn));\n","import { createStore } from \"redux\";\n\nimport { reducers } from \"./reducers\";\nimport { middlewares } from \"./middlewares\";\n\nexport const store = createStore(reducers, middlewares);\n","import React, { FC } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport { Routing } from \"./app/routing/routing\";\nimport { urls } from \"./app/shared/constants\";\nimport { store } from \"./app/store\";\n\nimport \"./App.scss\";\n\nexport const App: FC = () => {\n  return (\n    <Provider store={store}>\n      <Router basename={urls.baseUrl}>\n        <Routing />\n      </Router>\n    </Provider>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"page\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["serviceWorker.ts","app/routing/routing.enums.ts","app/shared/components/Button/model/ButtonProps.model.ts","app/store/authorization/authorization.selectors.ts","app/store/notifications/notifications.actions.ts","app/store/notifications/notifications.reducer.ts","app/store/notifications/notifications.selector.ts","app/shared/components/UserBlock/UserBlock.const.ts","app/shared/components/Button/Button.tsx","app/shared/components/Modal/Modal.tsx","app/routing/components/RoutingModal/RoutingModal.tsx","app/shared/components/Body/Body.tsx","app/pages/NotFound/NotFound.tsx","app/store/route/route.selector.ts","app/store/history/history.model.ts","app/store/route/route.actions.ts","app/store/route/route.reducer.ts","app/store/authorization/authorization.model.ts","app/store/history/history.actions.ts","app/store/history/history.reducer.ts","app/store/history/history.utils.ts","app/store/history/history.selectors.ts","app/shared/components/Notification/Notification.tsx","app/shared/components/BreadСrumbs/BreadСrumbs.tsx","app/store/authorization/authorization.utils.ts","app/shared/constants/date.const.ts","app/http/api.const.ts","app/http/apit.ts","app/http/api.utils.ts","app/store/authorization/authorization.actions.ts","app/store/authorization/authorization.reducer.ts","app/mock/mocks.ts","app/shared/components/UserBlock/UserBlock.tsx","app/shared/components/UserBlock/UserBlock.utils.ts","app/shared/components/Header/Header.tsx","app/shared/components/Fields/InputText/InputText.tsx","app/shared/components/Fields/FieldBlock/FieldBlock.tsx","app/pages/Authorization/Authorization.tsx","app/store/pagecontrol/pagecontrol.actions.ts","app/store/pagecontrol/pagecontrol.utils.ts","app/store/pagecontrol/pagecontrol.reducer.ts","app/store/pagecontrol/pagecontrol.selector.ts","app/shared/components/HeadingPage/HeadingPage.tsx","app/shared/components/BodyPage/BodyPage.tsx","app/shared/components/Fields/CheckBox/CheckBox.tsx","app/store/contacts/contacts.utils.ts","app/store/contacts/contacts.actions.ts","app/shared/utils/service.util.ts","app/store/contacts/contacts.reducer.ts","app/store/contacts/contacts.selector.ts","app/shared/constants/input.pattern.ts","app/pages/Contacts/components/ContactsModal/ContactsModal.tsx","app/pages/Contacts/components/MenuSetting/MenuSetting.tsx","app/pages/Contacts/components/TableContacts/TableContacts.tsx","app/pages/Contacts/Contacts.tsx","app/pages/History/components/TableHistory/TableHistory.tsx","app/pages/History/History.tsx","app/routing/routing.const.tsx","app/pages/Home/Home.utils.ts","app/pages/Home/components/EditFormHome/EditFormHome.tsx","app/pages/Home/components/TableHome/TableHome.utils.ts","app/pages/Home/components/TableHome/TableHome.tsx","app/pages/Home/Home.tsx","app/routing/routing.tsx","app/store/reducers/index.ts","app/store/middlewares/index.ts","app/store/index.ts","App.tsx","index.tsx","assets/user-icons/phone-icon.svg","assets/user-icons/mail-icon.svg","assets/header-menu/vertical_line.svg","assets/notification-icons/notification-icon.svg","assets/user-icons/user-avatar.svg","assets/user-icons/user-card.svg"],"names":["Boolean","window","location","hostname","match","RouteUrls","Page","urls","BUTTON_SIZE","BUTTON_TYPE","getAuthorization","state","authorization","notificationsActions","prefix","SET_CONTENT","this","SET_SHOW","setContent","createAction","setShow","updateContent","message","dispatch","a","e","console","log","reducerMap","action","content","payload","isShow","notificationsReducer","handleActions","error","getNotifications","notifications","SIZE_VERSION","Button","memo","onClick","title","type","className","disable","visible","loading","style","size","styledSize","useMemo","NORMAL","width","cn","button__success","SUCCESS","button__default","DEFAULT","button__normal","button__error","ERROR","button__disabled","button__visible","button__loading","Modal","modalClosed","cbCancel","cancelTitle","cbOk","okTitle","children","backDrop","event","stopPropagation","RoutingModal","useSelector","useDispatch","handleClosed","useCallback","Body","isLoading","NotFound","getRoute","route","ACTION_HISTORY","routeActions","SET_CURRENT_ROUTE","setCurrentRoute","initialState","HOME","routeReducer","ACTION_LOGIN","historyActions","SET_LOADING","SET_UPDATE_HISTORY","setLoading","setUpdateHistory","updateHistory","getState","user","name","firstName","newList","list","lastId","length","secondName","email","phone","date","Date","id","prepareHistory","lastItem","historyReducer","getHistory","history","Notification","useState","isShowToolTip","setShowToolTip","classesToolTip","classesOvalshape","EDIT_CONTACT","LOGIN","LOGIN_OUT","ADD_CONTACT","UPDATE_USER_INFO","ARCHIVE_CONTACT","src","notification_icon","alt","BreadСrumbs","currentRoute","CONTACTS","HISTORY","DATE_FORMAT","prepareAction","prepareUser","instance","axios","create","baseURL","Authorization","Promise","resolve","reject","min","max","config","request","then","response","catch","url","data","headers","Math","random","method","authorizationActions","SET_LOGIN","SET_UPDATE_USER","setLogin","setUpdateUser","updateLogin","login","updateUserInfo","timer","setTimeout","authorizationReducer","UserBlock","version","classBlock","cx","LOW","titleContent","slice","getAbbreviatedName","MEDIUM","getFullName","usericon","Header","useHistory","handleClick","useEffect","push","verticalline","button__active","FieldText","placeholder","register","errors","pattern","validate","props","classInput","fieldText__disable","classErrors","fieldText__visible","ref","required","FieldBlock","icon","useForm","handleSubmit","onSubmit","values","margin","pageControlActions","SET_CONTROL","setControl","updateControl","current","pagecontrolReducer","home","contacts","getPageControl","pagecontrol","HeadingPage","buttonContent","BodyPage","FieldCheckBox","ApiUpdateContacts","contact","lengthList","resultList","map","item","contactsActions","SET_UPDATE_CONTACTS","SET_REMOVE_CONTACT","setRemoveContact","setUpdateContacts","updateContacts","removeContact","isArchive","contactsReducer","getContacts","PATTERNS","EMAIL","ContactsModal","initialValues","defaultValues","prepareItem","value","MenuSetting","isShowModal","setShowModal","archiveButtonTitle","TableContacts","archiveMode","classNameCol","key","Contacts","isShowTable","setShowTable","isArchiveMode","setArchiveMode","titleHeadingPage","TableHistory","moment","format","DB","History","buttonTitle","Routes","component","path","exact","prepareGet","obj","EditFormHome","closedForm","disaptch","usercardicon","mailicon","phoneicon","res","split","prepareSet","infoContent","string","TableHome","mail","Home","isEditMode","setEditMode","handleLogOut","Routing","isLogin","reducers","combineReducers","middlewares","composeWithDevTools","applyMiddleware","next","Function","store","createStore","App","basename","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.ace77bb9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum RouteUrls {\n  HOME = \"/\",\n  HISTORY = \"/history\",\n  CONTACTS = \"/contacts\",\n  LOGIN = \"/login\",\n}\n\nexport const urls = {\n  baseUrl: \"/\",\n};\n\nexport enum Page {\n  HOME = \"Главная\",\n  HISTORY = \"История\",\n  CONTACTS = \"Контакты\",\n}\n","export interface ButtonPropsModel {\n  type: BUTTON_TYPE;\n  onClick: () => void;\n  disable?: boolean;\n  visible?: boolean;\n  title: string;\n  loading?: boolean;\n  className?: string;\n  style?: any;\n  size?: BUTTON_SIZE;\n}\n\nexport enum BUTTON_SIZE {\n  LITTLE = \"LITTLE\",\n  NORMAL = \"NORMAL\",\n  BIG = \"BIG\",\n}\n\nexport enum BUTTON_TYPE {\n  DEFAULT = \"DEFAULT\",\n  SUCCESS = \"SUCCESS\",\n  ERROR = \"ERROR\",\n  NORMAL = \"NORMAL\",\n}\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getAuthorization = (state: StoreModel) => state.authorization;\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\nimport { Dispatch } from \"redux\";\n\nclass NotificationsActions {\n  readonly prefix: string = \"NOTIFICATION\";\n  readonly SET_CONTENT: string = `${this.prefix}.SET_CONTENT`;\n  readonly SET_SHOW: string = `${this.prefix}.SET_SHOW`;\n\n  setContent: ActionFunction1<any, Action<any>> = createAction(\n    this.SET_CONTENT\n  );\n  setShow: ActionFunction1<boolean, Action<boolean>> = createAction(\n    this.SET_SHOW\n  );\n\n  updateContent: any = (message: string) => async (dispatch: Dispatch) => {\n    try {\n      dispatch(this.setContent(message));\n      dispatch(this.setShow(true));\n    } catch (e) {\n      console.log(\"Ошибка в методе updateContent: \", e);\n    }\n  };\n}\n\nexport const notificationsActions = new NotificationsActions();\n","import { Action, handleActions } from \"redux-actions\";\nimport { notificationsActions } from \"./notifications.actions\";\nimport { NotificationsModel } from \"./notifications.model\";\n\nexport const initialState: NotificationsModel = {\n  content: \"\",\n  isShow: false,\n  error: \"\",\n};\n\nconst setShow = (\n  state: NotificationsModel,\n  action: Action<boolean>\n): NotificationsModel => ({\n  ...state,\n  isShow: action.payload,\n});\n\nconst setContent = (\n  state: NotificationsModel,\n  action: Action<string>\n): NotificationsModel => ({\n  ...state,\n  content: action.payload,\n});\n\nconst reducerMap: { [key: string]: any } = {\n  [notificationsActions.SET_CONTENT]: setContent,\n  [notificationsActions.SET_SHOW]: setShow,\n};\n\nexport const notificationsReducer = handleActions(reducerMap, initialState);\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getNotifications = (state: StoreModel) => state.notifications;\n","export enum SIZE_VERSION {\n  MEDIUM = \"MEDIUM\",\n  LOW = \"LOW\",\n}\n","import React, { FC, memo, useMemo } from \"react\";\nimport cn from \"classnames\";\n\nimport {\n  BUTTON_SIZE,\n  BUTTON_TYPE,\n  ButtonPropsModel,\n} from \"./model/ButtonProps.model\";\n\nimport \"./Button.scss\";\n\nexport const Button: FC<ButtonPropsModel> = memo(\n  ({\n    onClick,\n    title,\n    type,\n    className,\n    disable,\n    visible,\n    loading,\n    style,\n    size,\n  }) => {\n    const styledSize = useMemo(() => {\n      switch (size) {\n        case BUTTON_SIZE.NORMAL:\n          return { width: \"212px\" };\n        default:\n          return {};\n      }\n    }, [size]);\n\n    return (\n      <>\n        <div\n          className={cn([\n            \"button\",\n            className,\n            { button__success: type === BUTTON_TYPE.SUCCESS },\n            { button__default: type === BUTTON_TYPE.DEFAULT },\n            { button__normal: type === BUTTON_TYPE.NORMAL },\n            { button__error: type === BUTTON_TYPE.ERROR },\n            { button__disabled: disable },\n            { button__visible: visible },\n            { button__loading: loading },\n          ])}\n          onClick={onClick}\n          style={{ ...style, ...styledSize }}\n        >\n          {title}\n          {loading && <div className=\"spinner\" />}\n        </div>\n      </>\n    );\n  }\n);\n","import React, { FC, memo } from \"react\";\n\nimport { BUTTON_TYPE } from \"../Button/model/ButtonProps.model\";\nimport { ModalModel } from \"./model/Modal.model\";\nimport { Button } from \"../Button\";\n\nimport \"./Modal.scss\";\n\nexport const Modal: FC<ModalModel> = memo(\n  ({\n    modalClosed,\n    title,\n    cbCancel,\n    cancelTitle = \"Cancel\",\n    cbOk,\n    okTitle = \"Ok\",\n    children,\n    backDrop = false,\n  }) => {\n    const handlClick = () => {\n      backDrop && modalClosed && modalClosed();\n    };\n\n    const handleSubmit = () => {\n      cbOk && cbOk();\n    };\n\n    const handleCancel = () => {\n      cbCancel && cbCancel();\n    };\n\n    return (\n      <div className=\"modal-backdrop\" onClick={handlClick}>\n        <div\n          className=\"modal-window\"\n          onClick={(event) => event.stopPropagation()}\n        >\n          <div className=\"modal-window-title\">{title}</div>\n          <div className=\"modal-window-body\">{children}</div>\n          <div className=\"modal-window-footer\">\n            {!!cbOk && !!okTitle && (\n              <Button\n                type={BUTTON_TYPE.SUCCESS}\n                onClick={handleSubmit}\n                title={okTitle}\n              />\n            )}\n            {!!cbCancel && !!cancelTitle && (\n              <Button\n                type={BUTTON_TYPE.ERROR}\n                onClick={handleCancel}\n                title={cancelTitle}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n","import React, { FC, memo, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  getNotifications,\n  notificationsActions,\n} from \"../../../store/notifications\";\nimport { Modal } from \"../../../shared/components/Modal\";\n\nimport \"./RoutingModal.scss\";\n\nexport const RoutingModal: FC = memo(() => {\n  const { content, isShow } = useSelector(getNotifications);\n  const dispatch = useDispatch();\n\n  const handleClosed = useCallback(() => {\n    dispatch(notificationsActions.setShow(false));\n  }, [dispatch]);\n\n  return (\n    <>\n      {isShow && (\n        <Modal\n          modalClosed={handleClosed}\n          title={\"\"}\n          cbOk={handleClosed}\n          okTitle=\"Хорошо\"\n        >\n          {content}\n        </Modal>\n      )}\n    </>\n  );\n});\n","import React, { FC, memo } from \"react\";\nimport cn from \"classnames\";\n\nimport { BodyModel } from \"./model/Body.model\";\n\nimport \"./Body.scss\";\n\nexport const Body: FC<BodyModel> = memo(({ isLoading, children }) => {\n  return (\n    <div className=\"page-body\">\n      <div className={cn({ \"page-body-loader\": isLoading })}>{children}</div>\n    </div>\n  );\n});\n","import React, { FC, memo } from \"react\";\n\nimport { Body } from \"../../shared/components/Body\";\n\nexport const NotFound: FC = memo(() => {\n  return <Body>404 Not found</Body>;\n});\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getRoute = (state: StoreModel) => state.route;\n","export enum ACTION_HISTORY {\n  EDIT_CONTACT = \"Редактирование контакта\",\n  ADD_CONTACT = \"Добавление контакта\",\n  ARCHIVE_CONTACT = \"Архивирование контакта\",\n\n  LOGIN = \"Вход в сервис\",\n  LOGIN_OUT = \"Выход из сервиса\",\n\n  UPDATE_USER_INFO = \"Редактирование информации о пользователя\",\n}\n\nexport interface HistoryModelState {\n  list: HistoryItemModel[];\n  lastItem: HistoryItemModel;\n  isLoading: boolean;\n  error: string;\n}\n\nexport interface UserInfoModel {\n  name: {\n    firstName: string;\n    secondName: string;\n  };\n  email: string;\n  phone: string;\n}\n\nexport interface HistoryItemModel {\n  user: UserInfoModel;\n  date: Date;\n  action: ACTION_HISTORY;\n  id: number;\n}\n\nexport interface ActionUpdateHistory {\n  user: string;\n  action: ACTION_HISTORY;\n}\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\n\nclass Route {\n  readonly prefix: string = \"ROUTE\";\n  readonly SET_CURRENT_ROUTE: string = \"SET_CURRENT_ROUTE\";\n\n  setCurrentRoute: ActionFunction1<string, Action<string>> = createAction(\n    this.SET_CURRENT_ROUTE\n  );\n}\n\nexport const routeActions = new Route();\n","import { Action, handleActions } from \"redux-actions\";\nimport { RouteUrls } from \"../../routing/routing.enums\";\nimport { RouteStateModel } from \"./route.model\";\nimport { routeActions } from \"./route.actions\";\n\nconst initialState: RouteStateModel = {\n  route: RouteUrls.HOME,\n};\n\nconst setCurrentRoute = (\n  state: RouteStateModel,\n  action: Action<RouteUrls>\n): RouteStateModel => ({\n  ...state,\n  route: action.payload,\n});\n\nconst reducerMap: { [key: string]: any } = {\n  [routeActions.SET_CURRENT_ROUTE]: setCurrentRoute,\n};\n\nexport const routeReducer = handleActions(reducerMap, initialState);\n","import { UserInfoModel } from \"../history/history.model\";\n\nexport interface AuthorizationModel {\n  name: string;\n  date: Date;\n  action: ACTION_LOGIN;\n}\n\nexport interface AuthorizationStateModel {\n  user: UserInfoModel;\n  date: Date;\n  isLoading: boolean;\n  error: \"\";\n}\n\nexport enum ACTION_LOGIN {\n  LOGIN = \"LOGIN\",\n  LOGIN_OUT = \"LOGIN_OUT\",\n}\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\nimport { Dispatch } from \"redux\";\nimport { ACTION_HISTORY, ActionUpdateHistory } from \"./history.model\";\nimport { StoreModel } from \"../model/store.model\";\n\nclass HistoryActions {\n  readonly prefix: string = \"HISTORY\";\n  readonly SET_LOADING: string = `${this.prefix}.SET_LOADING`;\n  readonly SET_UPDATE_HISTORY: string = `${this.prefix}.SET_UPDATE_HISTORY`;\n\n  setLoading: ActionFunction1<boolean, Action<boolean>> = createAction(\n    this.SET_LOADING\n  );\n  setUpdateHistory: ActionFunction1<\n    ActionUpdateHistory,\n    Action<ActionUpdateHistory>\n  > = createAction(this.SET_UPDATE_HISTORY);\n\n  updateHistory: any = (action: ACTION_HISTORY) => async (\n    dispatch: Dispatch,\n    getState: () => StoreModel\n  ) => {\n    const { user } = getState().authorization;\n    dispatch(this.setLoading(true));\n    try {\n      dispatch(this.setUpdateHistory({ user: user.name.firstName, action }));\n      dispatch(this.setLoading(false));\n    } catch (e) {\n      console.log(\"Ошибка в методе updateHistory: \", e);\n      dispatch(this.setLoading(false));\n    }\n  };\n}\n\nexport const historyActions = new HistoryActions();\n","import { Action, handleActions } from \"redux-actions\";\n\nimport { ACTION_HISTORY, HistoryModelState } from \"./history.model\";\nimport { historyActions } from \"./history.actions\";\nimport { prepareHistory } from \"./history.utils\";\n\nexport const initialState: HistoryModelState = {\n  list: [],\n  lastItem: {} as any,\n  isLoading: false,\n  error: \"\",\n};\n\nconst setLaoding = (\n  state: HistoryModelState,\n  action: Action<boolean>\n): HistoryModelState => ({\n  ...state,\n  isLoading: action.payload,\n});\n\nconst setUpdateHistory = (\n  state: HistoryModelState,\n  action: Action<{ user: string; action: ACTION_HISTORY }>\n): HistoryModelState => {\n  const newList = prepareHistory(\n    state.list,\n    action.payload.user,\n    action.payload.action\n  );\n\n  return {\n    ...state,\n    list: newList,\n    lastItem: newList[newList.length - 1],\n  };\n};\n\nconst reducerMap: { [key: string]: any } = {\n  [historyActions.SET_LOADING]: setLaoding,\n  [historyActions.SET_UPDATE_HISTORY]: setUpdateHistory,\n};\n\nexport const historyReducer = handleActions(reducerMap, initialState);\n","import { ACTION_HISTORY, HistoryItemModel } from \"./history.model\";\n\nexport const prepareHistory = (\n  list: HistoryItemModel[],\n  user: string,\n  action: ACTION_HISTORY\n): HistoryItemModel[] => {\n  const lastId = list.length;\n\n  return [\n    ...list,\n    {\n      user: {\n        name: {\n          firstName: user,\n          secondName: \"\",\n        },\n        email: \"\",\n        phone: \"\",\n      },\n      action,\n      date: new Date(),\n      id: !!lastId ? lastId + 1 : 1,\n    },\n  ];\n};\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getHistory = (state: StoreModel) => state.history;\n","import React, { FC, memo, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport cn from \"classnames\";\n\nimport notification_icon from \"../../../../assets/notification-icons/notification-icon.svg\";\nimport { ACTION_HISTORY } from \"../../../store/history/history.model\";\nimport { NotificationModel } from \"./model/Notification.model\";\nimport { getHistory } from \"../../../store/history\";\n\nimport \"./Notification.scss\";\n\nexport const Notification: FC<NotificationModel> = memo(() => {\n  const { lastItem } = useSelector(getHistory);\n  const { action } = lastItem;\n\n  const [isShowToolTip, setShowToolTip] = useState(false);\n\n  const handleClick = () => {\n    setShowToolTip(!isShowToolTip);\n  };\n\n  const classesToolTip = useMemo(\n    () =>\n      cn(\"notification-tooltip\", {\n        \"notification-tooltip__hidden\": !isShowToolTip,\n      }),\n    [isShowToolTip]\n  );\n\n  const classesOvalshape = useMemo(\n    () =>\n      cn([\n        \"notification-ovalshape\",\n        {\n          \"notification-ovalshape__success\":\n            action === ACTION_HISTORY.EDIT_CONTACT ||\n            action === ACTION_HISTORY.LOGIN ||\n            action === ACTION_HISTORY.LOGIN_OUT ||\n            action === ACTION_HISTORY.ADD_CONTACT ||\n            action === ACTION_HISTORY.UPDATE_USER_INFO,\n        },\n        {\n          \"notification-ovalshape__warning\":\n            action === ACTION_HISTORY.ARCHIVE_CONTACT\n        },\n      ]),\n    [action]\n  );\n\n  return (\n    <div className=\"notification\" onClick={handleClick}>\n      <img src={notification_icon} alt=\"изображение колокольчика\" />\n      <div className={classesOvalshape} />\n      <div className={classesToolTip}>история: {action}</div>\n    </div>\n  );\n});\n","import React, { FC, memo, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { Page, RouteUrls } from \"../../../routing/routing.enums\";\nimport { getRoute } from \"../../../store/route/route.selector\";\n\nimport \"./BreadСrumbs.scss\";\n\nexport const BreadСrumbs: FC = memo(() => {\n  const { route } = useSelector(getRoute);\n\n  const currentRoute = useMemo(() => {\n    switch (route) {\n      case RouteUrls.CONTACTS:\n        return Page.CONTACTS;\n\n      case RouteUrls.HISTORY:\n        return Page.HISTORY;\n\n      case RouteUrls.HOME:\n        return Page.HISTORY;\n\n      default:\n        return Page.HISTORY;\n    }\n  }, [route]);\n\n  return (\n    <div className=\"bread-crumbs\">\n      <div className=\"bread-crumbs-header\">{currentRoute}</div>\n      <div className=\"bread-crumbs-body\">\n        Главная{route !== RouteUrls.HOME ? ` / ${currentRoute}` : ``}\n      </div>\n    </div>\n  );\n});\n","import { ACTION_LOGIN } from \"./authorization.model\";\nimport { ACTION_HISTORY } from \"../history/history.model\";\n\nexport const prepareAction = (action: ACTION_LOGIN) => {\n  return action === ACTION_LOGIN.LOGIN\n    ? ACTION_HISTORY.LOGIN\n    : ACTION_HISTORY.LOGIN_OUT;\n};\n\nexport const prepareUser = (user: string, action: ACTION_LOGIN) => {\n  return action === ACTION_LOGIN.LOGIN ? user : \"\";\n};\n","export enum DATE_FORMAT {\n  DB = \"DD.MM.YYYY MM:SS\",\n}\n","import axios from \"axios\";\n\nexport const BASE_URL = \"http://jsonplaceholder.typicode.com/\";\n\nexport const instance = axios.create({\n  baseURL: BASE_URL,\n});\n","import { RequestConfigModel } from \"./api.model\";\nimport { getRandomArbitrary } from \"./api.utils\";\nimport { instance } from \"./api.const\";\n\nexport const axios = (\n  config: RequestConfigModel,\n  resolve: any,\n  reject: any\n): Promise<any> => {\n  return instance\n    .request(config)\n    .then((response) => resolve(response))\n    .catch((error) => reject(error));\n};\n\nexport class Authorization {\n  static login(user: string): Promise<{ data: any }> {\n    const url = \"posts\";\n\n    return new Promise((resolve, reject) => {\n      axios(\n        {\n          url: url,\n          data: { name: user },\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-token-access\": getRandomArbitrary(10, 10000),\n          },\n          method: \"POST\",\n        },\n        resolve,\n        reject\n      );\n    });\n  }\n}\n","export const getRandomArbitrary = (min: number, max: number) => {\n  return Math.random() * (max - min) + min;\n};\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\nimport { Dispatch } from \"redux\";\n\nimport { ACTION_LOGIN, AuthorizationModel } from \"./authorization.model\";\nimport { ACTION_HISTORY, UserInfoModel } from \"../history/history.model\";\nimport { prepareAction, prepareUser } from \"./authorization.utils\";\nimport { historyActions } from \"../history/history.actions\";\nimport { notificationsActions } from \"../notifications\";\nimport { Authorization } from \"../../http/apit\";\n\nclass AuthorizationActions {\n  readonly prefix: string = \"AUTHORIZATION\";\n  readonly SET_LOADING: string = `${this.prefix}.SET_LOADING`;\n  readonly SET_LOGIN: string = `${this.prefix}.SET_LOGIN`;\n  readonly SET_UPDATE_USER: string = `${this.prefix}.SET_UPDATE_USER`;\n\n  setLoading: ActionFunction1<boolean, Action<boolean>> = createAction(\n    this.SET_LOADING\n  );\n  setLogin: ActionFunction1<\n    AuthorizationModel,\n    Action<AuthorizationModel>\n  > = createAction(this.SET_LOGIN);\n  setUpdateUser: ActionFunction1<\n    UserInfoModel,\n    Action<UserInfoModel>\n  > = createAction(this.SET_UPDATE_USER);\n\n  updateLogin: any = (name: string, action: ACTION_LOGIN) => async (\n    dispatch: Dispatch\n  ) => {\n    dispatch(this.setLoading(true));\n    try {\n      const { data } = await Authorization.login(name);\n\n      dispatch(\n        this.setLogin({\n          name: prepareUser(data.name, action),\n          date: new Date(),\n          action,\n        })\n      );\n      dispatch(\n        notificationsActions.updateContent(\"Авторизация прошла успешно\")\n      );\n      dispatch(historyActions.updateHistory(prepareAction(action)));\n      dispatch(this.setLoading(false));\n    } catch (e) {\n      console.log(\"Ошибка в методе updateLogin: \", e);\n      dispatch(notificationsActions.updateContent(\"Авторизация не прошла\"));\n      dispatch(this.setLoading(false));\n    }\n  };\n\n  updateUserInfo: any = (user: UserInfoModel) => async (dispatch: Dispatch) => {\n    dispatch(this.setLoading(true));\n    try {\n      const timer = setTimeout(() => {\n        dispatch(this.setUpdateUser(user));\n        dispatch(\n          notificationsActions.updateContent(\"Данные успешно сохранены\")\n        );\n        dispatch(historyActions.updateHistory(ACTION_HISTORY.UPDATE_USER_INFO));\n        dispatch(this.setLoading(false));\n      }, 1500);\n      return timer;\n    } catch (e) {\n      console.log(\"Ошибка в методе updateUserInfo: \", e);\n      dispatch(\n        notificationsActions.updateContent(\"При сохранении произошла ошибка\")\n      );\n      dispatch(this.setLoading(false));\n    }\n  };\n}\n\nexport const authorizationActions = new AuthorizationActions();\n","import { Action, handleActions } from \"redux-actions\";\n\nimport {\n  AuthorizationModel,\n  AuthorizationStateModel,\n} from \"./authorization.model\";\nimport { authorizationActions } from \"./authorization.actions\";\nimport { AuthorizationMock } from \"../../mock/mocks\";\nimport { UserInfoModel } from \"../history/history.model\";\n\nexport const initialState: AuthorizationStateModel = {\n  user: AuthorizationMock.user,\n  isLoading: false,\n  date: new Date(),\n  error: \"\",\n};\n\nconst setLaoding = (\n  state: AuthorizationStateModel,\n  action: Action<boolean>\n): AuthorizationStateModel => ({\n  ...state,\n  isLoading: action.payload,\n});\n\nconst setLogin = (\n  state: AuthorizationStateModel,\n  action: Action<AuthorizationModel>\n): AuthorizationStateModel => {\n  return {\n    ...state,\n    user: {\n      name: {\n        firstName: action.payload.name,\n        secondName: \"\",\n      },\n      phone: \"\",\n      email: \"\",\n    },\n    date: action.payload.date,\n  };\n};\n\nconst setUpdateUserInfo = (\n  state: AuthorizationStateModel,\n  action: Action<UserInfoModel>\n): AuthorizationStateModel => ({\n  ...state,\n  user: action.payload,\n});\n\nconst reducerMap: { [key: string]: any } = {\n  [authorizationActions.SET_LOADING]: setLaoding,\n  [authorizationActions.SET_UPDATE_USER]: setUpdateUserInfo,\n  [authorizationActions.SET_LOGIN]: setLogin,\n};\n\nexport const authorizationReducer = handleActions(reducerMap, initialState);\n","import { ContactModel } from \"../pages/Contacts/components/TableContacts/model/TableContacts.model\";\nimport {\n  ACTION_HISTORY,\n  HistoryItemModel,\n} from \"../store/history/history.model\";\n\nexport const AuthorizationMock: HistoryItemModel = {\n  action: ACTION_HISTORY.LOGIN,\n  id: 1,\n  date: new Date(),\n  user: {\n    name: {\n      firstName: \"\",\n      secondName: \"\",\n    },\n    email: \"\",\n    phone: \"\",\n  },\n};\n\nexport const MockTableContacts: ContactModel[] = [\n  {\n    id: 1,\n    name: \"Иван\",\n    email: \"ivan@mail.ru\",\n    phone: \"8-908-878-06-06\",\n    isArchive: false,\n  },\n  {\n    id: 2,\n    name: \"Петр\",\n    email: \"petr@mail.ru\",\n    phone: \"8-998-878-06-11\",\n    isArchive: true,\n  },\n  {\n    id: 3,\n    name: \"Максим\",\n    email: \"max@mail.ru\",\n    phone: \"8-908-878-06-06\",\n    isArchive: false,\n  },\n  {\n    id: 4,\n    name: \"Семен\",\n    email: \"semen@mail.ru\",\n    phone: \"8-908-878-06-06\",\n    isArchive: false,\n  },\n  {\n    id: 5,\n    name: \"Валентин\",\n    email: \"valentin@mail.ru\",\n    phone: \"8-908-878-06-06\",\n    isArchive: false,\n  },\n  {\n    id: 6,\n    name: \"Филип\",\n    email: \"philip@mail.ru\",\n    phone: \"8-908-878-06-06\",\n    isArchive: false,\n  },\n];\n","import React, { FC, memo, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport cx from \"classnames\";\n\nimport usericon from \"../../../../assets/user-icons/user-avatar.svg\";\nimport { getAbbreviatedName, getFullName } from \"./UserBlock.utils\";\nimport { getAuthorization } from \"../../../store/authorization\";\nimport { UserBlockModel } from \"./model/UserBlock.model\";\nimport { SIZE_VERSION } from \"./UserBlock.const\";\n\nimport \"./UserBlock.scss\";\n\nexport const UserBlock: FC<UserBlockModel> = memo(({ version }) => {\n  const { name } = useSelector(getAuthorization).user;\n\n  const classBlock = useMemo(\n    () =>\n      cx([\"user-block\", { \"user-block__mini\": version === SIZE_VERSION.LOW }]),\n    [version]\n  );\n\n  const titleContent = useMemo(() => {\n    switch (version) {\n      case SIZE_VERSION.LOW:\n        return getAbbreviatedName(name);\n      case SIZE_VERSION.MEDIUM:\n        return getFullName(name);\n\n      default:\n        return \"\";\n    }\n  }, [version, name]);\n\n  return (\n    <div className={classBlock}>\n      <div className=\"user-block-avatar\">\n        <img src={usericon} alt=\"изобржание аватара пользователя\" />\n      </div>\n      <div className=\"user-block-title\">{titleContent}</div>\n    </div>\n  );\n});\n","export const getAbbreviatedName = (name: {\n  firstName: string;\n  secondName: string;\n}) => {\n  if (!name.secondName) {\n    return name.firstName;\n  }\n\n  return `${name.firstName} ${name.secondName.slice(0, 1)}.`;\n};\n\nexport const getFullName = (name: {\n  firstName: string;\n  secondName: string;\n}) => {\n  if (!!name.firstName && !!name.secondName) {\n    return `${name.firstName} ${name.secondName}`;\n  }\n\n  return name.firstName;\n};\n","import React, { FC, memo, useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport cn from \"classnames\";\n\nimport verticalline from \"../../../../assets/header-menu/vertical_line.svg\";\nimport { Page, RouteUrls } from \"../../../routing/routing.enums\";\nimport { BUTTON_TYPE } from \"../Button/model/ButtonProps.model\";\nimport { getRoute } from \"../../../store/route/route.selector\";\nimport { SIZE_VERSION } from \"../UserBlock/UserBlock.const\";\nimport { routeActions } from \"../../../store/route\";\nimport { Notification } from \"../Notification\";\nimport { BreadСrumbs } from \"../BreadСrumbs\";\nimport { UserBlock } from \"../UserBlock\";\nimport { Button } from \"../Button\";\n\nimport \"./Header.scss\";\n\nexport const Header: FC = memo(() => {\n  const { route } = useSelector(getRoute);\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const handleClick = useCallback(\n    (url: RouteUrls) => {\n      dispatch(routeActions.setCurrentRoute(url as RouteUrls));\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    history.push(route);\n  }, [history, route]);\n\n  return (\n    <div className=\"page-header\">\n      <div className=\"page-header-title\">\n        <Notification />\n        <img\n          className=\"page-header-title-verticalline\"\n          src={verticalline}\n          alt=\"белая вертикальная линия\"\n        />\n        <UserBlock version={SIZE_VERSION.LOW} />\n      </div>\n      <div className=\"page-header-navbar\">\n        <BreadСrumbs />\n        <div className=\"flex-end\">\n          <Button\n            type={BUTTON_TYPE.NORMAL}\n            onClick={() => handleClick(RouteUrls.HOME)}\n            title={Page.HOME}\n            className={cn([{ button__active: route === RouteUrls.HOME }])}\n          />\n          <Button\n            type={BUTTON_TYPE.NORMAL}\n            onClick={() => handleClick(RouteUrls.CONTACTS)}\n            title={Page.CONTACTS}\n            className={cn([{ button__active: route === RouteUrls.CONTACTS }])}\n          />\n          <Button\n            type={BUTTON_TYPE.NORMAL}\n            onClick={() => handleClick(RouteUrls.HISTORY)}\n            title={Page.HISTORY}\n            className={cn([{ button__active: route === RouteUrls.HISTORY }])}\n          />\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { FC, memo, useMemo } from \"react\";\nimport cn from \"classnames\";\n\nimport { FieldTextModel } from \"./model/FieldText.model\";\n\nimport \"./InputText.scss\";\n\nexport const FieldText: FC<FieldTextModel> = memo(\n  ({\n    title,\n    name,\n    placeholder,\n    disable,\n    register,\n    errors,\n    pattern,\n    validate,\n    ...props\n  }) => {\n    const classInput = useMemo(\n      () => cn([\"fieldText\", { fieldText__disable: disable }]),\n      [disable]\n    );\n\n    const classErrors = useMemo(\n      () => cn([\"fieldText__errors\", { fieldText__visible: errors?.[name] }]),\n      [errors, name]\n    );\n\n    return (\n      <div className={classInput}>\n        <label className=\"fieldText-title\">{title}</label>\n        <input\n          type=\"text\"\n          name={name}\n          placeholder={placeholder}\n          ref={register({\n            required: \"Required\",\n            pattern,\n            validate,\n          })}\n          {...props}\n        />\n        <div className={classErrors}>{title}*</div>\n      </div>\n    );\n  }\n);\n","import React, { FC, memo, useMemo } from \"react\";\n\nimport { FieldBlockModel } from \"./FieldBlock.model\";\n\nimport \"./FieldBlock.scss\";\n\nexport const FieldBlock: FC<FieldBlockModel> = memo(({ icon, children }) => {\n  const content = useMemo(\n    () =>\n      !!icon ? (\n        <>\n          <img src={icon} alt=\"иконка\" />\n          {children}\n        </>\n      ) : (\n        <>{children}</>\n      ),\n    [icon, children]\n  );\n\n  return <div className=\"field-block\">{content}</div>;\n});\n","import React, { FC, memo, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\n\nimport { authorizationActions } from \"../../store/authorization/authorization.actions\";\nimport { getAuthorization } from \"../../store/authorization/authorization.selectors\";\nimport { BUTTON_TYPE } from \"../../shared/components/Button/model/ButtonProps.model\";\nimport { ACTION_LOGIN } from \"../../store/authorization/authorization.model\";\nimport { FieldText } from \"../../shared/components/Fields/InputText\";\nimport { FieldBlock } from \"../../shared/components/Fields/FieldBlock\";\nimport { ACTION_HISTORY } from \"../../store/history/history.model\";\nimport { Button } from \"../../shared/components/Button\";\n\nimport \"./Authorization.scss\";\n\nexport const Authorization: FC = memo(() => {\n  const { isLoading } = useSelector(getAuthorization);\n  const { register, handleSubmit, errors } = useForm();\n  const dispatch = useDispatch();\n\n  const onSubmit = useCallback(\n    (values: any) => {\n      dispatch(\n        authorizationActions.updateLogin(values.name, ACTION_LOGIN.LOGIN)\n      );\n    },\n    [dispatch]\n  );\n\n  return (\n    <div className=\"page-authorization\">\n      <div className=\"page-authorization-body\">\n        <div className=\"authorization-form\">\n          <FieldBlock>\n            <FieldText\n              name=\"name\"\n              title=\"Имя пользователя\"\n              placeholder=\"Например, Филип\"\n              register={register}\n              disable={isLoading}\n              errors={errors}\n            />\n          </FieldBlock>\n          <Button\n            type={BUTTON_TYPE.DEFAULT}\n            onClick={handleSubmit(onSubmit)}\n            title={ACTION_HISTORY.LOGIN}\n            style={{\n              margin: 0,\n              width: \"100%\",\n            }}\n            loading={isLoading}\n          />\n        </div>\n      </div>\n    </div>\n  );\n});\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\nimport { Dispatch } from \"redux\";\n\nimport { StoreModel } from \"../model/store.model\";\nimport { getCurrentPage } from \"./pagecontrol.utils\";\n\nclass Pagecontrol {\n  readonly prefix: string = \"PAGE_CONTROL\";\n  readonly SET_CONTROL: string = \"SET_CONTROL\";\n\n  setControl: ActionFunction1<any, Action<any>> = createAction(\n    this.SET_CONTROL\n  );\n\n  updateControl: any = (isShow: boolean) => async (\n    dispatch: Dispatch,\n    getState: () => StoreModel\n  ) => {\n    const { route } = getState().route;\n    const current = getCurrentPage(route);\n\n    dispatch(this.setControl({ [current]: isShow }));\n  };\n}\n\nexport const pageControlActions = new Pagecontrol();\n","export const getCurrentPage = (string: string) => {\n  return string.slice(1);\n};\n","import { Action, handleActions } from \"redux-actions\";\nimport { PageControlModel } from \"./pagecontrol.model\";\nimport { pageControlActions } from \"./pagecontrol.actions\";\n\nconst initialState: PageControlModel = {\n  home: false,\n  history: false,\n  contacts: false,\n};\n\nconst setControl = (\n  state: PageControlModel,\n  action: Action<any>\n): PageControlModel => ({\n  ...state,\n  ...action.payload,\n});\n\nconst reducerMap: { [key: string]: any } = {\n  [pageControlActions.SET_CONTROL]: setControl,\n};\n\nexport const pagecontrolReducer = handleActions(reducerMap, initialState);\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getPageControl = (state: StoreModel) => state.pagecontrol;\n","import React, { FC, memo } from \"react\";\n\nimport { HeadingpageModel } from \"./model/Headingpage.model\";\n\nimport \"./HeadingPage.scss\";\n\nexport const HeadingPage: FC<HeadingpageModel> = memo(\n  ({ titleContent, buttonContent }) => {\n    return (\n      <div className=\"heading-page flex-center\">\n        <div className=\"heading-page-title\">{titleContent}</div>\n        <div className=\"heading-page-buttons\">{buttonContent}</div>\n      </div>\n    );\n  }\n);\n","import React, { FC, memo } from \"react\";\n\nimport \"./BodyPage.scss\";\n\nexport const BodyPage: FC = memo(({ children }) => {\n  return <div className=\"body-page\">{children}</div>;\n});\n","import React, { FC, memo } from \"react\";\n\nimport { FieldCheckBoxModel } from \"./model/FieldCheckBox.model\";\n\nimport \"./CheckBox.scss\";\n\nexport const FieldCheckBox: FC<FieldCheckBoxModel> = memo(\n  ({ name, title, register, ...props }) => {\n    return (\n      <div className=\"fieldCheckBox\">\n        <label>{`${title}: `} </label>\n        <input type=\"checkbox\" name={name} ref={register({})} {...props} />\n      </div>\n    );\n  }\n);\n","import { ContactModel } from \"../../pages/Contacts/components/TableContacts/model/TableContacts.model\";\n\nexport const ApiUpdateContacts = (\n  contacts: ContactModel[],\n  contact: ContactModel\n): ContactModel[] => {\n  let lengthList = contacts.length;\n\n  if (!contact.id || !lengthList) {\n    return [...contacts, { ...contact, id: contacts[lengthList - 1].id + 1 }];\n  }\n\n  if (!!contact.id && !!lengthList) {\n    const resultList: ContactModel[] = [];\n\n    contacts.map((item) => {\n      if (item.id === contact.id) {\n        resultList.push({\n          ...item,\n          ...contact,\n        });\n      }\n\n      if (item.id !== contact.id) {\n        resultList.push(item);\n      }\n    });\n\n    return resultList;\n  }\n\n  return contacts;\n};\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\nimport { Dispatch } from \"redux\";\n\nimport { ContactModel } from \"../../pages/Contacts/components/TableContacts/model/TableContacts.model\";\nimport { ACTION_HISTORY } from \"../history/history.model\";\nimport { StoreModel } from \"../model/store.model\";\nimport { timerCount } from \"../../shared/utils/service.util\";\nimport { ApiUpdateContacts } from \"./contacts.utils\";\nimport { historyActions } from \"../history\";\nimport { notificationsActions } from \"../notifications\";\n\nclass ContactsActions {\n  readonly prefix: string = \"CONTACTS\";\n  readonly SET_LOADING: string = `${this.prefix}.SET_LOADING`;\n  readonly SET_UPDATE_CONTACTS: string = `${this.prefix}.SET_UPDATE_CONTACTS`;\n  readonly SET_REMOVE_CONTACT: string = `${this.prefix}.SET_REMOVE_CONTACT`;\n\n  setLoading: ActionFunction1<boolean, Action<boolean>> = createAction(\n    this.SET_LOADING\n  );\n  setRemoveContact: ActionFunction1<any, Action<any>> = createAction(\n    this.SET_REMOVE_CONTACT\n  );\n\n  setUpdateContacts: ActionFunction1<any, Action<any>> = createAction(\n    this.SET_UPDATE_CONTACTS\n  );\n\n  updateContacts: any = (\n    contact: ContactModel,\n    action: ACTION_HISTORY\n  ) => async (dispatch: Dispatch, getState: () => StoreModel) => {\n    const { list } = getState().contacts;\n    dispatch(this.setLoading(true));\n    try {\n      const timer = setTimeout(() => {\n        dispatch(this.setUpdateContacts(ApiUpdateContacts(list, contact)));\n        dispatch(\n          notificationsActions.updateContent(\"Данные успешно сохранены\")\n        );\n        dispatch(historyActions.updateHistory(action));\n        dispatch(this.setLoading(false));\n      }, timerCount);\n      return timer;\n    } catch (e) {\n      console.log(\"Ошибка в методе updateContacts: \", e);\n      dispatch(\n          notificationsActions.updateContent(\"При сохранении произошла ошибка\")\n      );\n      dispatch(this.setLoading(false));\n    }\n  };\n\n  removeContact: any = (\n    contact: ContactModel,\n    action: ACTION_HISTORY\n  ) => async (dispatch: Dispatch, getState: () => StoreModel) => {\n    const { list } = getState().contacts;\n    dispatch(this.setLoading(true));\n    try {\n      const timer = setTimeout(() => {\n        dispatch(this.setRemoveContact(ApiUpdateContacts(list, contact)));\n        dispatch(\n          notificationsActions.updateContent(\"Данные успешно сохранены\")\n        );\n        dispatch(historyActions.updateHistory(action));\n        dispatch(this.setLoading(false));\n      }, timerCount);\n      return timer;\n    } catch (e) {\n      console.log(\"Ошибка в методе updateContacts: \", e);\n      dispatch(\n          notificationsActions.updateContent(\"При сохранении произошла ошибка\")\n      );\n      dispatch(this.setLoading(false));\n    }\n  };\n}\n\nexport const contactsActions = new ContactsActions();\n","export const timerCount = 1000;\n","import { Action, handleActions } from \"redux-actions\";\nimport { MockTableContacts } from \"../../mock/mocks\";\n\nimport { ContactModel } from \"../../pages/Contacts/components/TableContacts/model/TableContacts.model\";\nimport { contactsActions } from \"./contacts.actions\";\nimport { ContactsModelState } from \"./contacts.model\";\n\nexport const initialState: ContactsModelState = {\n  list: MockTableContacts,\n  isLoading: false,\n  error: \"\",\n};\n\nconst setLaoding = (\n  state: ContactsModelState,\n  action: Action<boolean>\n): ContactsModelState => ({\n  ...state,\n  isLoading: action.payload,\n});\n\nconst setUpdateContacts = (\n  state: ContactsModelState,\n  action: Action<ContactModel[]>\n): ContactsModelState => ({\n  ...state,\n  list: action.payload,\n});\n\nconst setRemoveContacts = (\n  state: ContactsModelState,\n  action: Action<ContactModel[]>\n): ContactsModelState => ({\n  ...state,\n  list: action.payload,\n});\n\nconst reducerMap: { [key: string]: any } = {\n  [contactsActions.SET_LOADING]: setLaoding,\n  [contactsActions.SET_UPDATE_CONTACTS]: setUpdateContacts,\n  [contactsActions.SET_REMOVE_CONTACT]: setRemoveContacts,\n};\n\nexport const contactsReducer = handleActions(reducerMap, initialState);\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getContacts = (state: StoreModel) => state.contacts;\n","export const PATTERNS = {\n  EMAIL: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,}$/i,\n};\n","import React, { FC, memo } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\n\nimport { FieldCheckBox } from \"../../../../shared/components/Fields/CheckBox\";\nimport { FieldBlock } from \"../../../../shared/components/Fields/FieldBlock\";\nimport { FieldText } from \"../../../../shared/components/Fields/InputText\";\nimport { ContactModel } from \"../TableContacts/model/TableContacts.model\";\nimport { ACTION_HISTORY } from \"../../../../store/history/history.model\";\nimport { contactsActions } from \"../../../../store/contacts\";\nimport { Modal } from \"../../../../shared/components/Modal\";\nimport { PATTERNS } from \"../../../../shared/constants\";\n\nimport \"./ContactsModal.scss\";\n\nexport const ContactsModal: FC<any> = memo(\n  ({ initialValues, title, modalClosed }) => {\n    const dispatch = useDispatch();\n\n    const { handleSubmit, register, errors } = useForm({\n      defaultValues: {\n        ...initialValues,\n      },\n    });\n\n    const onSubmit = (values: any) => {\n      const prepareItem: ContactModel = {\n        ...initialValues,\n        ...values,\n      };\n\n      dispatch(\n        contactsActions.updateContacts(prepareItem, ACTION_HISTORY.EDIT_CONTACT)\n      );\n      modalClosed();\n    };\n\n    return (\n      <Modal\n        title={title}\n        cbCancel={modalClosed}\n        cancelTitle=\"Отмена\"\n        cbOk={handleSubmit(onSubmit)}\n        okTitle=\"Сохранить\"\n        modalClosed={modalClosed}\n      >\n        <div className=\"contacts-modal\">\n          <FieldBlock>\n            <FieldText\n              title=\"Имя\"\n              name=\"name\"\n              register={register}\n              errors={errors}\n            />\n          </FieldBlock>\n          <FieldBlock>\n            <FieldText\n              title=\"Почта\"\n              name=\"email\"\n              register={register}\n              errors={errors}\n              pattern={{\n                value: PATTERNS.EMAIL,\n              }}\n            />\n          </FieldBlock>\n          <FieldBlock>\n            <FieldText\n              title=\"Сотовый\"\n              name=\"phone\"\n              register={register}\n              errors={errors}\n            />\n          </FieldBlock>\n          <FieldBlock>\n            <FieldCheckBox title=\"Архив\" name=\"isArchive\" register={register} />\n          </FieldBlock>\n        </div>\n      </Modal>\n    );\n  }\n);\n","import React, { FC, memo, useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { BUTTON_TYPE } from \"../../../../shared/components/Button/model/ButtonProps.model\";\nimport { ACTION_HISTORY } from \"../../../../store/history/history.model\";\nimport { Button } from \"../../../../shared/components/Button\";\nimport { contactsActions } from \"../../../../store/contacts\";\nimport { ContactsModal } from \"../ContactsModal\";\n\nimport \"./MenuSetting.scss\";\n\nexport const MenuSetting: FC<any> = memo(({ item }) => {\n  const [isShowModal, setShowModal] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleRemove = () => {\n    dispatch(\n      contactsActions.removeContact(\n        { ...item, isArchive: !item.isArchive },\n        ACTION_HISTORY.ARCHIVE_CONTACT\n      )\n    );\n  };\n\n  const handleOpenModal = (action: ACTION_HISTORY) => {\n    setShowModal(true);\n  };\n\n  const isArchive = useMemo(() => item.isArchive, [item]);\n  const archiveButtonTitle = useMemo(\n    () => (item.isArchive ? \"Восстановить\" : \"Архивировать\"),\n    [item]\n  );\n\n  return (\n    <>\n      <div className=\"menu-setting\">\n        <Button\n          type={BUTTON_TYPE.DEFAULT}\n          onClick={() => handleOpenModal(ACTION_HISTORY.EDIT_CONTACT)}\n          title=\"Редактировать\"\n          visible={isArchive}\n        />\n        <Button\n          type={BUTTON_TYPE.ERROR}\n          onClick={handleRemove}\n          title={archiveButtonTitle}\n        />\n      </div>\n      {isShowModal && (\n        <ContactsModal\n          initialValues={item}\n          title=\"Редактирование контакта\"\n          modalClosed={() => setShowModal(false)}\n        />\n      )}\n    </>\n  );\n});\n","import React, { FC, memo } from \"react\";\nimport cn from \"classnames\";\n\nimport { ContactModel, TableContactsModel } from \"./model/TableContacts.model\";\nimport { MenuSetting } from \"../MenuSetting\";\n\nimport \"./TableContacts.scss\";\n\nexport const TableContacts: FC<TableContactsModel> = memo(\n  ({ list, archiveMode }) => {\n    const classNameCol = (item: ContactModel) =>\n      cn([\n        \"table-contacts-row\",\n        { \"table-contacts-row__archive\": item.isArchive },\n      ]);\n    return (\n      <div className=\"table-contacts\">\n        <div className=\"table-contacts-row table-contacts-row__header\">\n          <div className=\"table-contacts-col\">id</div>\n          <div className=\"table-contacts-col\">Имя</div>\n          <div className=\"table-contacts-col\">Почта</div>\n          <div className=\"table-contacts-col\">Сотовый</div>\n          <div className=\"table-contacts-col\">Настройки</div>\n        </div>\n        {list.map((item, key) => {\n          if (!!archiveMode && !!item.isArchive) {\n            return (\n              <div className={classNameCol(item)} key={key}>\n                <div className=\"table-contacts-col\">{item.id}</div>\n                <div className=\"table-contacts-col\">{item.name}</div>\n                <div className=\"table-contacts-col\">{item.email}</div>\n                <div className=\"table-contacts-col\">{item.phone}</div>\n                <div className=\"flex-end\">\n                  <MenuSetting item={item} />\n                </div>\n              </div>\n            );\n          }\n\n          if (!archiveMode && !item.isArchive) {\n            return (\n              <div className={classNameCol(item)} key={key}>\n                <div className=\"table-contacts-col\">{item.id}</div>\n                <div className=\"table-contacts-col\">{item.name}</div>\n                <div className=\"table-contacts-col\">{item.email}</div>\n                <div className=\"table-contacts-col\">{item.phone}</div>\n                <div className=\"flex-end\">\n                  <MenuSetting item={item} />\n                </div>\n              </div>\n            );\n          }\n        })}\n      </div>\n    );\n  }\n);\n","import React, { FC, memo, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { BUTTON_TYPE } from \"../../shared/components/Button/model/ButtonProps.model\";\nimport { getPageControl, pageControlActions } from \"../../store/pagecontrol\";\nimport { HeadingPage } from \"../../shared/components/HeadingPage\";\nimport { BodyPage } from \"../../shared/components/BodyPage\";\nimport { ContactsModal } from \"./components/ContactsModal\";\nimport { TableContacts } from \"./components/TableContacts\";\nimport { Button } from \"../../shared/components/Button\";\nimport { Body } from \"../../shared/components/Body\";\nimport { Page } from \"../../routing/routing.enums\";\nimport { getContacts } from \"../../store/contacts\";\n\nexport const Contacts: FC = memo(() => {\n  const { contacts } = useSelector(getPageControl);\n  const { list, isLoading } = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const [isShowTable, setShowTable] = useState(contacts);\n  const [isShowModal, setShowModal] = useState(false);\n  const [isArchiveMode, setArchiveMode] = useState(false);\n\n  const titleHeadingPage = useMemo(\n    () =>\n      `${Page.CONTACTS} (${\n        isArchiveMode ? \"архивный список\" : \"активный список\"\n      })`,\n    [isArchiveMode]\n  );\n\n  useEffect(() => {\n    dispatch(pageControlActions.updateControl(isShowTable));\n  }, [dispatch, isShowTable]);\n\n  return (\n    <Body isLoading={isLoading}>\n      <HeadingPage\n        titleContent={titleHeadingPage}\n        buttonContent={\n          <>\n            <Button\n              type={BUTTON_TYPE.NORMAL}\n              onClick={() => setArchiveMode(!isArchiveMode)}\n              title={isArchiveMode ? \"Выйти из архива\" : \"Перейти в архив\"}\n              disable={!isShowTable}\n            />\n            <Button\n              type={BUTTON_TYPE.SUCCESS}\n              onClick={() => setShowModal(true)}\n              title=\"Добавить контакт\"\n              disable={!isShowTable}\n            />\n            <Button\n              type={BUTTON_TYPE.DEFAULT}\n              onClick={() => setShowTable(!isShowTable)}\n              title={isShowTable ? \"Свернуть контакты\" : \"Показать контакты\"}\n            />\n          </>\n        }\n      />\n      {isShowTable && !!list.length && (\n        <BodyPage>\n          <TableContacts list={list} archiveMode={isArchiveMode} />\n        </BodyPage>\n      )}\n\n      {isShowModal && (\n        <ContactsModal\n          title=\"Добавить контакт\"\n          modalClosed={() => setShowModal(false)}\n        />\n      )}\n    </Body>\n  );\n});\n","import React, { FC, memo } from \"react\";\nimport moment from \"moment\";\n\nimport { HistoryItemModel } from \"../../../../store/history/history.model\";\nimport { DATE_FORMAT } from \"../../../../shared/constants\";\n\nimport \"./TableHistory.scss\";\n\nexport const TableHistory: FC<{ list: HistoryItemModel[] }> = memo(\n  ({ list }) => {\n    return (\n      <div className=\"table-history\">\n        <div className=\"table-history-row table-history-row__header\">\n          <div className=\"table-history-col\">Пользователь</div>\n          <div className=\"table-history-col\">Дата действия</div>\n          <div className=\"table-history-col\">Действие</div>\n        </div>\n        {list.map(({ user, date, action }, key) => (\n          <div className=\"table-history-row\" key={key}>\n            <div className=\"table-history-col\">{user.name.firstName}</div>\n            <div className=\"table-history-col\">\n              {moment(date).format(DATE_FORMAT.DB)}\n            </div>\n            <div className=\"table-history-col\">{action}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n);\n","import React, { FC, memo, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { BUTTON_TYPE } from \"../../shared/components/Button/model/ButtonProps.model\";\nimport { getPageControl, pageControlActions } from \"../../store/pagecontrol\";\nimport { getHistory } from \"../../store/history/history.selectors\";\nimport { HeadingPage } from \"../../shared/components/HeadingPage\";\nimport { BodyPage } from \"../../shared/components/BodyPage\";\nimport { TableHistory } from \"./components/TableHistory\";\nimport { Button } from \"../../shared/components/Button\";\nimport { Body } from \"../../shared/components/Body\";\nimport { Page } from \"../../routing/routing.enums\";\n\nexport const History: FC = memo(() => {\n  const { list } = useSelector(getHistory);\n  const { history } = useSelector(getPageControl);\n\n  const [isShowTable, setShowTable] = useState(history);\n  const buttonTitle = useMemo(\n    () => (isShowTable ? \"Свернуть историю\" : \"Показать историю\"),\n    [isShowTable]\n  );\n\n  const handleClick = () => {\n    setShowTable(!isShowTable);\n  };\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(pageControlActions.updateControl(isShowTable));\n  }, [dispatch, isShowTable]);\n\n  const title = useMemo(\n    () => `${Page.HISTORY} (кол-во действий ${list.length})`,\n    [list]\n  );\n\n  return (\n    <Body>\n      <HeadingPage\n        titleContent={title}\n        buttonContent={\n          <Button\n            type={BUTTON_TYPE.DEFAULT}\n            onClick={handleClick}\n            title={buttonTitle}\n          />\n        }\n      />\n      {isShowTable && (\n        <BodyPage>\n          <TableHistory list={list} />\n        </BodyPage>\n      )}\n    </Body>\n  );\n});\n","import React from \"react\";\n\nimport { Authorization } from \"../pages/Authorization\";\nimport { RouteModel } from \"./routing.model\";\nimport { Contacts } from \"../pages/Contacts\";\nimport { RouteUrls } from \"./routing.enums\";\nimport { History } from \"../pages/History\";\n\nexport const Routes: RouteModel[] = [\n  {\n    component: () => <History />,\n    path: `${RouteUrls.HISTORY}`,\n    exact: false,\n  },\n  {\n    component: () => <Contacts />,\n    path: `${RouteUrls.CONTACTS}`,\n    exact: false,\n  },\n  {\n    component: () => <Authorization />,\n    path: `${RouteUrls.LOGIN}`,\n    exact: false,\n  },\n];\n","import { UserInfoModel } from \"../../store/history/history.model\";\n\nexport const prepareGet = (obj: UserInfoModel) => {\n  const name = obj.name.secondName\n      ? `${obj.name.firstName} ${obj.name.secondName}`\n      : obj.name.firstName;\n\n  return {\n    ...obj,\n    name,\n  };\n};\n\nexport const prepareSet = (obj: any): UserInfoModel => {\n  const res = obj?.name?.split(\" \");\n  return {\n    ...obj,\n    name: {\n      firstName: res?.[0],\n      secondName: res?.[1],\n    },\n  };\n};\n","import React, { FC, memo } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { FieldBlock } from \"../../../../shared/components/Fields/FieldBlock\";\nimport { FieldText } from \"../../../../shared/components/Fields/InputText\";\nimport {\n  BUTTON_SIZE,\n  BUTTON_TYPE,\n} from \"../../../../shared/components/Button/model/ButtonProps.model\";\nimport usercardicon from \"../../../../../assets/user-icons/user-card.svg\";\nimport phoneicon from \"../../../../../assets/user-icons/phone-icon.svg\";\nimport {\n  authorizationActions,\n  getAuthorization,\n} from \"../../../../store/authorization\";\nimport mailicon from \"../../../../../assets/user-icons/mail-icon.svg\";\nimport { PATTERNS } from \"../../../../shared/constants/input.pattern\";\nimport { Button } from \"../../../../shared/components/Button\";\nimport { EditFormHomeModel } from \"./EditFormHome.model\";\nimport { prepareGet, prepareSet } from \"../../Home.utils\";\n\nimport \"./EditFormHome.scss\";\n\nexport const EditFormHome: FC<EditFormHomeModel> = memo(({ closedForm }) => {\n  const { user } = useSelector(getAuthorization);\n  const disaptch = useDispatch();\n  const { register, handleSubmit, errors } = useForm({\n    defaultValues: prepareGet(user),\n  });\n\n  const onSubmit = (values: any) => {\n    disaptch(authorizationActions.updateUserInfo(prepareSet(values)));\n    closedForm();\n  };\n\n  return (\n    <div className=\"edit-form-home\">\n      <div className=\"edit-form-home grid-row\">\n        <FieldBlock icon={usercardicon}>\n          <FieldText\n            title=\"Имя и фамилия\"\n            name=\"name\"\n            placeholder=\"Укажите ваши имя и фамилию\"\n            register={register}\n            errors={errors}\n          />\n        </FieldBlock>\n        <FieldBlock icon={mailicon}>\n          <FieldText\n            title=\"E-mail\"\n            name=\"email\"\n            placeholder=\"Укажите ваш e-mail\"\n            register={register}\n            errors={errors}\n            pattern={{\n              value: PATTERNS.EMAIL,\n            }}\n          />\n        </FieldBlock>\n        <FieldBlock icon={phoneicon}>\n          <FieldText\n            title=\"Номер телефона\"\n            name=\"phone\"\n            placeholder=\"Укажите ваш номер телефона\"\n            register={register}\n            errors={errors}\n          />\n        </FieldBlock>\n      </div>\n      <div className=\"flex-center\">\n        <Button\n          type={BUTTON_TYPE.SUCCESS}\n          size={BUTTON_SIZE.NORMAL}\n          onClick={handleSubmit(onSubmit)}\n          title=\"Сохранить\"\n        />\n      </div>\n    </div>\n  );\n});\n","export const infoContent = (string: string, key: string) => {\n  return string ? string : `Укажите ${key}`;\n};\n","import React, { FC, memo } from \"react\";\n\nimport phone from \"../../../../../assets/user-icons/phone-icon.svg\";\nimport mail from \"../../../../../assets/user-icons/mail-icon.svg\";\nimport { TableHomeModel } from \"./model/TableHome.model\";\nimport { infoContent } from \"./TableHome.utils\";\n\nimport \"./TableHome.scss\";\n\nexport const TableHome: FC<TableHomeModel> = memo(({ user }) => {\n  return (\n    <div className=\"table-home\">\n      <div className=\"table-home-row\">\n        <div className=\"table-home-col\">\n          <img src={mail} alt=\"символ собаки\" />\n        </div>\n        <div className=\"table-home-col\">{infoContent(user.email, \"почту\")}</div>\n      </div>\n      <div className=\"table-home-row\">\n        <div className=\"table-home-col\">\n          <img src={phone} alt=\"символ телефона\" />\n        </div>\n        <div className=\"table-home-col\">\n          {infoContent(user.phone, \"номер телефона\")}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { FC, memo, useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { BUTTON_TYPE } from \"../../shared/components/Button/model/ButtonProps.model\";\nimport { ACTION_LOGIN } from \"../../store/authorization/authorization.model\";\nimport { HeadingPage } from \"../../shared/components/HeadingPage\";\nimport { BodyPage } from \"../../shared/components/BodyPage\";\nimport { Button } from \"../../shared/components/Button\";\nimport { Body } from \"../../shared/components/Body\";\nimport {\n  authorizationActions,\n  getAuthorization,\n} from \"../../store/authorization\";\nimport { SIZE_VERSION } from \"../../shared/components/UserBlock/UserBlock.const\";\nimport { ACTION_HISTORY } from \"../../store/history/history.model\";\nimport { UserBlock } from \"../../shared/components/UserBlock\";\nimport { EditFormHome } from \"./components/EditFormHome\";\nimport { TableHome } from \"./components/TableHome\";\n\nexport const Home: FC = memo(() => {\n  const { user, isLoading } = useSelector(getAuthorization);\n  const dispatch = useDispatch();\n  const [isEditMode, setEditMode] = useState(false);\n\n  const handleLogOut = useCallback(() => {\n    dispatch(authorizationActions.updateLogin(user, ACTION_LOGIN.LOGIN_OUT));\n  }, [dispatch, user]);\n\n  return (\n    <Body isLoading={isLoading}>\n      <HeadingPage\n        titleContent={<UserBlock version={SIZE_VERSION.MEDIUM} />}\n        buttonContent={\n          <>\n            <Button\n              type={BUTTON_TYPE.NORMAL}\n              onClick={() => setEditMode(!isEditMode)}\n              title={isEditMode ? \"Отменить\" : \"Редактировать\"}\n              loading={isLoading}\n            />\n            <Button\n              type={BUTTON_TYPE.ERROR}\n              onClick={handleLogOut}\n              title={ACTION_HISTORY.LOGIN_OUT}\n              loading={isLoading}\n            />\n          </>\n        }\n      />\n      <BodyPage>\n        {!isEditMode && <TableHome user={user} />}\n        {!!isEditMode && <EditFormHome closedForm={() => setEditMode(false)} />}\n      </BodyPage>\n    </Body>\n  );\n});\n","import React, { memo, useEffect, useMemo } from \"react\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport { getAuthorization } from \"../store/authorization/authorization.selectors\";\nimport { RoutingModal } from \"./components/RoutingModal\";\nimport { NotFound } from \"../pages/NotFound/NotFound\";\nimport { Header } from \"../shared/components/Header\";\nimport { RouteUrls } from \"./routing.enums\";\nimport { Routes } from \"./routing.const\";\nimport { Home } from \"../pages/Home\";\n\nexport const Routing = memo(() => {\n  const { name } = useSelector(getAuthorization).user;\n\n  const history = useHistory();\n  const isLogin = useMemo(() => !!name.firstName, [name]);\n\n  useEffect(() => {\n    if (!isLogin) {\n      history.push(RouteUrls.LOGIN);\n    }\n  }, [history, isLogin]);\n\n  return (\n    <>\n      {!!isLogin && <Header />}\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        {Routes.map((route, key) => {\n          const { path, component, exact } = route;\n          return (\n            <Route exact={exact} path={path} component={component} key={key} />\n          );\n        })}\n        <NotFound />\n      </Switch>\n      <RoutingModal />\n    </>\n  );\n});\n","import { combineReducers } from \"redux\";\n\nimport { historyReducer as history } from \"../history\";\nimport { authorizationReducer as authorization } from \"../authorization\";\nimport { routeReducer as route } from \"../route\";\nimport { pagecontrolReducer as pagecontrol } from \"../pagecontrol\";\nimport { contactsReducer as contacts } from \"../contacts\";\nimport { notificationsReducer as notifications } from \"../notifications\";\n\nexport const reducers = combineReducers({\n  history,\n  authorization,\n  route,\n  pagecontrol,\n  contacts,\n  notifications,\n});\n","import { Action, Dispatch, Middleware, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\n// Thunk function\nexport const actionFn: Middleware = ({ dispatch, getState }) => (\n  next: Dispatch\n) => (action: Function | Action) => {\n  return action instanceof Function ? action(dispatch, getState) : next(action);\n};\n\nexport const middlewares = composeWithDevTools(applyMiddleware(actionFn));\n","import { createStore } from \"redux\";\n\nimport { reducers } from \"./reducers\";\nimport { middlewares } from \"./middlewares\";\n\nexport const store = createStore(reducers, middlewares);\n","import React, { FC } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport { urls } from \"./app/routing/routing.enums\";\nimport { Routing } from \"./app/routing/routing\";\nimport { store } from \"./app/store\";\n\nimport \"./App.scss\";\n\nexport const App: FC = () => {\n  return (\n    <Provider store={store}>\n      <Router basename={urls.baseUrl}>\n        <Routing />\n      </Router>\n    </Provider>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"page\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/phone-icon.887e391a.svg\";","module.exports = __webpack_public_path__ + \"static/media/mail-icon.e3c53929.svg\";","module.exports = __webpack_public_path__ + \"static/media/vertical_line.9e2832b1.svg\";","module.exports = __webpack_public_path__ + \"static/media/notification-icon.14235d44.svg\";","module.exports = __webpack_public_path__ + \"static/media/user-avatar.3a8d3a0a.svg\";","module.exports = __webpack_public_path__ + \"static/media/user-card.4f990247.svg\";"],"sourceRoot":""}
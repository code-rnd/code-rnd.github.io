{"version":3,"sources":["assets/user-icons/phone-icon.svg","assets/user-icons/mail-icon.svg","assets/header-menu/vertical_line.svg","assets/notification-icons/notification-icon.svg","assets/user-icons/user-avatar.svg","assets/button-icons/add-contact-icon.svg","assets/button-icons/archive-icon.svg","assets/user-icons/user-card.svg","assets/button-icons/edit-icon.svg","assets/button-icons/exit-icon.svg","serviceWorker.ts","app/routing/routing.enums.ts","app/shared/components/Button/model/ButtonProps.model.ts","app/store/authorization/authorization.selectors.ts","app/store/notifications/notifications.actions.ts","app/store/notifications/notifications.reducer.ts","app/store/notifications/notifications.selector.ts","app/shared/components/UserBlock/UserBlock.const.ts","app/shared/components/Button/Button.tsx","app/shared/components/Modal/Modal.tsx","app/routing/components/RoutingModal/RoutingModal.tsx","app/shared/components/Body/Body.tsx","app/pages/NotFound/NotFound.tsx","app/store/route/route.selector.ts","app/store/history/history.model.ts","app/store/route/route.actions.ts","app/store/route/route.reducer.ts","app/store/authorization/authorization.model.ts","app/store/history/history.actions.ts","app/store/history/history.reducer.ts","app/store/history/history.utils.ts","app/store/history/history.selectors.ts","app/shared/components/Notification/Notification.tsx","app/shared/components/BreadСrumbs/BreadСrumbs.tsx","app/store/authorization/authorization.utils.ts","app/store/parcel/parcel.model.ts","app/http/api.const.ts","app/http/apit.ts","app/http/api.utils.ts","app/store/authorization/authorization.actions.ts","app/mock/mocks.ts","app/shared/constants/date.const.ts","app/store/authorization/authorization.reducer.ts","app/shared/components/UserBlock/UserBlock.tsx","app/shared/components/UserBlock/UserBlock.utils.ts","app/shared/components/Header/Header.tsx","app/shared/components/Fields/FieldBlock/FieldBlock.tsx","app/shared/components/Fields/InputText/InputText.tsx","app/pages/Authorization/Authorization.tsx","app/store/pagecontrol/pagecontrol.actions.ts","app/store/pagecontrol/pagecontrol.utils.ts","app/store/pagecontrol/pagecontrol.reducer.ts","app/store/pagecontrol/pagecontrol.selector.ts","app/shared/components/HeadingPage/HeadingPage.tsx","app/shared/components/BodyPage/BodyPage.tsx","app/shared/components/Fields/CheckBox/CheckBox.tsx","app/store/contacts/contacts.utils.ts","app/store/contacts/contacts.actions.ts","app/shared/utils/service.util.ts","app/store/contacts/contacts.reducer.ts","app/store/contacts/contacts.selector.ts","app/shared/constants/input.pattern.ts","app/pages/Contacts/components/ContactsModal/ContactsModal.tsx","app/pages/Contacts/components/MenuSetting/MenuSetting.tsx","app/pages/Contacts/components/TableContacts/TableContacts.tsx","app/pages/Contacts/Contacts.tsx","app/pages/History/components/TableHistory/TableHistory.tsx","app/pages/History/History.tsx","app/store/parcel/parcel.actions.ts","app/store/parcel/parcel.reducer.ts","app/store/parcel/parcel.selector.ts","app/pages/Parcels/components/TableParcels/components/TableParcelStatusFlow/TableParcelStatusFlow.tsx","app/pages/Parcels/components/TableParcels/components/TableParcelItem/TableParcelItem.tsx","app/pages/Parcels/components/TableParcels/TableParcels.tsx","app/pages/Parcels/Parcels.tsx","app/routing/routing.const.tsx","app/pages/Home/Home.utils.ts","app/pages/Home/components/EditFormHome/EditFormHome.tsx","app/pages/Home/components/TableHome/TableHome.utils.ts","app/pages/Home/components/TableHome/TableHome.tsx","app/pages/Home/Home.tsx","app/routing/routing.tsx","app/store/reducers/index.ts","app/store/middlewares/index.ts","app/store/index.ts","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","RouteUrls","Page","urls","BUTTON_SIZE","BUTTON_TYPE","getAuthorization","state","authorization","notificationsActions","prefix","SET_CONTENT","this","SET_SHOW","setContent","createAction","setShow","updateContent","message","dispatch","a","e","console","log","reducerMap","action","content","payload","isShow","notificationsReducer","handleActions","error","getNotifications","notifications","SIZE_VERSION","Button","memo","onClick","title","type","className","disable","visible","loading","style","size","icon","styledSize","useMemo","NORMAL","width","cn","button__success","SUCCESS","button__default","DEFAULT","button__normal","button__error","ERROR","button__disabled","button__visible","button__loading","paddingRight","Modal","modalClosed","cbCancel","cancelTitle","cbOk","okTitle","children","backDrop","event","stopPropagation","RoutingModal","useSelector","useDispatch","handleClosed","useCallback","Body","isLoading","NotFound","getRoute","route","ACTION_HISTORY","routeActions","SET_CURRENT_ROUTE","setCurrentRoute","initialState","HOME","routeReducer","ACTION_LOGIN","historyActions","SET_LOADING","SET_UPDATE_HISTORY","setLoading","setUpdateHistory","updateHistory","getState","user","name","firstName","newList","list","lastId","length","secondName","email","phone","date","Date","id","prepareHistory","lastItem","historyReducer","getHistory","history","Notification","useState","isShowToolTip","setShowToolTip","classesToolTip","classesOvalshape","EDIT_CONTACT","LOGIN","LOGIN_OUT","ADD_CONTACT","UPDATE_USER_INFO","ARCHIVE_CONTACT","src","notification_icon","alt","BreadСrumbs","currentRoute","CONTACTS","HISTORY","PARCELS","ParcelStatusFlow","prepareAction","prepareUser","instance","axios","create","baseURL","Authorization","Promise","resolve","reject","min","max","config","request","then","response","catch","url","data","headers","Math","random","method","authorizationActions","SET_LOGIN","SET_UPDATE_USER","setLogin","setUpdateUser","updateLogin","login","updateUserInfo","timer","setTimeout","DATE_FORMAT","AuthorizationMock","MockParcel","sender","recipient","departureDate","typeOfCargo","weight","currentStatus","CUSTOMS_CLEARANCE_COMPLETED","historyStatuses","status","DELIVERY_TO_THE_ADDRESSEE","CAME_TO_THE_PLACE_OF_DELIVERY","ARRIVED_AT_THE_CITY_SORTING_CENTER","LEFT_SORTING_CENTER","ARRIVED_AT_THE_SORTING_CENTER","RETAINED_BY_CUSTOMS","TRANSFERRED_TO_CUSTOMS","IMPORT","EXPORT","ARRIVAL_IN_MMPO","RECEPTION","authorizationReducer","UserBlock","version","classBlock","cx","LOW","titleContent","slice","getAbbreviatedName","MEDIUM","getFullName","usericon","Header","useHistory","handleClick","useEffect","push","verticalline","button__active","FieldBlock","FieldText","placeholder","register","errors","pattern","validate","props","classInput","fieldText__disable","classErrors","fieldText__visible","ref","required","useForm","handleSubmit","onSubmit","values","margin","pageControlActions","SET_CONTROL","setControl","updateControl","current","pagecontrolReducer","home","contacts","parcels","getPageControl","pagecontrol","HeadingPage","buttonContent","BodyPage","FieldCheckBox","ApiUpdateContacts","contact","lengthList","resultList","map","item","contactsActions","SET_UPDATE_CONTACTS","SET_REMOVE_CONTACT","setRemoveContact","setUpdateContacts","updateContacts","removeContact","isArchive","contactsReducer","getContacts","PATTERNS","EMAIL","ContactsModal","initialValues","defaultValues","prepareItem","value","MenuSetting","isShowModal","setShowModal","archiveButtonTitle","TableContacts","archiveMode","classNameCol","key","Contacts","isShowTable","setShowTable","isArchiveMode","setArchiveMode","titleHeadingPage","archive_icon","add_contact_icon","TableHistory","moment","format","DB","History","buttonTitle","parcelActions","SET_PARCEL","setParcel","updateParcel","obj","PARCEL_UPDATE","parcelReducer","getParcel","parcel","TableParcelStatusFlow","isShowStatusFlow","classesHistoryStatuses","classesStatus","contentDate","contentCheckPoint","TableParcelItem","isShowAll","setShowStatusFlow","titleButton","classesItem","DDMMYYYY","TableParcels","setShowAll","Parcels","Routes","component","path","exact","prepareGet","EditFormHome","closedForm","disaptch","usercardicon","mailicon","phoneicon","res","split","prepareSet","infoContent","string","TableHome","mail","Home","isEditMode","setEditMode","handleLogOut","edit_icon","exit_icon","Routing","isLogin","reducers","combineReducers","middlewares","composeWithDevTools","applyMiddleware","next","Function","store","createStore","App","basename","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9f3b398.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/phone-icon.887e391a.svg\";","module.exports = __webpack_public_path__ + \"static/media/mail-icon.e3c53929.svg\";","module.exports = __webpack_public_path__ + \"static/media/vertical_line.9e2832b1.svg\";","module.exports = __webpack_public_path__ + \"static/media/notification-icon.14235d44.svg\";","module.exports = __webpack_public_path__ + \"static/media/user-avatar.3a8d3a0a.svg\";","module.exports = __webpack_public_path__ + \"static/media/add-contact-icon.86da14a9.svg\";","module.exports = __webpack_public_path__ + \"static/media/archive-icon.ce6e053d.svg\";","module.exports = __webpack_public_path__ + \"static/media/user-card.4f990247.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit-icon.1021490e.svg\";","module.exports = __webpack_public_path__ + \"static/media/exit-icon.9513d88d.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum RouteUrls {\n  HOME = \"/\",\n  HISTORY = \"/history\",\n  CONTACTS = \"/contacts\",\n  PARCELS = \"/parcels\",\n  LOGIN = \"/login\",\n}\n\nexport const urls = {\n  baseUrl: \"/\",\n};\n\nexport enum Page {\n  HOME = \"Главная\",\n  HISTORY = \"История\",\n  CONTACTS = \"Контакты\",\n  PARCELS = \"Посылки\",\n}\n","export interface ButtonPropsModel {\n  type: BUTTON_TYPE;\n  onClick: () => void;\n  disable?: boolean;\n  visible?: boolean;\n  title: string;\n  loading?: boolean;\n  className?: string;\n  style?: any;\n  size?: BUTTON_SIZE;\n  icon?: any;\n}\n\nexport enum BUTTON_SIZE {\n  LITTLE = \"LITTLE\",\n  NORMAL = \"NORMAL\",\n  BIG = \"BIG\",\n}\n\nexport enum BUTTON_TYPE {\n  DEFAULT = \"DEFAULT\",\n  SUCCESS = \"SUCCESS\",\n  ERROR = \"ERROR\",\n  NORMAL = \"NORMAL\",\n}\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getAuthorization = (state: StoreModel) => state.authorization;\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\nimport { Dispatch } from \"redux\";\n\nclass NotificationsActions {\n  readonly prefix: string = \"NOTIFICATION\";\n  readonly SET_CONTENT: string = `${this.prefix}.SET_CONTENT`;\n  readonly SET_SHOW: string = `${this.prefix}.SET_SHOW`;\n\n  setContent: ActionFunction1<any, Action<any>> = createAction(\n    this.SET_CONTENT\n  );\n  setShow: ActionFunction1<boolean, Action<boolean>> = createAction(\n    this.SET_SHOW\n  );\n\n  updateContent: any = (message: string) => async (dispatch: Dispatch) => {\n    try {\n      dispatch(this.setContent(message));\n      dispatch(this.setShow(true));\n    } catch (e) {\n      console.log(\"Ошибка в методе updateContent: \", e);\n    }\n  };\n}\n\nexport const notificationsActions = new NotificationsActions();\n","import { Action, handleActions } from \"redux-actions\";\nimport { notificationsActions } from \"./notifications.actions\";\nimport { NotificationsModel } from \"./notifications.model\";\n\nexport const initialState: NotificationsModel = {\n  content: \"\",\n  isShow: false,\n  error: \"\",\n};\n\nconst setShow = (\n  state: NotificationsModel,\n  action: Action<boolean>\n): NotificationsModel => ({\n  ...state,\n  isShow: action.payload,\n});\n\nconst setContent = (\n  state: NotificationsModel,\n  action: Action<string>\n): NotificationsModel => ({\n  ...state,\n  content: action.payload,\n});\n\nconst reducerMap: { [key: string]: any } = {\n  [notificationsActions.SET_CONTENT]: setContent,\n  [notificationsActions.SET_SHOW]: setShow,\n};\n\nexport const notificationsReducer = handleActions(reducerMap, initialState);\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getNotifications = (state: StoreModel) => state.notifications;\n","export enum SIZE_VERSION {\n  MEDIUM = \"MEDIUM\",\n  LOW = \"LOW\",\n}\n","import React, { FC, memo, useMemo } from \"react\";\nimport cn from \"classnames\";\n\nimport {\n  BUTTON_SIZE,\n  BUTTON_TYPE,\n  ButtonPropsModel,\n} from \"./model/ButtonProps.model\";\n\nimport \"./Button.scss\";\n\nexport const Button: FC<ButtonPropsModel> = memo(\n  ({\n    onClick,\n    title,\n    type,\n    className,\n    disable,\n    visible,\n    loading,\n    style,\n    size,\n    icon,\n  }) => {\n    const styledSize = useMemo(() => {\n      switch (size) {\n        case BUTTON_SIZE.NORMAL:\n          return { width: \"212px\" };\n        default:\n          return {};\n      }\n    }, [size]);\n\n    return (\n      <>\n        <div\n          className={cn([\n            \"button\",\n            className,\n            { button__success: type === BUTTON_TYPE.SUCCESS },\n            { button__default: type === BUTTON_TYPE.DEFAULT },\n            { button__normal: type === BUTTON_TYPE.NORMAL },\n            { button__error: type === BUTTON_TYPE.ERROR },\n            { button__disabled: disable },\n            { button__visible: visible },\n            { button__loading: loading },\n          ])}\n          onClick={onClick}\n          style={{ ...style, ...styledSize }}\n        >\n          <span\n            className=\"button-title\"\n            style={{ paddingRight: icon ? \"10px\" : \"\" }}\n          >\n            {title}\n          </span>\n          {icon && icon}\n          {loading && <div className=\"spinner\" />}\n        </div>\n      </>\n    );\n  }\n);\n","import React, { FC, memo } from \"react\";\n\nimport { BUTTON_TYPE } from \"../Button/model/ButtonProps.model\";\nimport { ModalModel } from \"./model/Modal.model\";\nimport { Button } from \"../Button\";\n\nimport \"./Modal.scss\";\n\nexport const Modal: FC<ModalModel> = memo(\n  ({\n    modalClosed,\n    title,\n    cbCancel,\n    cancelTitle = \"Cancel\",\n    cbOk,\n    okTitle = \"Ok\",\n    children,\n    backDrop = false,\n  }) => {\n    const handlClick = () => {\n      backDrop && modalClosed && modalClosed();\n    };\n\n    const handleSubmit = () => {\n      cbOk && cbOk();\n    };\n\n    const handleCancel = () => {\n      cbCancel && cbCancel();\n    };\n\n    return (\n      <div className=\"modal-backdrop\" onClick={handlClick}>\n        <div\n          className=\"modal-window\"\n          onClick={(event) => event.stopPropagation()}\n        >\n          <div className=\"modal-window-title\">{title}</div>\n          <div className=\"modal-window-body\">{children}</div>\n          <div className=\"modal-window-footer\">\n            {!!cbOk && !!okTitle && (\n              <Button\n                type={BUTTON_TYPE.SUCCESS}\n                onClick={handleSubmit}\n                title={okTitle}\n              />\n            )}\n            {!!cbCancel && !!cancelTitle && (\n              <Button\n                type={BUTTON_TYPE.ERROR}\n                onClick={handleCancel}\n                title={cancelTitle}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n","import React, { FC, memo, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  getNotifications,\n  notificationsActions,\n} from \"../../../store/notifications\";\nimport { Modal } from \"../../../shared/components/Modal\";\n\nimport \"./RoutingModal.scss\";\n\nexport const RoutingModal: FC = memo(() => {\n  const { content, isShow } = useSelector(getNotifications);\n  const dispatch = useDispatch();\n\n  const handleClosed = useCallback(() => {\n    dispatch(notificationsActions.setShow(false));\n  }, [dispatch]);\n\n  return (\n    <>\n      {isShow && (\n        <Modal\n          modalClosed={handleClosed}\n          title={\"\"}\n          cbOk={handleClosed}\n          okTitle=\"Хорошо\"\n        >\n          {content}\n        </Modal>\n      )}\n    </>\n  );\n});\n","import React, { FC, memo } from \"react\";\nimport cn from \"classnames\";\n\nimport { BodyModel } from \"./model/Body.model\";\n\nimport \"./Body.scss\";\n\nexport const Body: FC<BodyModel> = memo(({ isLoading, children }) => {\n  return (\n    <div className=\"page-body\">\n      <div className={cn({ \"page-body-loader\": isLoading })}>{children}</div>\n    </div>\n  );\n});\n","import React, { FC, memo } from \"react\";\n\nimport { Body } from \"../../shared/components/Body\";\n\nexport const NotFound: FC = memo(() => {\n  return <Body>404 Not found</Body>;\n});\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getRoute = (state: StoreModel) => state.route;\n","export enum ACTION_HISTORY {\n  EDIT_CONTACT = \"Редактирование контакта\",\n  ADD_CONTACT = \"Добавление контакта\",\n  ARCHIVE_CONTACT = \"Архивирование контакта\",\n\n  LOGIN = \"Вход\",\n  LOGIN_OUT = \"Выход\",\n\n  UPDATE_USER_INFO = \"Редактирование информации о пользователя\",\n\n  PARCEL_UPDATE = \"Данные о посылке обновлены\",\n}\n\nexport interface HistoryModelState {\n  list: HistoryItemModel[];\n  lastItem: HistoryItemModel;\n  isLoading: boolean;\n  error: string;\n}\n\nexport interface UserInfoModel {\n  name: {\n    firstName: string;\n    secondName: string;\n  };\n  email: string;\n  phone: string;\n}\n\nexport interface HistoryItemModel {\n  user: UserInfoModel;\n  date: Date;\n  action: ACTION_HISTORY;\n  id: number;\n}\n\nexport interface ActionUpdateHistory {\n  user: string;\n  action: ACTION_HISTORY;\n}\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\n\nclass Route {\n  readonly prefix: string = \"ROUTE\";\n  readonly SET_CURRENT_ROUTE: string = \"SET_CURRENT_ROUTE\";\n\n  setCurrentRoute: ActionFunction1<string, Action<string>> = createAction(\n    this.SET_CURRENT_ROUTE\n  );\n}\n\nexport const routeActions = new Route();\n","import { Action, handleActions } from \"redux-actions\";\nimport { RouteUrls } from \"../../routing/routing.enums\";\nimport { RouteStateModel } from \"./route.model\";\nimport { routeActions } from \"./route.actions\";\n\nconst initialState: RouteStateModel = {\n  route: RouteUrls.HOME,\n};\n\nconst setCurrentRoute = (\n  state: RouteStateModel,\n  action: Action<RouteUrls>\n): RouteStateModel => ({\n  ...state,\n  route: action.payload,\n});\n\nconst reducerMap: { [key: string]: any } = {\n  [routeActions.SET_CURRENT_ROUTE]: setCurrentRoute,\n};\n\nexport const routeReducer = handleActions(reducerMap, initialState);\n","import { UserInfoModel } from \"../history/history.model\";\n\nexport interface AuthorizationModel {\n  name: string;\n  date: Date;\n  action: ACTION_LOGIN;\n}\n\nexport interface AuthorizationStateModel {\n  user: UserInfoModel;\n  date: Date;\n  isLoading: boolean;\n  error: \"\";\n}\n\nexport enum ACTION_LOGIN {\n  LOGIN = \"LOGIN\",\n  LOGIN_OUT = \"LOGIN_OUT\",\n}\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\nimport { Dispatch } from \"redux\";\nimport { ACTION_HISTORY, ActionUpdateHistory } from \"./history.model\";\nimport { StoreModel } from \"../model/store.model\";\n\nclass HistoryActions {\n  readonly prefix: string = \"HISTORY\";\n  readonly SET_LOADING: string = `${this.prefix}.SET_LOADING`;\n  readonly SET_UPDATE_HISTORY: string = `${this.prefix}.SET_UPDATE_HISTORY`;\n\n  setLoading: ActionFunction1<boolean, Action<boolean>> = createAction(\n    this.SET_LOADING\n  );\n  setUpdateHistory: ActionFunction1<\n    ActionUpdateHistory,\n    Action<ActionUpdateHistory>\n  > = createAction(this.SET_UPDATE_HISTORY);\n\n  updateHistory: any = (action: ACTION_HISTORY) => async (\n    dispatch: Dispatch,\n    getState: () => StoreModel\n  ) => {\n    const { user } = getState().authorization;\n    dispatch(this.setLoading(true));\n    try {\n      dispatch(this.setUpdateHistory({ user: user.name.firstName, action }));\n      dispatch(this.setLoading(false));\n    } catch (e) {\n      console.log(\"Ошибка в методе updateHistory: \", e);\n      dispatch(this.setLoading(false));\n    }\n  };\n}\n\nexport const historyActions = new HistoryActions();\n","import { Action, handleActions } from \"redux-actions\";\n\nimport { ACTION_HISTORY, HistoryModelState } from \"./history.model\";\nimport { historyActions } from \"./history.actions\";\nimport { prepareHistory } from \"./history.utils\";\n\nexport const initialState: HistoryModelState = {\n  list: [],\n  lastItem: {} as any,\n  isLoading: false,\n  error: \"\",\n};\n\nconst setLaoding = (\n  state: HistoryModelState,\n  action: Action<boolean>\n): HistoryModelState => ({\n  ...state,\n  isLoading: action.payload,\n});\n\nconst setUpdateHistory = (\n  state: HistoryModelState,\n  action: Action<{ user: string; action: ACTION_HISTORY }>\n): HistoryModelState => {\n  const newList = prepareHistory(\n    state.list,\n    action.payload.user,\n    action.payload.action\n  );\n\n  return {\n    ...state,\n    list: newList,\n    lastItem: newList[newList.length - 1],\n  };\n};\n\nconst reducerMap: { [key: string]: any } = {\n  [historyActions.SET_LOADING]: setLaoding,\n  [historyActions.SET_UPDATE_HISTORY]: setUpdateHistory,\n};\n\nexport const historyReducer = handleActions(reducerMap, initialState);\n","import { ACTION_HISTORY, HistoryItemModel } from \"./history.model\";\n\nexport const prepareHistory = (\n  list: HistoryItemModel[],\n  user: string,\n  action: ACTION_HISTORY\n): HistoryItemModel[] => {\n  const lastId = list.length;\n\n  return [\n    ...list,\n    {\n      user: {\n        name: {\n          firstName: user,\n          secondName: \"\",\n        },\n        email: \"\",\n        phone: \"\",\n      },\n      action,\n      date: new Date(),\n      id: !!lastId ? lastId + 1 : 1,\n    },\n  ];\n};\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getHistory = (state: StoreModel) => state.history;\n","import React, { FC, memo, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport cn from \"classnames\";\n\nimport notification_icon from \"../../../../assets/notification-icons/notification-icon.svg\";\nimport { ACTION_HISTORY } from \"../../../store/history/history.model\";\nimport { NotificationModel } from \"./model/Notification.model\";\nimport { getHistory } from \"../../../store/history\";\n\nimport \"./Notification.scss\";\n\nexport const Notification: FC<NotificationModel> = memo(() => {\n  const { lastItem } = useSelector(getHistory);\n  const { action } = lastItem;\n\n  const [isShowToolTip, setShowToolTip] = useState(false);\n\n  const handleClick = () => {\n    setShowToolTip(!isShowToolTip);\n  };\n\n  const classesToolTip = useMemo(\n    () =>\n      cn(\"notification-tooltip\", {\n        \"notification-tooltip__hidden\": !isShowToolTip,\n      }),\n    [isShowToolTip]\n  );\n\n  const classesOvalshape = useMemo(\n    () =>\n      cn([\n        \"notification-ovalshape\",\n        {\n          \"notification-ovalshape__success\":\n            action === ACTION_HISTORY.EDIT_CONTACT ||\n            action === ACTION_HISTORY.LOGIN ||\n            action === ACTION_HISTORY.LOGIN_OUT ||\n            action === ACTION_HISTORY.ADD_CONTACT ||\n            action === ACTION_HISTORY.UPDATE_USER_INFO,\n        },\n        {\n          \"notification-ovalshape__warning\":\n            action === ACTION_HISTORY.ARCHIVE_CONTACT\n        },\n      ]),\n    [action]\n  );\n\n  return (\n    <div className=\"notification\" onClick={handleClick}>\n      <img src={notification_icon} alt=\"изображение колокольчика\" />\n      <div className={classesOvalshape} />\n      <div className={classesToolTip}>история: {action}</div>\n    </div>\n  );\n});\n","import React, { FC, memo, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { Page, RouteUrls } from \"../../../routing/routing.enums\";\nimport { getRoute } from \"../../../store/route/route.selector\";\n\nimport \"./BreadСrumbs.scss\";\n\nexport const BreadСrumbs: FC = memo(() => {\n  const { route } = useSelector(getRoute);\n\n  const currentRoute = useMemo(() => {\n    switch (route) {\n      case RouteUrls.CONTACTS:\n        return Page.CONTACTS;\n\n      case RouteUrls.HISTORY:\n        return Page.HISTORY;\n\n      case RouteUrls.HOME:\n        return Page.HISTORY;\n\n      case RouteUrls.PARCELS:\n        return Page.PARCELS;\n\n      default:\n        return Page.HOME;\n    }\n  }, [route]);\n\n  return (\n    <div className=\"bread-crumbs\">\n      <div className=\"bread-crumbs-header\">{currentRoute}</div>\n      <div className=\"bread-crumbs-body\">\n        Главная{route !== RouteUrls.HOME ? ` / ${currentRoute}` : ``}\n      </div>\n    </div>\n  );\n});\n","import { ACTION_LOGIN } from \"./authorization.model\";\nimport { ACTION_HISTORY } from \"../history/history.model\";\n\nexport const prepareAction = (action: ACTION_LOGIN) => {\n  return action === ACTION_LOGIN.LOGIN\n    ? ACTION_HISTORY.LOGIN\n    : ACTION_HISTORY.LOGIN_OUT;\n};\n\nexport const prepareUser = (user: string, action: ACTION_LOGIN) => {\n  return action === ACTION_LOGIN.LOGIN ? user : \"\";\n};\n","export interface ParcelHistoryStatuses {\n  status: ParcelStatusFlow;\n  date: Date | null;\n}\n\nexport interface ParcelModel {\n  id: number;\n  sender: string;\n  recipient: string;\n  typeOfCargo: string;\n  departureDate: Date;\n  weight: number;\n  currentStatus: ParcelStatusFlow;\n  historyStatuses: ParcelHistoryStatuses[];\n}\n\nexport interface ParcelsStateModel {\n  list: ParcelModel[];\n  isLoading: boolean;\n  error: string;\n}\n\nexport enum ParcelStatusFlow {\n  RECEPTION = \"Прием\",\n  ARRIVAL_IN_MMPO = \"Прибытие в ММПО\",\n  EXPORT = \"Экспорт\",\n  IMPORT = \"Импорт\",\n  TRANSFERRED_TO_CUSTOMS = \"Передано таможне\",\n  RETAINED_BY_CUSTOMS = \"Задержано таможней\",\n  CUSTOMS_CLEARANCE_COMPLETED = \"Таможенное оформ. завершено\",\n  ARRIVED_AT_THE_SORTING_CENTER = \"Прибыло в сорт. центр\",\n  LEFT_SORTING_CENTER = \"Покинуло сорт. центр\",\n  ARRIVED_AT_THE_CITY_SORTING_CENTER = \"Прибыло в сорт. центр города\",\n  CAME_TO_THE_PLACE_OF_DELIVERY = \"Прибыло в место вручения\",\n  DELIVERY_TO_THE_ADDRESSEE = \"Вручен\",\n}\n","import axios from \"axios\";\n\nexport const BASE_URL = \"http://jsonplaceholder.typicode.com/\";\n\nexport const instance = axios.create({\n  baseURL: BASE_URL,\n});\n","import { RequestConfigModel } from \"./api.model\";\nimport { getRandomArbitrary } from \"./api.utils\";\nimport { instance } from \"./api.const\";\n\nexport const axios = (\n  config: RequestConfigModel,\n  resolve: any,\n  reject: any\n): Promise<any> => {\n  return instance\n    .request(config)\n    .then((response) => resolve(response))\n    .catch((error) => reject(error));\n};\n\nexport class Authorization {\n  static login(user: string): Promise<{ data: any }> {\n    const url = \"posts\";\n\n    return new Promise((resolve, reject) => {\n      axios(\n        {\n          url: url,\n          data: { name: user },\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-token-access\": getRandomArbitrary(10, 10000),\n          },\n          method: \"POST\",\n        },\n        resolve,\n        reject\n      );\n    });\n  }\n}\n","export const getRandomArbitrary = (min: number, max: number) => {\n  return Math.random() * (max - min) + min;\n};\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\nimport { Dispatch } from \"redux\";\n\nimport { ACTION_LOGIN, AuthorizationModel } from \"./authorization.model\";\nimport { ACTION_HISTORY, UserInfoModel } from \"../history/history.model\";\nimport { prepareAction, prepareUser } from \"./authorization.utils\";\nimport { historyActions } from \"../history/history.actions\";\nimport { notificationsActions } from \"../notifications\";\nimport { Authorization } from \"../../http/apit\";\n\nclass AuthorizationActions {\n  readonly prefix: string = \"AUTHORIZATION\";\n  readonly SET_LOADING: string = `${this.prefix}.SET_LOADING`;\n  readonly SET_LOGIN: string = `${this.prefix}.SET_LOGIN`;\n  readonly SET_UPDATE_USER: string = `${this.prefix}.SET_UPDATE_USER`;\n\n  setLoading: ActionFunction1<boolean, Action<boolean>> = createAction(\n    this.SET_LOADING\n  );\n  setLogin: ActionFunction1<\n    AuthorizationModel,\n    Action<AuthorizationModel>\n  > = createAction(this.SET_LOGIN);\n  setUpdateUser: ActionFunction1<\n    UserInfoModel,\n    Action<UserInfoModel>\n  > = createAction(this.SET_UPDATE_USER);\n\n  updateLogin: any = (name: string, action: ACTION_LOGIN) => async (\n    dispatch: Dispatch\n  ) => {\n    dispatch(this.setLoading(true));\n    try {\n      const { data } = await Authorization.login(name);\n\n      dispatch(\n        this.setLogin({\n          name: prepareUser(data.name, action),\n          date: new Date(),\n          action,\n        })\n      );\n      dispatch(historyActions.updateHistory(prepareAction(action)));\n      dispatch(this.setLoading(false));\n    } catch (e) {\n      console.log(\"Ошибка в методе updateLogin: \", e);\n      dispatch(notificationsActions.updateContent(\"Авторизация не прошла\"));\n      dispatch(this.setLoading(false));\n    }\n  };\n\n  updateUserInfo: any = (user: UserInfoModel) => async (dispatch: Dispatch) => {\n    dispatch(this.setLoading(true));\n    try {\n      const timer = setTimeout(() => {\n        dispatch(this.setUpdateUser(user));\n        dispatch(\n          notificationsActions.updateContent(\"Данные успешно сохранены\")\n        );\n        dispatch(historyActions.updateHistory(ACTION_HISTORY.UPDATE_USER_INFO));\n        dispatch(this.setLoading(false));\n      }, 1500);\n      return timer;\n    } catch (e) {\n      console.log(\"Ошибка в методе updateUserInfo: \", e);\n      dispatch(\n        notificationsActions.updateContent(\"При сохранении произошла ошибка\")\n      );\n      dispatch(this.setLoading(false));\n    }\n  };\n}\n\nexport const authorizationActions = new AuthorizationActions();\n","import { ContactModel } from \"../pages/Contacts/components/TableContacts/model/TableContacts.model\";\nimport {\n  ACTION_HISTORY,\n  HistoryItemModel,\n} from \"../store/history/history.model\";\nimport { ParcelModel, ParcelStatusFlow } from \"../store/parcel/parcel.model\";\n\nexport const AuthorizationMock: HistoryItemModel = {\n  action: ACTION_HISTORY.LOGIN,\n  id: 1,\n  date: new Date(),\n  user: {\n    name: {\n      firstName: \"\",\n      secondName: \"\",\n    },\n    email: \"\",\n    phone: \"\",\n  },\n};\n\nexport const MockTableContacts: ContactModel[] = [\n  {\n    id: 1,\n    name: \"Иван\",\n    email: \"ivan@mail.ru\",\n    phone: \"8-908-878-06-06\",\n    isArchive: false,\n  },\n  {\n    id: 2,\n    name: \"Петр\",\n    email: \"petr@mail.ru\",\n    phone: \"8-998-878-06-11\",\n    isArchive: true,\n  },\n  {\n    id: 3,\n    name: \"Максим\",\n    email: \"max@mail.ru\",\n    phone: \"8-908-878-06-06\",\n    isArchive: false,\n  },\n  {\n    id: 4,\n    name: \"Семен\",\n    email: \"semen@mail.ru\",\n    phone: \"8-908-878-06-06\",\n    isArchive: false,\n  },\n  {\n    id: 5,\n    name: \"Валентин\",\n    email: \"valentin@mail.ru\",\n    phone: \"8-908-878-06-06\",\n    isArchive: false,\n  },\n  {\n    id: 6,\n    name: \"Филип\",\n    email: \"philip@mail.ru\",\n    phone: \"8-908-878-06-06\",\n    isArchive: false,\n  },\n];\n\nexport const MockParcel: ParcelModel[] = [\n  {\n    id: 1,\n    sender: \"Иванов И.П\",\n    recipient: \"Петрова В.Н\",\n    departureDate: new Date(),\n    typeOfCargo: \"Хрупкий\",\n    weight: 125,\n    currentStatus: ParcelStatusFlow.CUSTOMS_CLEARANCE_COMPLETED,\n    historyStatuses: [\n      {\n        status: ParcelStatusFlow.DELIVERY_TO_THE_ADDRESSEE,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.CAME_TO_THE_PLACE_OF_DELIVERY,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.ARRIVED_AT_THE_CITY_SORTING_CENTER,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.LEFT_SORTING_CENTER,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.ARRIVED_AT_THE_SORTING_CENTER,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.CUSTOMS_CLEARANCE_COMPLETED,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.RETAINED_BY_CUSTOMS,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.TRANSFERRED_TO_CUSTOMS,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.IMPORT,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.EXPORT,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.ARRIVAL_IN_MMPO,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.RECEPTION,\n        date: new Date(),\n      },\n    ],\n  },\n  {\n    id: 2,\n    sender: \"Васильев А.Н\",\n    recipient: \"Хохлов П.И\",\n    departureDate: new Date(),\n    typeOfCargo: \"Твердый\",\n    weight: 15,\n    currentStatus: ParcelStatusFlow.DELIVERY_TO_THE_ADDRESSEE,\n    historyStatuses: [\n      {\n        status: ParcelStatusFlow.DELIVERY_TO_THE_ADDRESSEE,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.CAME_TO_THE_PLACE_OF_DELIVERY,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.ARRIVED_AT_THE_CITY_SORTING_CENTER,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.LEFT_SORTING_CENTER,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.ARRIVED_AT_THE_SORTING_CENTER,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.CUSTOMS_CLEARANCE_COMPLETED,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.RETAINED_BY_CUSTOMS,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.TRANSFERRED_TO_CUSTOMS,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.IMPORT,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.EXPORT,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.ARRIVAL_IN_MMPO,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.RECEPTION,\n        date: new Date(),\n      },\n    ],\n  },\n  {\n    id: 3,\n    sender: \"Игнатьев Р.В\",\n    recipient: \"Сухарев К.К\",\n    departureDate: new Date(),\n    typeOfCargo: \"Хрупкий\",\n    weight: 66,\n    currentStatus: ParcelStatusFlow.EXPORT,\n    historyStatuses: [\n      {\n        status: ParcelStatusFlow.DELIVERY_TO_THE_ADDRESSEE,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.CAME_TO_THE_PLACE_OF_DELIVERY,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.ARRIVED_AT_THE_CITY_SORTING_CENTER,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.LEFT_SORTING_CENTER,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.ARRIVED_AT_THE_SORTING_CENTER,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.CUSTOMS_CLEARANCE_COMPLETED,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.RETAINED_BY_CUSTOMS,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.TRANSFERRED_TO_CUSTOMS,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.IMPORT,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.EXPORT,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.ARRIVAL_IN_MMPO,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.RECEPTION,\n        date: new Date(),\n      },\n    ],\n  },\n  {\n    id: 4,\n    sender: \"Иванов И.П\",\n    recipient: \"Петрова В.Н\",\n    departureDate: new Date(),\n    typeOfCargo: \"Хрупкий\",\n    weight: 125,\n    currentStatus: ParcelStatusFlow.DELIVERY_TO_THE_ADDRESSEE,\n    historyStatuses: [\n      {\n        status: ParcelStatusFlow.DELIVERY_TO_THE_ADDRESSEE,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.CAME_TO_THE_PLACE_OF_DELIVERY,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.ARRIVED_AT_THE_CITY_SORTING_CENTER,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.LEFT_SORTING_CENTER,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.ARRIVED_AT_THE_SORTING_CENTER,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.CUSTOMS_CLEARANCE_COMPLETED,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.RETAINED_BY_CUSTOMS,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.TRANSFERRED_TO_CUSTOMS,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.IMPORT,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.EXPORT,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.ARRIVAL_IN_MMPO,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.RECEPTION,\n        date: new Date(),\n      },\n    ],\n  },\n  {\n    id: 5,\n    sender: \"Васильев А.Н\",\n    recipient: \"Хохлов П.И\",\n    departureDate: new Date(),\n    typeOfCargo: \"Твердый\",\n    weight: 15,\n    currentStatus: ParcelStatusFlow.CUSTOMS_CLEARANCE_COMPLETED,\n    historyStatuses: [\n      {\n        status: ParcelStatusFlow.DELIVERY_TO_THE_ADDRESSEE,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.CAME_TO_THE_PLACE_OF_DELIVERY,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.ARRIVED_AT_THE_CITY_SORTING_CENTER,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.LEFT_SORTING_CENTER,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.ARRIVED_AT_THE_SORTING_CENTER,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.CUSTOMS_CLEARANCE_COMPLETED,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.RETAINED_BY_CUSTOMS,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.TRANSFERRED_TO_CUSTOMS,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.IMPORT,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.EXPORT,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.ARRIVAL_IN_MMPO,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.RECEPTION,\n        date: new Date(),\n      },\n    ],\n  },\n  {\n    id: 6,\n    sender: \"Игнатьев Р.В\",\n    recipient: \"Сухарев К.К\",\n    departureDate: new Date(),\n    typeOfCargo: \"Хрупкий\",\n    weight: 66,\n    currentStatus: ParcelStatusFlow.IMPORT,\n    historyStatuses: [\n      {\n        status: ParcelStatusFlow.DELIVERY_TO_THE_ADDRESSEE,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.CAME_TO_THE_PLACE_OF_DELIVERY,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.ARRIVED_AT_THE_CITY_SORTING_CENTER,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.LEFT_SORTING_CENTER,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.ARRIVED_AT_THE_SORTING_CENTER,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.CUSTOMS_CLEARANCE_COMPLETED,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.RETAINED_BY_CUSTOMS,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.TRANSFERRED_TO_CUSTOMS,\n        date: null,\n      },\n      {\n        status: ParcelStatusFlow.IMPORT,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.EXPORT,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.ARRIVAL_IN_MMPO,\n        date: new Date(),\n      },\n      {\n        status: ParcelStatusFlow.RECEPTION,\n        date: new Date(),\n      },\n    ],\n  },\n];\n","export enum DATE_FORMAT {\n  DB = \"DD.MM.YYYY MM:SS\",\n  DDMMYYYY = \"DD.MM.YYYY\",\n}\n","import { Action, handleActions } from \"redux-actions\";\n\nimport {\n  AuthorizationModel,\n  AuthorizationStateModel,\n} from \"./authorization.model\";\nimport { authorizationActions } from \"./authorization.actions\";\nimport { AuthorizationMock } from \"../../mock/mocks\";\nimport { UserInfoModel } from \"../history/history.model\";\n\nexport const initialState: AuthorizationStateModel = {\n  user: AuthorizationMock.user,\n  isLoading: false,\n  date: new Date(),\n  error: \"\",\n};\n\nconst setLaoding = (\n  state: AuthorizationStateModel,\n  action: Action<boolean>\n): AuthorizationStateModel => ({\n  ...state,\n  isLoading: action.payload,\n});\n\nconst setLogin = (\n  state: AuthorizationStateModel,\n  action: Action<AuthorizationModel>\n): AuthorizationStateModel => {\n  return {\n    ...state,\n    user: {\n      name: {\n        firstName: action.payload.name,\n        secondName: \"\",\n      },\n      phone: \"\",\n      email: \"\",\n    },\n    date: action.payload.date,\n  };\n};\n\nconst setUpdateUserInfo = (\n  state: AuthorizationStateModel,\n  action: Action<UserInfoModel>\n): AuthorizationStateModel => ({\n  ...state,\n  user: action.payload,\n});\n\nconst reducerMap: { [key: string]: any } = {\n  [authorizationActions.SET_LOADING]: setLaoding,\n  [authorizationActions.SET_UPDATE_USER]: setUpdateUserInfo,\n  [authorizationActions.SET_LOGIN]: setLogin,\n};\n\nexport const authorizationReducer = handleActions(reducerMap, initialState);\n","import React, { FC, memo, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport cx from \"classnames\";\n\nimport usericon from \"../../../../assets/user-icons/user-avatar.svg\";\nimport { getAbbreviatedName, getFullName } from \"./UserBlock.utils\";\nimport { getAuthorization } from \"../../../store/authorization\";\nimport { UserBlockModel } from \"./model/UserBlock.model\";\nimport { SIZE_VERSION } from \"./UserBlock.const\";\n\nimport \"./UserBlock.scss\";\n\nexport const UserBlock: FC<UserBlockModel> = memo(({ version }) => {\n  const { name } = useSelector(getAuthorization).user;\n\n  const classBlock = useMemo(\n    () =>\n      cx([\"user-block\", { \"user-block__mini\": version === SIZE_VERSION.LOW }]),\n    [version]\n  );\n\n  const titleContent = useMemo(() => {\n    switch (version) {\n      case SIZE_VERSION.LOW:\n        return getAbbreviatedName(name);\n      case SIZE_VERSION.MEDIUM:\n        return getFullName(name);\n\n      default:\n        return \"\";\n    }\n  }, [version, name]);\n\n  return (\n    <div className={classBlock}>\n      <div className=\"user-block-avatar\">\n        <img src={usericon} alt=\"изобржание аватара пользователя\" />\n      </div>\n      <div className=\"user-block-title\">{titleContent}</div>\n    </div>\n  );\n});\n","export const getAbbreviatedName = (name: {\n  firstName: string;\n  secondName: string;\n}) => {\n  if (!name.secondName) {\n    return name.firstName;\n  }\n\n  return `${name.firstName} ${name.secondName.slice(0, 1)}.`;\n};\n\nexport const getFullName = (name: {\n  firstName: string;\n  secondName: string;\n}) => {\n  if (!!name.firstName && !!name.secondName) {\n    return `${name.firstName} ${name.secondName}`;\n  }\n\n  return name.firstName;\n};\n","import React, { FC, memo, useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport cn from \"classnames\";\n\nimport verticalline from \"../../../../assets/header-menu/vertical_line.svg\";\nimport { Page, RouteUrls } from \"../../../routing/routing.enums\";\nimport { BUTTON_TYPE } from \"../Button/model/ButtonProps.model\";\nimport { getRoute } from \"../../../store/route/route.selector\";\nimport { SIZE_VERSION } from \"../UserBlock/UserBlock.const\";\nimport { routeActions } from \"../../../store/route\";\nimport { Notification } from \"../Notification\";\nimport { BreadСrumbs } from \"../BreadСrumbs\";\nimport { UserBlock } from \"../UserBlock\";\nimport { Button } from \"../Button\";\n\nimport \"./Header.scss\";\n\nexport const Header: FC = memo(() => {\n  const { route } = useSelector(getRoute);\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const handleClick = useCallback(\n    (url: RouteUrls) => {\n      dispatch(routeActions.setCurrentRoute(url as RouteUrls));\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    history.push(route);\n  }, [history, route]);\n\n  return (\n    <div className=\"page-header\">\n      <div className=\"page-header-title\">\n        <Notification />\n        <img\n          className=\"page-header-title-verticalline\"\n          src={verticalline}\n          alt=\"белая вертикальная линия\"\n        />\n        <UserBlock version={SIZE_VERSION.LOW} />\n      </div>\n      <div className=\"page-header-navbar\">\n        <BreadСrumbs />\n        <div className=\"flex-end\">\n          <Button\n            type={BUTTON_TYPE.NORMAL}\n            onClick={() => handleClick(RouteUrls.HOME)}\n            title={Page.HOME}\n            className={cn([{ button__active: route === RouteUrls.HOME }])}\n          />\n          <Button\n            type={BUTTON_TYPE.NORMAL}\n            onClick={() => handleClick(RouteUrls.CONTACTS)}\n            title={Page.CONTACTS}\n            className={cn([{ button__active: route === RouteUrls.CONTACTS }])}\n          />\n          <Button\n            type={BUTTON_TYPE.NORMAL}\n            onClick={() => handleClick(RouteUrls.PARCELS)}\n            title={Page.PARCELS}\n            className={cn([{ button__active: route === RouteUrls.PARCELS }])}\n          />\n          <Button\n            type={BUTTON_TYPE.NORMAL}\n            onClick={() => handleClick(RouteUrls.HISTORY)}\n            title={Page.HISTORY}\n            className={cn([{ button__active: route === RouteUrls.HISTORY }])}\n          />\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { FC, memo, useMemo } from \"react\";\n\nimport { FieldBlockModel } from \"./FieldBlock.model\";\n\nimport \"./FieldBlock.scss\";\n\nexport const FieldBlock: FC<FieldBlockModel> = memo(({ icon, children }) => {\n  const content = useMemo(\n    () =>\n      !!icon ? (\n        <>\n          <img src={icon} alt=\"иконка\" />\n          {children}\n        </>\n      ) : (\n        <>{children}</>\n      ),\n    [icon, children]\n  );\n\n  return <div className=\"field-block\">{content}</div>;\n});\n","import React, { FC, memo, useMemo } from \"react\";\nimport cn from \"classnames\";\n\nimport { FieldTextModel } from \"./model/FieldText.model\";\n\nimport \"./InputText.scss\";\n\nexport const FieldText: FC<FieldTextModel> = memo(\n  ({\n    title,\n    name,\n    placeholder,\n    disable,\n    register,\n    errors,\n    pattern,\n    validate,\n    ...props\n  }) => {\n    const classInput = useMemo(\n      () => cn([\"fieldText\", { fieldText__disable: disable }]),\n      [disable]\n    );\n\n    const classErrors = useMemo(\n      () => cn([\"fieldText__errors\", { fieldText__visible: errors?.[name] }]),\n      [errors, name]\n    );\n\n    return (\n      <div className={classInput}>\n        <label className=\"fieldText-title\">{title}</label>\n        <input\n          type=\"text\"\n          name={name}\n          placeholder={placeholder}\n          ref={register({\n            required: \"Required\",\n            pattern,\n            validate,\n          })}\n          {...props}\n        />\n        <div className={classErrors}>{title}*</div>\n      </div>\n    );\n  }\n);\n","import React, { FC, memo, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\n\nimport { authorizationActions } from \"../../store/authorization/authorization.actions\";\nimport { getAuthorization } from \"../../store/authorization/authorization.selectors\";\nimport { BUTTON_TYPE } from \"../../shared/components/Button/model/ButtonProps.model\";\nimport { ACTION_LOGIN } from \"../../store/authorization/authorization.model\";\nimport { FieldBlock } from \"../../shared/components/Fields/FieldBlock\";\nimport { FieldText } from \"../../shared/components/Fields/InputText\";\nimport { ACTION_HISTORY } from \"../../store/history/history.model\";\nimport { Button } from \"../../shared/components/Button\";\n\nimport \"./Authorization.scss\";\n\nexport const Authorization: FC = memo(() => {\n  const { isLoading } = useSelector(getAuthorization);\n  const { register, handleSubmit, errors } = useForm();\n  const dispatch = useDispatch();\n\n  const onSubmit = useCallback(\n    (values: any) => {\n      dispatch(\n        authorizationActions.updateLogin(values.name, ACTION_LOGIN.LOGIN)\n      );\n    },\n    [dispatch]\n  );\n\n  return (\n    <div className=\"page-authorization\">\n      <div className=\"page-authorization-body\">\n        <div className=\"authorization-form\">\n          <FieldBlock>\n            <FieldText\n              name=\"name\"\n              title=\"Имя пользователя\"\n              placeholder=\"Например, Филип\"\n              register={register}\n              disable={isLoading}\n              errors={errors}\n            />\n          </FieldBlock>\n          <Button\n            type={BUTTON_TYPE.DEFAULT}\n            onClick={handleSubmit(onSubmit)}\n            title={ACTION_HISTORY.LOGIN}\n            style={{\n              margin: 0,\n              width: \"100%\",\n            }}\n            loading={isLoading}\n          />\n        </div>\n      </div>\n    </div>\n  );\n});\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\nimport { Dispatch } from \"redux\";\n\nimport { StoreModel } from \"../model/store.model\";\nimport { getCurrentPage } from \"./pagecontrol.utils\";\n\nclass Pagecontrol {\n  readonly prefix: string = \"PAGE_CONTROL\";\n  readonly SET_CONTROL: string = `${this.prefix}.SET_CONTROL`;\n\n  setControl: ActionFunction1<any, Action<any>> = createAction(\n    this.SET_CONTROL\n  );\n\n  updateControl: any = (isShow: boolean) => async (\n    dispatch: Dispatch,\n    getState: () => StoreModel\n  ) => {\n    const { route } = getState().route;\n    const current = getCurrentPage(route);\n\n    dispatch(this.setControl({ [current]: isShow }));\n  };\n}\n\nexport const pageControlActions = new Pagecontrol();\n","export const getCurrentPage = (string: string) => {\n  return string.slice(1);\n};\n","import { Action, handleActions } from \"redux-actions\";\nimport { PageControlModel } from \"./pagecontrol.model\";\nimport { pageControlActions } from \"./pagecontrol.actions\";\n\nconst initialState: PageControlModel = {\n  home: false,\n  history: true,\n  contacts: true,\n  parcels: true,\n};\n\nconst setControl = (\n  state: PageControlModel,\n  action: Action<any>\n): PageControlModel => ({\n  ...state,\n  ...action.payload,\n});\n\nconst reducerMap: { [key: string]: any } = {\n  [pageControlActions.SET_CONTROL]: setControl,\n};\n\nexport const pagecontrolReducer = handleActions(reducerMap, initialState);\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getPageControl = (state: StoreModel) => state.pagecontrol;\n","import React, { FC, memo } from \"react\";\n\nimport { HeadingpageModel } from \"./model/Headingpage.model\";\n\nimport \"./HeadingPage.scss\";\n\nexport const HeadingPage: FC<HeadingpageModel> = memo(\n  ({ titleContent, buttonContent }) => {\n    return (\n      <div className=\"heading-page flex-center\">\n        <div className=\"heading-page-title\">{titleContent}</div>\n        <div className=\"heading-page-buttons\">{buttonContent}</div>\n      </div>\n    );\n  }\n);\n","import React, { FC, memo } from \"react\";\n\nimport \"./BodyPage.scss\";\n\nexport const BodyPage: FC = memo(({ children }) => {\n  return <div className=\"body-page\">{children}</div>;\n});\n","import React, { FC, memo } from \"react\";\n\nimport { FieldCheckBoxModel } from \"./model/FieldCheckBox.model\";\n\nimport \"./CheckBox.scss\";\n\nexport const FieldCheckBox: FC<FieldCheckBoxModel> = memo(\n  ({ name, title, register, ...props }) => {\n    return (\n      <div className=\"fieldCheckBox\">\n        <label>{`${title}: `} </label>\n        <input type=\"checkbox\" name={name} ref={register({})} {...props} />\n      </div>\n    );\n  }\n);\n","import { ContactModel } from \"../../pages/Contacts/components/TableContacts/model/TableContacts.model\";\n\nexport const ApiUpdateContacts = (\n  contacts: ContactModel[],\n  contact: ContactModel\n): ContactModel[] => {\n  let lengthList = contacts.length;\n\n  if (!contact.id || !lengthList) {\n    return [...contacts, { ...contact, id: contacts[lengthList - 1].id + 1 }];\n  }\n\n  if (!!contact.id && !!lengthList) {\n    const resultList: ContactModel[] = [];\n\n    contacts.map((item) => {\n      if (item.id === contact.id) {\n        resultList.push({\n          ...item,\n          ...contact,\n        });\n      }\n\n      if (item.id !== contact.id) {\n        resultList.push(item);\n      }\n    });\n\n    return resultList;\n  }\n\n  return contacts;\n};\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\nimport { Dispatch } from \"redux\";\n\nimport { ContactModel } from \"../../pages/Contacts/components/TableContacts/model/TableContacts.model\";\nimport { ACTION_HISTORY } from \"../history/history.model\";\nimport { StoreModel } from \"../model/store.model\";\nimport { timerCount } from \"../../shared/utils/service.util\";\nimport { ApiUpdateContacts } from \"./contacts.utils\";\nimport { historyActions } from \"../history\";\nimport { notificationsActions } from \"../notifications\";\n\nclass ContactsActions {\n  readonly prefix: string = \"CONTACTS\";\n  readonly SET_LOADING: string = `${this.prefix}.SET_LOADING`;\n  readonly SET_UPDATE_CONTACTS: string = `${this.prefix}.SET_UPDATE_CONTACTS`;\n  readonly SET_REMOVE_CONTACT: string = `${this.prefix}.SET_REMOVE_CONTACT`;\n\n  setLoading: ActionFunction1<boolean, Action<boolean>> = createAction(\n    this.SET_LOADING\n  );\n  setRemoveContact: ActionFunction1<any, Action<any>> = createAction(\n    this.SET_REMOVE_CONTACT\n  );\n\n  setUpdateContacts: ActionFunction1<any, Action<any>> = createAction(\n    this.SET_UPDATE_CONTACTS\n  );\n\n  updateContacts: any = (\n    contact: ContactModel,\n    action: ACTION_HISTORY\n  ) => async (dispatch: Dispatch, getState: () => StoreModel) => {\n    const { list } = getState().contacts;\n    dispatch(this.setLoading(true));\n    try {\n      const timer = setTimeout(() => {\n        dispatch(this.setUpdateContacts(ApiUpdateContacts(list, contact)));\n        dispatch(\n          notificationsActions.updateContent(\"Данные успешно сохранены\")\n        );\n        dispatch(historyActions.updateHistory(action));\n        dispatch(this.setLoading(false));\n      }, timerCount);\n      return timer;\n    } catch (e) {\n      console.log(\"Ошибка в методе updateContacts: \", e);\n      dispatch(\n          notificationsActions.updateContent(\"При сохранении произошла ошибка\")\n      );\n      dispatch(this.setLoading(false));\n    }\n  };\n\n  removeContact: any = (\n    contact: ContactModel,\n    action: ACTION_HISTORY\n  ) => async (dispatch: Dispatch, getState: () => StoreModel) => {\n    const { list } = getState().contacts;\n    dispatch(this.setLoading(true));\n    try {\n      const timer = setTimeout(() => {\n        dispatch(this.setRemoveContact(ApiUpdateContacts(list, contact)));\n        dispatch(\n          notificationsActions.updateContent(\"Данные успешно сохранены\")\n        );\n        dispatch(historyActions.updateHistory(action));\n        dispatch(this.setLoading(false));\n      }, timerCount);\n      return timer;\n    } catch (e) {\n      console.log(\"Ошибка в методе updateContacts: \", e);\n      dispatch(\n          notificationsActions.updateContent(\"При сохранении произошла ошибка\")\n      );\n      dispatch(this.setLoading(false));\n    }\n  };\n}\n\nexport const contactsActions = new ContactsActions();\n","export const timerCount = 1000;\n","import { Action, handleActions } from \"redux-actions\";\nimport { MockTableContacts } from \"../../mock/mocks\";\n\nimport { ContactModel } from \"../../pages/Contacts/components/TableContacts/model/TableContacts.model\";\nimport { contactsActions } from \"./contacts.actions\";\nimport { ContactsModelState } from \"./contacts.model\";\n\nexport const initialState: ContactsModelState = {\n  list: MockTableContacts,\n  isLoading: false,\n  error: \"\",\n};\n\nconst setLaoding = (\n  state: ContactsModelState,\n  action: Action<boolean>\n): ContactsModelState => ({\n  ...state,\n  isLoading: action.payload,\n});\n\nconst setUpdateContacts = (\n  state: ContactsModelState,\n  action: Action<ContactModel[]>\n): ContactsModelState => ({\n  ...state,\n  list: action.payload,\n});\n\nconst setRemoveContacts = (\n  state: ContactsModelState,\n  action: Action<ContactModel[]>\n): ContactsModelState => ({\n  ...state,\n  list: action.payload,\n});\n\nconst reducerMap: { [key: string]: any } = {\n  [contactsActions.SET_LOADING]: setLaoding,\n  [contactsActions.SET_UPDATE_CONTACTS]: setUpdateContacts,\n  [contactsActions.SET_REMOVE_CONTACT]: setRemoveContacts,\n};\n\nexport const contactsReducer = handleActions(reducerMap, initialState);\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getContacts = (state: StoreModel) => state.contacts;\n","export const PATTERNS = {\n  EMAIL: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,}$/i,\n};\n","import React, { FC, memo } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\n\nimport { FieldCheckBox } from \"../../../../shared/components/Fields/CheckBox\";\nimport { FieldBlock } from \"../../../../shared/components/Fields/FieldBlock\";\nimport { FieldText } from \"../../../../shared/components/Fields/InputText\";\nimport { ContactModel } from \"../TableContacts/model/TableContacts.model\";\nimport { ACTION_HISTORY } from \"../../../../store/history/history.model\";\nimport { contactsActions } from \"../../../../store/contacts\";\nimport { Modal } from \"../../../../shared/components/Modal\";\nimport { PATTERNS } from \"../../../../shared/constants\";\n\nimport \"./ContactsModal.scss\";\n\nexport const ContactsModal: FC<any> = memo(\n  ({ initialValues, title, modalClosed }) => {\n    const dispatch = useDispatch();\n\n    const { handleSubmit, register, errors } = useForm({\n      defaultValues: {\n        ...initialValues,\n      },\n    });\n\n    const onSubmit = (values: any) => {\n      const prepareItem: ContactModel = {\n        ...initialValues,\n        ...values,\n      };\n\n      dispatch(\n        contactsActions.updateContacts(prepareItem, ACTION_HISTORY.EDIT_CONTACT)\n      );\n      modalClosed();\n    };\n\n    return (\n      <Modal\n        title={title}\n        cbCancel={modalClosed}\n        cancelTitle=\"Отмена\"\n        cbOk={handleSubmit(onSubmit)}\n        okTitle=\"Сохранить\"\n        modalClosed={modalClosed}\n      >\n        <div className=\"contacts-modal\">\n          <FieldBlock>\n            <FieldText\n              title=\"Имя\"\n              name=\"name\"\n              register={register}\n              errors={errors}\n            />\n          </FieldBlock>\n          <FieldBlock>\n            <FieldText\n              title=\"Почта\"\n              name=\"email\"\n              register={register}\n              errors={errors}\n              pattern={{\n                value: PATTERNS.EMAIL,\n              }}\n            />\n          </FieldBlock>\n          <FieldBlock>\n            <FieldText\n              title=\"Сотовый\"\n              name=\"phone\"\n              register={register}\n              errors={errors}\n            />\n          </FieldBlock>\n          <FieldBlock>\n            <FieldCheckBox title=\"Архив\" name=\"isArchive\" register={register} />\n          </FieldBlock>\n        </div>\n      </Modal>\n    );\n  }\n);\n","import React, { FC, memo, useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { BUTTON_TYPE } from \"../../../../shared/components/Button/model/ButtonProps.model\";\nimport { ACTION_HISTORY } from \"../../../../store/history/history.model\";\nimport { Button } from \"../../../../shared/components/Button\";\nimport { contactsActions } from \"../../../../store/contacts\";\nimport { ContactsModal } from \"../ContactsModal\";\n\nimport \"./MenuSetting.scss\";\n\nexport const MenuSetting: FC<any> = memo(({ item }) => {\n  const [isShowModal, setShowModal] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleRemove = () => {\n    dispatch(\n      contactsActions.removeContact(\n        { ...item, isArchive: !item.isArchive },\n        ACTION_HISTORY.ARCHIVE_CONTACT\n      )\n    );\n  };\n\n  const handleOpenModal = (action: ACTION_HISTORY) => {\n    setShowModal(true);\n  };\n\n  const isArchive = useMemo(() => item.isArchive, [item]);\n  const archiveButtonTitle = useMemo(\n    () => (item.isArchive ? \"Восстановить\" : \"Архивировать\"),\n    [item]\n  );\n\n  return (\n    <>\n      <div className=\"menu-setting\">\n        <Button\n          type={BUTTON_TYPE.DEFAULT}\n          onClick={() => handleOpenModal(ACTION_HISTORY.EDIT_CONTACT)}\n          title=\"Редактировать\"\n          visible={isArchive}\n        />\n        <Button\n          type={BUTTON_TYPE.ERROR}\n          onClick={handleRemove}\n          title={archiveButtonTitle}\n        />\n      </div>\n      {isShowModal && (\n        <ContactsModal\n          initialValues={item}\n          title=\"Редактирование контакта\"\n          modalClosed={() => setShowModal(false)}\n        />\n      )}\n    </>\n  );\n});\n","import React, { FC, memo } from \"react\";\nimport cn from \"classnames\";\n\nimport { ContactModel, TableContactsModel } from \"./model/TableContacts.model\";\nimport { MenuSetting } from \"../MenuSetting\";\n\nimport \"./TableContacts.scss\";\n\nexport const TableContacts: FC<TableContactsModel> = memo(\n  ({ list, archiveMode }) => {\n    const classNameCol = (item: ContactModel) =>\n      cn([\n        \"table-contacts-row\",\n        { \"table-contacts-row__archive\": item.isArchive },\n      ]);\n    return (\n      <div className=\"table-contacts\">\n        <div className=\"table-contacts-row table-contacts-row__header\">\n          <div className=\"table-contacts-col\">id</div>\n          <div className=\"table-contacts-col\">Имя</div>\n          <div className=\"table-contacts-col\">Почта</div>\n          <div className=\"table-contacts-col\">Сотовый</div>\n          <div className=\"table-contacts-col\">Настройки</div>\n        </div>\n        {list.map((item, key) => {\n          if (!!archiveMode && !!item.isArchive) {\n            return (\n              <div className={classNameCol(item)} key={key}>\n                <div className=\"table-contacts-col\">{item.id}</div>\n                <div className=\"table-contacts-col\">{item.name}</div>\n                <div className=\"table-contacts-col\">{item.email}</div>\n                <div className=\"table-contacts-col\">{item.phone}</div>\n                <div className=\"flex-end\">\n                  <MenuSetting item={item} />\n                </div>\n              </div>\n            );\n          }\n\n          if (!archiveMode && !item.isArchive) {\n            return (\n              <div className={classNameCol(item)} key={key}>\n                <div className=\"table-contacts-col\">{item.id}</div>\n                <div className=\"table-contacts-col\">{item.name}</div>\n                <div className=\"table-contacts-col\">{item.email}</div>\n                <div className=\"table-contacts-col\">{item.phone}</div>\n                <div className=\"flex-end\">\n                  <MenuSetting item={item} />\n                </div>\n              </div>\n            );\n          }\n        })}\n      </div>\n    );\n  }\n);\n","import React, { FC, memo, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { BUTTON_TYPE } from \"../../shared/components/Button/model/ButtonProps.model\";\nimport { getPageControl, pageControlActions } from \"../../store/pagecontrol\";\nimport { HeadingPage } from \"../../shared/components/HeadingPage\";\nimport { BodyPage } from \"../../shared/components/BodyPage\";\nimport { ContactsModal } from \"./components/ContactsModal\";\nimport { TableContacts } from \"./components/TableContacts\";\nimport { Button } from \"../../shared/components/Button\";\nimport { Body } from \"../../shared/components/Body\";\nimport { Page } from \"../../routing/routing.enums\";\nimport { getContacts } from \"../../store/contacts\";\n\nimport add_contact_icon from \"../../../assets/button-icons/add-contact-icon.svg\";\nimport archive_icon from \"../../../assets/button-icons/archive-icon.svg\";\n\nexport const Contacts: FC = memo(() => {\n  const { contacts } = useSelector(getPageControl);\n  const { list, isLoading } = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const [isShowTable, setShowTable] = useState(contacts);\n  const [isShowModal, setShowModal] = useState(false);\n  const [isArchiveMode, setArchiveMode] = useState(false);\n\n  const titleHeadingPage = useMemo(\n    () =>\n      `${Page.CONTACTS} (${\n        isArchiveMode ? \"архивный список\" : \"активный список\"\n      })`,\n    [isArchiveMode]\n  );\n\n  useEffect(() => {\n    dispatch(pageControlActions.updateControl(isShowTable));\n  }, [dispatch, isShowTable]);\n\n  return (\n    <Body isLoading={isLoading}>\n      <HeadingPage\n        titleContent={titleHeadingPage}\n        buttonContent={\n          <>\n            <Button\n              type={BUTTON_TYPE.NORMAL}\n              onClick={() => setArchiveMode(!isArchiveMode)}\n              title={isArchiveMode ? \"Выйти из архива\" : \"Перейти в архив\"}\n              disable={!isShowTable}\n              icon={\n                <img\n                  src={archive_icon}\n                  alt={isArchiveMode ? \"Выйти из архива\" : \"Перейти в архив\"}\n                />\n              }\n            />\n            <Button\n              type={BUTTON_TYPE.SUCCESS}\n              onClick={() => setShowModal(true)}\n              title=\"Добавить контакт\"\n              disable={!isShowTable}\n              icon={<img src={add_contact_icon} alt=\"Добавить контакт\" />}\n            />\n            <Button\n              type={BUTTON_TYPE.DEFAULT}\n              onClick={() => setShowTable(!isShowTable)}\n              title={isShowTable ? \"Свернуть контакты\" : \"Показать контакты\"}\n            />\n          </>\n        }\n      />\n      {isShowTable && !!list.length && (\n        <BodyPage>\n          <TableContacts list={list} archiveMode={isArchiveMode} />\n        </BodyPage>\n      )}\n\n      {isShowModal && (\n        <ContactsModal\n          title=\"Добавить контакт\"\n          modalClosed={() => setShowModal(false)}\n        />\n      )}\n    </Body>\n  );\n});\n","import React, { FC, memo } from \"react\";\nimport moment from \"moment\";\n\nimport { HistoryItemModel } from \"../../../../store/history/history.model\";\nimport { DATE_FORMAT } from \"../../../../shared/constants\";\n\nimport \"./TableHistory.scss\";\n\nexport const TableHistory: FC<{ list: HistoryItemModel[] }> = memo(\n  ({ list }) => {\n    return (\n      <div className=\"table-history\">\n        <div className=\"table-history-row table-history-row__header\">\n          <div className=\"table-history-col\">Пользователь</div>\n          <div className=\"table-history-col\">Дата действия</div>\n          <div className=\"table-history-col\">Действие</div>\n        </div>\n        {list.map(({ user, date, action }, key) => (\n          <div className=\"table-history-row\" key={key}>\n            <div className=\"table-history-col\">{user.name.firstName}</div>\n            <div className=\"table-history-col\">\n              {moment(date).format(DATE_FORMAT.DB)}\n            </div>\n            <div className=\"table-history-col\">{action}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n);\n","import React, { FC, memo, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { BUTTON_TYPE } from \"../../shared/components/Button/model/ButtonProps.model\";\nimport { getPageControl, pageControlActions } from \"../../store/pagecontrol\";\nimport { getHistory } from \"../../store/history/history.selectors\";\nimport { HeadingPage } from \"../../shared/components/HeadingPage\";\nimport { BodyPage } from \"../../shared/components/BodyPage\";\nimport { TableHistory } from \"./components/TableHistory\";\nimport { Button } from \"../../shared/components/Button\";\nimport { Body } from \"../../shared/components/Body\";\nimport { Page } from \"../../routing/routing.enums\";\n\nexport const History: FC = memo(() => {\n  const { list } = useSelector(getHistory);\n  const { history } = useSelector(getPageControl);\n\n  const [isShowTable, setShowTable] = useState(history);\n  const buttonTitle = useMemo(\n    () => (isShowTable ? \"Свернуть историю\" : \"Показать историю\"),\n    [isShowTable]\n  );\n\n  const handleClick = () => {\n    setShowTable(!isShowTable);\n  };\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(pageControlActions.updateControl(isShowTable));\n  }, [dispatch, isShowTable]);\n\n  const title = useMemo(\n    () => `${Page.HISTORY} (кол-во действий ${list.length})`,\n    [list]\n  );\n\n  return (\n    <Body>\n      <HeadingPage\n        titleContent={title}\n        buttonContent={\n          <Button\n            type={BUTTON_TYPE.DEFAULT}\n            onClick={handleClick}\n            title={buttonTitle}\n          />\n        }\n      />\n      {isShowTable && (\n        <BodyPage>\n          <TableHistory list={list} />\n        </BodyPage>\n      )}\n    </Body>\n  );\n});\n","import { Action, ActionFunction1, createAction } from \"redux-actions\";\nimport { Dispatch } from \"redux\";\n\nimport { historyActions } from \"../history\";\nimport { ACTION_HISTORY } from \"../history/history.model\";\n\nclass Parcel {\n  readonly prefix: string = \"PARCEL\";\n  readonly SET_LOADING: string = `${this.prefix}.SET_LOADING`;\n  readonly SET_PARCEL: string = `${this.prefix}.SET_PARCEL`;\n\n  setLoading: ActionFunction1<boolean, Action<boolean>> = createAction(\n    this.SET_LOADING\n  );\n  setParcel: ActionFunction1<any, Action<any>> = createAction(this.SET_PARCEL);\n\n  updateParcel: any = (obj: any) => async (dispatch: Dispatch) => {\n    dispatch(this.setLoading(true));\n    dispatch(this.setParcel(obj));\n\n    dispatch(historyActions.updateHistory(ACTION_HISTORY.PARCEL_UPDATE));\n    try {\n    } catch (error) {\n      console.log(\"Ошибка в методе updateParcel: \", error);\n    } finally {\n      dispatch(this.setLoading(false));\n    }\n  };\n}\n\nexport const parcelActions = new Parcel();\n","import { Action, handleActions } from \"redux-actions\";\n\nimport { ParcelsStateModel } from \"./parcel.model\";\nimport { parcelActions } from \"./parcel.actions\";\nimport { MockParcel } from \"../../mock/mocks\";\n\nconst initialState: ParcelsStateModel = {\n  list: MockParcel,\n  isLoading: false,\n  error: \"\",\n};\n\nconst setLoading = (\n  state: ParcelsStateModel,\n  action: Action<boolean>\n): ParcelsStateModel => ({\n  ...state,\n  isLoading: action.payload,\n});\n\nconst setParcel = (\n  state: ParcelsStateModel,\n  action: Action<any[]>\n): ParcelsStateModel => ({\n  ...state,\n  list: action.payload,\n});\n\nconst reducerMap: { [key: string]: any } = {\n  [parcelActions.SET_PARCEL]: setParcel,\n  [parcelActions.SET_LOADING]: setLoading,\n};\n\nexport const parcelReducer = handleActions(reducerMap, initialState);\n","import { StoreModel } from \"../model/store.model\";\n\nexport const getParcel = (state: StoreModel) => state.parcel;\n","import React, { FC, memo, useMemo } from \"react\";\nimport cn from \"classnames\";\nimport moment from \"moment\";\n\nimport { TableParcelStatusFlowModel } from \"./model/TableParcelStatusFlow.model\";\nimport { DATE_FORMAT } from \"../../../../../../shared/constants\";\n\nimport \"./TableParcelStatusFlow.scss\";\n\nexport const TableParcelStatusFlow: FC<TableParcelStatusFlowModel> = memo(\n  ({ isShowStatusFlow, historyStatuses, departureDate }) => {\n    const classesHistoryStatuses = useMemo(\n      () =>\n        cn([\n          { \"table-parcels-row__history-statuses\": isShowStatusFlow },\n          { \"table-parcels-row__history-statuses__hidden\": !isShowStatusFlow },\n        ]),\n      [isShowStatusFlow]\n    );\n\n    return (\n      <div className={classesHistoryStatuses}>\n        <div className=\"table-statuses-row table-statuses-row-header\">\n          <div className=\"table-statuses-col\">Состояние</div>\n          <div className=\"table-statuses-col\">Дата</div>\n          <div className=\"table-statuses-col\">Статус</div>\n        </div>\n        {historyStatuses.map(({ status, date }, key) => {\n          const classesStatus = `table-statuses-row ${cn([\n            { \"table-statuses-row__done\": !!date },\n          ])}`;\n\n          const contentDate = !!date\n            ? moment(departureDate).format(DATE_FORMAT.DB)\n            : \"ожидается\";\n\n          const contentCheckPoint = !!date ? \"выполнено\" : \"ожидается\";\n\n          return (\n            <div className={classesStatus} key={key}>\n              <div className=\"table-statuses-col\">{status}</div>\n              <div className=\"table-statuses-col\">{contentDate}</div>\n              <div className=\"table-statuses-col\">{contentCheckPoint}</div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n);\n","import React, { FC, memo, useEffect, useMemo, useState } from \"react\";\nimport moment from \"moment\";\nimport cn from \"classnames\";\n\nimport { BUTTON_TYPE } from \"../../../../../../shared/components/Button/model/ButtonProps.model\";\nimport { Button } from \"../../../../../../shared/components/Button\";\nimport { DATE_FORMAT } from \"../../../../../../shared/constants\";\nimport {\n  ParcelModel,\n  ParcelStatusFlow,\n} from \"../../../../../../store/parcel/parcel.model\";\nimport { TableParcelStatusFlow } from \"../TableParcelStatusFlow\";\n\nimport \"./TableParcelItem.scss\";\n\nexport interface TableParcelItem extends ParcelModel {\n  isShowAll: boolean;\n}\n\nexport const TableParcelItem: FC<TableParcelItem> = memo(\n  ({\n    id,\n    sender,\n    recipient,\n    typeOfCargo,\n    departureDate,\n    weight,\n    currentStatus,\n    historyStatuses,\n    isShowAll,\n  }) => {\n    const [isShowStatusFlow, setShowStatusFlow] = useState(false);\n    useEffect(() => setShowStatusFlow(isShowAll), [isShowAll]);\n\n    const titleButton = useMemo(\n      () => (isShowStatusFlow ? \"Свернуть\" : \"Подробнее\"),\n      [isShowStatusFlow]\n    );\n\n    const classesItem = useMemo(\n      () =>\n        cn([\n          \"table-parcels-row\",\n          {\n            \"table-parcels-row__complete\":\n              currentStatus === ParcelStatusFlow.DELIVERY_TO_THE_ADDRESSEE,\n          },\n        ]),\n      [currentStatus]\n    );\n\n    return (\n      <>\n        <div className={classesItem}>\n          <div className=\"table-parcels-col\">{id}</div>\n          <div className=\"table-parcels-col\">{sender}</div>\n          <div className=\"table-parcels-col\">{recipient}</div>\n          <div className=\"table-parcels-col\">{typeOfCargo}</div>\n          <div className=\"table-parcels-col\">\n            {moment(departureDate).format(DATE_FORMAT.DDMMYYYY)}\n          </div>\n          <div className=\"table-parcels-col\">{`${weight} кг`}</div>\n          <div className=\"table-parcels-col table-parcels-col-status\">\n            {currentStatus}\n          </div>\n          <div className=\"table-parcels-col flex-end\">\n            <Button\n              type={BUTTON_TYPE.DEFAULT}\n              onClick={() =>\n                setShowStatusFlow((isShowStatusFlow) => !isShowStatusFlow)\n              }\n              title={titleButton}\n            />\n          </div>\n        </div>\n        <TableParcelStatusFlow\n          isShowStatusFlow={isShowStatusFlow}\n          historyStatuses={historyStatuses}\n          departureDate={departureDate}\n        />\n      </>\n    );\n  }\n);\n","import React, { FC, memo, useMemo, useState } from \"react\";\n\nimport { BUTTON_TYPE } from \"../../../../shared/components/Button/model/ButtonProps.model\";\nimport { TableParcelItem } from \"./components/TableParcelItem\";\nimport { TableParcelsModel } from \"./model/TableParcels.model\";\nimport { Button } from \"../../../../shared/components/Button\";\n\nimport \"./TableParcels.scss\";\n\nexport const TableParcels: FC<TableParcelsModel> = memo(({ list }) => {\n  const [isShowAll, setShowAll] = useState(false);\n\n  const titleButton = useMemo(\n    () => (isShowAll ? \"Свернуть все\" : \"Развернуть все\"),\n    [isShowAll]\n  );\n\n  return (\n    <div className=\"table-parcels\">\n      <div className=\"table-parcels-row table-parcels-row__header\">\n        <div className=\"table-parcels-col\">id</div>\n        <div className=\"table-parcels-col\">Отправитель</div>\n        <div className=\"table-parcels-col\">Получатель</div>\n        <div className=\"table-parcels-col\">Тип груза</div>\n        <div className=\"table-parcels-col\">Дата отправ.</div>\n        <div className=\"table-parcels-col\">Вес</div>\n        <div className=\"table-parcels-col\">Статус</div>\n        <div className=\"table-parcels-col flex-end\">\n          <Button\n            type={BUTTON_TYPE.DEFAULT}\n            onClick={() => setShowAll((isShowAll) => !isShowAll)}\n            title={titleButton}\n          />\n        </div>\n      </div>\n      {list.map((item, key) => (\n        <TableParcelItem {...item} isShowAll={isShowAll} key={key} />\n      ))}\n    </div>\n  );\n});\n","import React, { FC, memo, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { BUTTON_TYPE } from \"../../shared/components/Button/model/ButtonProps.model\";\nimport { getPageControl, pageControlActions } from \"../../store/pagecontrol\";\nimport { HeadingPage } from \"../../shared/components/HeadingPage\";\nimport { Button } from \"../../shared/components/Button\";\nimport { Body } from \"../../shared/components/Body\";\nimport { Page } from \"../../routing/routing.enums\";\nimport { getParcel } from \"../../store/parcel\";\nimport { BodyPage } from \"../../shared/components/BodyPage\";\nimport { TableParcels } from \"./components/TableParcels\";\n\nexport const Parcels: FC = memo(() => {\n  const { parcels } = useSelector(getPageControl);\n\n  const { isLoading, list } = useSelector(getParcel);\n  const dispatch = useDispatch();\n\n  const [isShowTable, setShowTable] = useState(parcels);\n\n  const title = useMemo(() => `${Page.PARCELS} (${list.length})`, [list]);\n\n  useEffect(() => {\n    dispatch(pageControlActions.updateControl(isShowTable));\n  }, [dispatch, isShowTable]);\n\n  return (\n    <Body isLoading={isLoading}>\n      <HeadingPage\n        titleContent={title}\n        buttonContent={\n          <>\n            <Button\n              type={BUTTON_TYPE.DEFAULT}\n              onClick={() => setShowTable(!isShowTable)}\n              title={isShowTable ? `Свернуть список` : `Показать список`}\n            />\n          </>\n        }\n      />\n      <BodyPage>\n        {!!list.length && isShowTable && <TableParcels list={list} />}\n      </BodyPage>\n    </Body>\n  );\n});\n","import React from \"react\";\n\nimport { Authorization } from \"../pages/Authorization\";\nimport { RouteModel } from \"./routing.model\";\nimport { Contacts } from \"../pages/Contacts\";\nimport { RouteUrls } from \"./routing.enums\";\nimport { History } from \"../pages/History\";\nimport {Parcels} from \"../pages/Parcels\";\n\nexport const Routes: RouteModel[] = [\n  {\n    component: () => <History />,\n    path: `${RouteUrls.HISTORY}`,\n    exact: false,\n  },\n  {\n    component: () => <Contacts />,\n    path: `${RouteUrls.CONTACTS}`,\n    exact: false,\n  },\n  {\n    component: () => <Parcels />,\n    path: `${RouteUrls.PARCELS}`,\n    exact: false,\n  },\n  {\n    component: () => <Authorization />,\n    path: `${RouteUrls.LOGIN}`,\n    exact: false,\n  },\n];\n","import { UserInfoModel } from \"../../store/history/history.model\";\n\nexport const prepareGet = (obj: UserInfoModel) => {\n  const name = obj.name.secondName\n      ? `${obj.name.firstName} ${obj.name.secondName}`\n      : obj.name.firstName;\n\n  return {\n    ...obj,\n    name,\n  };\n};\n\nexport const prepareSet = (obj: any): UserInfoModel => {\n  const res = obj?.name?.split(\" \");\n  return {\n    ...obj,\n    name: {\n      firstName: res?.[0],\n      secondName: res?.[1],\n    },\n  };\n};\n","import React, { FC, memo } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { FieldBlock } from \"../../../../shared/components/Fields/FieldBlock\";\nimport { FieldText } from \"../../../../shared/components/Fields/InputText\";\nimport {\n  BUTTON_SIZE,\n  BUTTON_TYPE,\n} from \"../../../../shared/components/Button/model/ButtonProps.model\";\nimport usercardicon from \"../../../../../assets/user-icons/user-card.svg\";\nimport phoneicon from \"../../../../../assets/user-icons/phone-icon.svg\";\nimport {\n  authorizationActions,\n  getAuthorization,\n} from \"../../../../store/authorization\";\nimport mailicon from \"../../../../../assets/user-icons/mail-icon.svg\";\nimport { PATTERNS } from \"../../../../shared/constants/input.pattern\";\nimport { Button } from \"../../../../shared/components/Button\";\nimport { EditFormHomeModel } from \"./EditFormHome.model\";\nimport { prepareGet, prepareSet } from \"../../Home.utils\";\n\nimport \"./EditFormHome.scss\";\n\nexport const EditFormHome: FC<EditFormHomeModel> = memo(({ closedForm }) => {\n  const { user } = useSelector(getAuthorization);\n  const disaptch = useDispatch();\n  const { register, handleSubmit, errors } = useForm({\n    defaultValues: prepareGet(user),\n  });\n\n  const onSubmit = (values: any) => {\n    disaptch(authorizationActions.updateUserInfo(prepareSet(values)));\n    closedForm();\n  };\n\n  return (\n    <div className=\"edit-form-home\">\n      <div className=\"edit-form-home grid-row\">\n        <FieldBlock icon={usercardicon}>\n          <FieldText\n            title=\"Имя и фамилия\"\n            name=\"name\"\n            placeholder=\"Укажите ваши имя и фамилию\"\n            register={register}\n            errors={errors}\n          />\n        </FieldBlock>\n        <FieldBlock icon={mailicon}>\n          <FieldText\n            title=\"E-mail\"\n            name=\"email\"\n            placeholder=\"Укажите ваш e-mail\"\n            register={register}\n            errors={errors}\n            pattern={{\n              value: PATTERNS.EMAIL,\n            }}\n          />\n        </FieldBlock>\n        <FieldBlock icon={phoneicon}>\n          <FieldText\n            title=\"Номер телефона\"\n            name=\"phone\"\n            placeholder=\"Укажите ваш номер телефона\"\n            register={register}\n            errors={errors}\n          />\n        </FieldBlock>\n      </div>\n      <div className=\"flex-center\">\n        <Button\n          type={BUTTON_TYPE.SUCCESS}\n          size={BUTTON_SIZE.NORMAL}\n          onClick={handleSubmit(onSubmit)}\n          title=\"Сохранить\"\n        />\n      </div>\n    </div>\n  );\n});\n","export const infoContent = (string: string, key: string) => {\n  return string ? string : `Укажите ${key}`;\n};\n","import React, { FC, memo } from \"react\";\n\nimport phone from \"../../../../../assets/user-icons/phone-icon.svg\";\nimport mail from \"../../../../../assets/user-icons/mail-icon.svg\";\nimport { TableHomeModel } from \"./model/TableHome.model\";\nimport { infoContent } from \"./TableHome.utils\";\n\nimport \"./TableHome.scss\";\n\nexport const TableHome: FC<TableHomeModel> = memo(({ user }) => {\n  return (\n    <div className=\"table-home\">\n      <div className=\"table-home-row\">\n        <div className=\"table-home-col\">\n          <img src={mail} alt=\"символ собаки\" />\n        </div>\n        <div className=\"table-home-col\">{infoContent(user.email, \"почту\")}</div>\n      </div>\n      <div className=\"table-home-row\">\n        <div className=\"table-home-col\">\n          <img src={phone} alt=\"символ телефона\" />\n        </div>\n        <div className=\"table-home-col\">\n          {infoContent(user.phone, \"номер телефона\")}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { FC, memo, useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { BUTTON_TYPE } from \"../../shared/components/Button/model/ButtonProps.model\";\nimport { ACTION_LOGIN } from \"../../store/authorization/authorization.model\";\nimport { HeadingPage } from \"../../shared/components/HeadingPage\";\nimport { BodyPage } from \"../../shared/components/BodyPage\";\nimport { Button } from \"../../shared/components/Button\";\nimport { Body } from \"../../shared/components/Body\";\nimport {\n  authorizationActions,\n  getAuthorization,\n} from \"../../store/authorization\";\nimport { SIZE_VERSION } from \"../../shared/components/UserBlock/UserBlock.const\";\nimport { ACTION_HISTORY } from \"../../store/history/history.model\";\nimport { UserBlock } from \"../../shared/components/UserBlock\";\nimport { EditFormHome } from \"./components/EditFormHome\";\nimport { TableHome } from \"./components/TableHome\";\n\nimport edit_icon from \"../../../assets/button-icons/edit-icon.svg\";\nimport exit_icon from \"../../../assets/button-icons/exit-icon.svg\";\n\nexport const Home: FC = memo(() => {\n  const { user, isLoading } = useSelector(getAuthorization);\n  const dispatch = useDispatch();\n  const [isEditMode, setEditMode] = useState(false);\n\n  const handleLogOut = useCallback(() => {\n    dispatch(authorizationActions.updateLogin(user, ACTION_LOGIN.LOGIN_OUT));\n  }, [dispatch, user]);\n\n  return (\n    <Body isLoading={isLoading}>\n      <HeadingPage\n        titleContent={<UserBlock version={SIZE_VERSION.MEDIUM} />}\n        buttonContent={\n          <>\n            <Button\n              type={BUTTON_TYPE.NORMAL}\n              onClick={() => setEditMode(!isEditMode)}\n              title={isEditMode ? \"Отменить\" : \"Редактировать\"}\n              loading={isLoading}\n              icon={<img src={edit_icon} alt=\"режим редактирования\" />}\n            />\n            <Button\n              type={BUTTON_TYPE.ERROR}\n              onClick={handleLogOut}\n              title={ACTION_HISTORY.LOGIN_OUT}\n              loading={isLoading}\n              icon={<img src={exit_icon} alt=\"выход из кабинета\" />}\n            />\n          </>\n        }\n      />\n      <BodyPage>\n        {!isEditMode && <TableHome user={user} />}\n        {!!isEditMode && <EditFormHome closedForm={() => setEditMode(false)} />}\n      </BodyPage>\n    </Body>\n  );\n});\n","import React, { memo, useEffect, useMemo } from \"react\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport { getAuthorization } from \"../store/authorization/authorization.selectors\";\nimport { RoutingModal } from \"./components/RoutingModal\";\nimport { NotFound } from \"../pages/NotFound/NotFound\";\nimport { Header } from \"../shared/components/Header\";\nimport { RouteUrls } from \"./routing.enums\";\nimport { Routes } from \"./routing.const\";\nimport { Home } from \"../pages/Home\";\n\nexport const Routing = memo(() => {\n  const { firstName } = useSelector(getAuthorization).user.name;\n\n  const history = useHistory();\n  const isLogin = useMemo(() => !!firstName, [firstName]);\n\n  useEffect(() => {\n    if (!isLogin) {\n      history.push(RouteUrls.LOGIN);\n    }\n  }, [history, isLogin]);\n\n  return (\n    <>\n      {!!isLogin && <Header />}\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        {Routes.map((route, key) => {\n          const { path, component, exact } = route;\n          return (\n            <Route exact={exact} path={path} component={component} key={key} />\n          );\n        })}\n        <NotFound />\n      </Switch>\n      <RoutingModal />\n    </>\n  );\n});\n","import { combineReducers } from \"redux\";\n\nimport { historyReducer as history } from \"../history\";\nimport { authorizationReducer as authorization } from \"../authorization\";\nimport { routeReducer as route } from \"../route\";\nimport { pagecontrolReducer as pagecontrol } from \"../pagecontrol\";\nimport { contactsReducer as contacts } from \"../contacts\";\nimport { notificationsReducer as notifications } from \"../notifications\";\nimport { parcelReducer as parcel } from \"../parcel\";\n\nexport const reducers = combineReducers({\n  history,\n  authorization,\n  route,\n  pagecontrol,\n  contacts,\n  notifications,\n  parcel,\n});\n","import { Action, Dispatch, Middleware, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\n// Thunk function\nexport const actionFn: Middleware = ({ dispatch, getState }) => (\n  next: Dispatch\n) => (action: Function | Action) => {\n  return action instanceof Function ? action(dispatch, getState) : next(action);\n};\n\nexport const middlewares = composeWithDevTools(applyMiddleware(actionFn));\n","import { createStore } from \"redux\";\n\nimport { reducers } from \"./reducers\";\nimport { middlewares } from \"./middlewares\";\n\nexport const store = createStore(reducers, middlewares);\n","import React, { FC } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport { urls } from \"./app/routing/routing.enums\";\nimport { Routing } from \"./app/routing/routing\";\nimport { store } from \"./app/store\";\n\nimport \"./App.scss\";\nexport const App: FC = () => {\n  return (\n    <Provider store={store}>\n      <Router basename={urls.baseUrl}>\n        <Routing />\n      </Router>\n    </Provider>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"page\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}